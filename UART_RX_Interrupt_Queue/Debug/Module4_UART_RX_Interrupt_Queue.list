
Module4_UART_RX_Interrupt_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a840  0800a840  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a840  0800a840  0001a840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a848  0800a848  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001264  20000014  0800a864  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001278  0800a864  00021278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024666  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004270  00000000  00000000  000446ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fd8  00000000  00000000  00048960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018fb  00000000  00000000  0004a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002debb  00000000  00000000  0004c233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000263dd  00000000  00000000  0007a0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012f84c  00000000  00000000  000a04cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000895c  00000000  00000000  001cfd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001d8674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a748 	.word	0x0800a748

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	0800a748 	.word	0x0800a748

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f103 0208 	add.w	r2, r3, #8
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0208 	add.w	r2, r3, #8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f103 0208 	add.w	r2, r3, #8
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d103      	bne.n	8000586 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e00c      	b.n	80005a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3308      	adds	r3, #8
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e002      	b.n	8000594 <vListInsert+0x2e>
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	429a      	cmp	r2, r3
 800059e:	d2f6      	bcs.n	800058e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	6892      	ldr	r2, [r2, #8]
 80005ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6852      	ldr	r2, [r2, #4]
 80005f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d103      	bne.n	800060c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10a      	bne.n	800065a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000656:	bf00      	nop
 8000658:	e7fe      	b.n	8000658 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d05d      	beq.n	800071c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000664:	2b00      	cmp	r3, #0
 8000666:	d059      	beq.n	800071c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000670:	2100      	movs	r1, #0
 8000672:	fba3 2302 	umull	r2, r3, r3, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d000      	beq.n	800067c <xQueueGenericReset+0x50>
 800067a:	2101      	movs	r1, #1
 800067c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800067e:	2b00      	cmp	r3, #0
 8000680:	d14c      	bne.n	800071c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000682:	f001 fe59 	bl	8002338 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068e:	6939      	ldr	r1, [r7, #16]
 8000690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	441a      	add	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	2200      	movs	r2, #0
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	3b01      	subs	r3, #1
 80006b4:	6939      	ldr	r1, [r7, #16]
 80006b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006b8:	fb01 f303 	mul.w	r3, r1, r3
 80006bc:	441a      	add	r2, r3
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	22ff      	movs	r2, #255	; 0xff
 80006ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d114      	bne.n	8000702 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d01a      	beq.n	8000716 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3310      	adds	r3, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ffc3 	bl	8001670 <xTaskRemoveFromEventList>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d012      	beq.n	8000716 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <xQueueGenericReset+0x11c>)
 80006f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	e009      	b.n	8000716 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	3310      	adds	r3, #16
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff00 	bl	800050c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3324      	adds	r3, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fefb 	bl	800050c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000716:	f001 fe3f 	bl	8002398 <vPortExitCritical>
 800071a:	e001      	b.n	8000720 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d10a      	bne.n	800073c <xQueueGenericReset+0x110>
        __asm volatile
 8000726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072a:	f383 8811 	msr	BASEPRI, r3
 800072e:	f3bf 8f6f 	isb	sy
 8000732:	f3bf 8f4f 	dsb	sy
 8000736:	60bb      	str	r3, [r7, #8]
    }
 8000738:	bf00      	nop
 800073a:	e7fe      	b.n	800073a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800073c:	697b      	ldr	r3, [r7, #20]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000ed04 	.word	0xe000ed04

0800074c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	4613      	mov	r3, r2
 8000758:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02e      	beq.n	80007c2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000764:	2100      	movs	r1, #0
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	fba3 2302 	umull	r2, r3, r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <xQueueGenericCreate+0x28>
 8000772:	2101      	movs	r1, #1
 8000774:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000776:	2b00      	cmp	r3, #0
 8000778:	d123      	bne.n	80007c2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000782:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8000786:	d81c      	bhi.n	80007c2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3348      	adds	r3, #72	; 0x48
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fef0 	bl	800257c <pvPortMalloc>
 800079c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01c      	beq.n	80007de <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3348      	adds	r3, #72	; 0x48
 80007ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4613      	mov	r3, r2
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f814 	bl	80007e8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80007c0:	e00d      	b.n	80007de <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10a      	bne.n	80007de <xQueueGenericCreate+0x92>
        __asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	613b      	str	r3, [r7, #16]
    }
 80007da:	bf00      	nop
 80007dc:	e7fe      	b.n	80007dc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007de:	69fb      	ldr	r3, [r7, #28]
    }
 80007e0:	4618      	mov	r0, r3
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e002      	b.n	800080a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000816:	2101      	movs	r1, #1
 8000818:	69b8      	ldr	r0, [r7, #24]
 800081a:	f7ff ff07 	bl	800062c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b092      	sub	sp, #72	; 0x48
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8000838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10a      	bne.n	8000854 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000850:	bf00      	nop
 8000852:	e7fe      	b.n	8000852 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <xQueueGenericSendFromISR+0x3c>
 800085a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <xQueueGenericSendFromISR+0x40>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <xQueueGenericSendFromISR+0x42>
 8000866:	2300      	movs	r3, #0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10a      	bne.n	8000882 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d103      	bne.n	8000890 <xQueueGenericSendFromISR+0x6a>
 8000888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088c:	2b01      	cmp	r3, #1
 800088e:	d101      	bne.n	8000894 <xQueueGenericSendFromISR+0x6e>
 8000890:	2301      	movs	r3, #1
 8000892:	e000      	b.n	8000896 <xQueueGenericSendFromISR+0x70>
 8000894:	2300      	movs	r3, #0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089e:	f383 8811 	msr	BASEPRI, r3
 80008a2:	f3bf 8f6f 	isb	sy
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80008ac:	bf00      	nop
 80008ae:	e7fe      	b.n	80008ae <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80008b0:	f001 fe24 	bl	80024fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80008b4:	f3ef 8211 	mrs	r2, BASEPRI
 80008b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008bc:	f383 8811 	msr	BASEPRI, r3
 80008c0:	f3bf 8f6f 	isb	sy
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	623a      	str	r2, [r7, #32]
 80008ca:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80008cc:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d8:	429a      	cmp	r2, r3
 80008da:	d302      	bcc.n	80008e2 <xQueueGenericSendFromISR+0xbc>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d146      	bne.n	8000970 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80008e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80008f8:	f000 f928 	bl	8000b4c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80008fc:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d112      	bne.n	800092c <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	2b00      	cmp	r3, #0
 800090c:	d02d      	beq.n	800096a <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800090e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000910:	3324      	adds	r3, #36	; 0x24
 8000912:	4618      	mov	r0, r3
 8000914:	f000 feac 	bl	8001670 <xTaskRemoveFromEventList>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d025      	beq.n	800096a <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d022      	beq.n	800096a <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e01e      	b.n	800096a <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800092c:	f000 fcfe 	bl	800132c <uxTaskGetNumberOfTasks>
 8000930:	6338      	str	r0, [r7, #48]	; 0x30
 8000932:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000938:	429a      	cmp	r2, r3
 800093a:	d916      	bls.n	800096a <xQueueGenericSendFromISR+0x144>
 800093c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000940:	2b7f      	cmp	r3, #127	; 0x7f
 8000942:	d10a      	bne.n	800095a <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8000944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000948:	f383 8811 	msr	BASEPRI, r3
 800094c:	f3bf 8f6f 	isb	sy
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	61bb      	str	r3, [r7, #24]
    }
 8000956:	bf00      	nop
 8000958:	e7fe      	b.n	8000958 <xQueueGenericSendFromISR+0x132>
 800095a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800095e:	3301      	adds	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	b25a      	sxtb	r2, r3
 8000964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800096a:	2301      	movs	r3, #1
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
        {
 800096e:	e001      	b.n	8000974 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000970:	2300      	movs	r3, #0
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
 8000974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000976:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800097e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8000982:	4618      	mov	r0, r3
 8000984:	3748      	adds	r7, #72	; 0x48
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10a      	bne.n	80009bc <xQueueReceive+0x30>
        __asm volatile
 80009a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009aa:	f383 8811 	msr	BASEPRI, r3
 80009ae:	f3bf 8f6f 	isb	sy
 80009b2:	f3bf 8f4f 	dsb	sy
 80009b6:	623b      	str	r3, [r7, #32]
    }
 80009b8:	bf00      	nop
 80009ba:	e7fe      	b.n	80009ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <xQueueReceive+0x3e>
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <xQueueReceive+0x42>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <xQueueReceive+0x44>
 80009ce:	2300      	movs	r3, #0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10a      	bne.n	80009ea <xQueueReceive+0x5e>
        __asm volatile
 80009d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d8:	f383 8811 	msr	BASEPRI, r3
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	61fb      	str	r3, [r7, #28]
    }
 80009e6:	bf00      	nop
 80009e8:	e7fe      	b.n	80009e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009ea:	f001 f851 	bl	8001a90 <xTaskGetSchedulerState>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <xQueueReceive+0x6e>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <xQueueReceive+0x72>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <xQueueReceive+0x74>
 80009fe:	2300      	movs	r3, #0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10a      	bne.n	8000a1a <xQueueReceive+0x8e>
        __asm volatile
 8000a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	f3bf 8f6f 	isb	sy
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	61bb      	str	r3, [r7, #24]
    }
 8000a16:	bf00      	nop
 8000a18:	e7fe      	b.n	8000a18 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a1a:	f001 fc8d 	bl	8002338 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d01f      	beq.n	8000a6a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a2a:	68b9      	ldr	r1, [r7, #8]
 8000a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a2e:	f000 f8f7 	bl	8000c20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00f      	beq.n	8000a62 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	3310      	adds	r3, #16
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fe12 	bl	8001670 <xTaskRemoveFromEventList>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a52:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <xQueueReceive+0x1bc>)
 8000a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a62:	f001 fc99 	bl	8002398 <vPortExitCritical>
                return pdPASS;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e069      	b.n	8000b3e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d103      	bne.n	8000a78 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a70:	f001 fc92 	bl	8002398 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e062      	b.n	8000b3e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 feca 	bl	800181c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a8c:	f001 fc84 	bl	8002398 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a90:	f000 fb32 	bl	80010f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a94:	f001 fc50 	bl	8002338 <vPortEnterCritical>
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d103      	bne.n	8000aae <xQueueReceive+0x122>
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d103      	bne.n	8000ac4 <xQueueReceive+0x138>
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ac4:	f001 fc68 	bl	8002398 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ac8:	1d3a      	adds	r2, r7, #4
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 feb9 	bl	8001848 <xTaskCheckForTimeOut>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d123      	bne.n	8000b24 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ade:	f000 f917 	bl	8000d10 <prvIsQueueEmpty>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d017      	beq.n	8000b18 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aea:	3324      	adds	r3, #36	; 0x24
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fd99 	bl	8001628 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000af8:	f000 f8b8 	bl	8000c6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000afc:	f000 fb0a 	bl	8001114 <xTaskResumeAll>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d189      	bne.n	8000a1a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <xQueueReceive+0x1bc>)
 8000b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	f3bf 8f4f 	dsb	sy
 8000b12:	f3bf 8f6f 	isb	sy
 8000b16:	e780      	b.n	8000a1a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b1a:	f000 f8a7 	bl	8000c6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b1e:	f000 faf9 	bl	8001114 <xTaskResumeAll>
 8000b22:	e77a      	b.n	8000a1a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b26:	f000 f8a1 	bl	8000c6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b2a:	f000 faf3 	bl	8001114 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b30:	f000 f8ee 	bl	8000d10 <prvIsQueueEmpty>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f43f af6f 	beq.w	8000a1a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000b3c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000ed04 	.word	0xe000ed04

08000b4c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b60:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10d      	bne.n	8000b86 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d14d      	bne.n	8000c0e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 ffa8 	bl	8001acc <xTaskPriorityDisinherit>
 8000b7c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	e043      	b.n	8000c0e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d119      	bne.n	8000bc0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6858      	ldr	r0, [r3, #4]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	461a      	mov	r2, r3
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	f009 fdc8 	bl	800a72c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	441a      	add	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d32b      	bcc.n	8000c0e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	e026      	b.n	8000c0e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	68d8      	ldr	r0, [r3, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	f009 fdae 	bl	800a72c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	425b      	negs	r3, r3
 8000bda:	441a      	add	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	441a      	add	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d105      	bne.n	8000c0e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000c16:	697b      	ldr	r3, [r7, #20]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d018      	beq.n	8000c64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	441a      	add	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d303      	bcc.n	8000c54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68d9      	ldr	r1, [r3, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	6838      	ldr	r0, [r7, #0]
 8000c60:	f009 fd64 	bl	800a72c <memcpy>
    }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c74:	f001 fb60 	bl	8002338 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c80:	e011      	b.n	8000ca6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d012      	beq.n	8000cb0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3324      	adds	r3, #36	; 0x24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fcee 	bl	8001670 <xTaskRemoveFromEventList>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000c9a:	f000 fe3b 	bl	8001914 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	dce9      	bgt.n	8000c82 <prvUnlockQueue+0x16>
 8000cae:	e000      	b.n	8000cb2 <prvUnlockQueue+0x46>
                    break;
 8000cb0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000cba:	f001 fb6d 	bl	8002398 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000cbe:	f001 fb3b 	bl	8002338 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000cca:	e011      	b.n	8000cf0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d012      	beq.n	8000cfa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3310      	adds	r3, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcc9 	bl	8001670 <xTaskRemoveFromEventList>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ce4:	f000 fe16 	bl	8001914 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dce9      	bgt.n	8000ccc <prvUnlockQueue+0x60>
 8000cf8:	e000      	b.n	8000cfc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000cfa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000d04:	f001 fb48 	bl	8002398 <vPortExitCritical>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000d18:	f001 fb0e 	bl	8002338 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e001      	b.n	8000d2e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000d2e:	f001 fb33 	bl	8002398 <vPortExitCritical>

    return xReturn;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fc13 	bl	800257c <pvPortMalloc>
 8000d56:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d013      	beq.n	8000d86 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d5e:	2054      	movs	r0, #84	; 0x54
 8000d60:	f001 fc0c 	bl	800257c <pvPortMalloc>
 8000d64:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	2100      	movs	r1, #0
 8000d70:	69f8      	ldr	r0, [r7, #28]
 8000d72:	f009 fcaf 	bl	800a6d4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7c:	e005      	b.n	8000d8a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f001 fcb6 	bl	80026f0 <vPortFree>
 8000d84:	e001      	b.n	8000d8a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	2300      	movs	r3, #0
 8000d94:	9303      	str	r3, [sp, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f80e 	bl	8000dc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000dac:	69f8      	ldr	r0, [r7, #28]
 8000dae:	f000 f891 	bl	8000ed4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	e002      	b.n	8000dbe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
    }
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000de0:	3b01      	subs	r3, #1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f023 0307 	bic.w	r3, r3, #7
 8000dee:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	617b      	str	r3, [r7, #20]
    }
 8000e0c:	bf00      	nop
 8000e0e:	e7fe      	b.n	8000e0e <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01e      	beq.n	8000e54 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e012      	b.n	8000e42 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4413      	add	r3, r2
 8000e22:	7819      	ldrb	r1, [r3, #0]
 8000e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	4413      	add	r3, r2
 8000e2a:	3334      	adds	r3, #52	; 0x34
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d9e9      	bls.n	8000e1c <prvInitialiseNewTask+0x54>
 8000e48:	e000      	b.n	8000e4c <prvInitialiseNewTask+0x84>
            {
                break;
 8000e4a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d90a      	bls.n	8000e70 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e5e:	f383 8811 	msr	BASEPRI, r3
 8000e62:	f3bf 8f6f 	isb	sy
 8000e66:	f3bf 8f4f 	dsb	sy
 8000e6a:	613b      	str	r3, [r7, #16]
    }
 8000e6c:	bf00      	nop
 8000e6e:	e7fe      	b.n	8000e6e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d901      	bls.n	8000e7a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e76:	2306      	movs	r3, #6
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e88:	3304      	adds	r3, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb5e 	bl	800054c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e92:	3318      	adds	r3, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb59 	bl	800054c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	f1c3 0207 	rsb	r2, r3, #7
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	69b8      	ldr	r0, [r7, #24]
 8000eb6:	f001 f913 	bl	80020e0 <pxPortInitialiseStack>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000edc:	f001 fa2c 	bl	8002338 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <prvAddNewTaskToReadyList+0x108>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a3d      	ldr	r2, [pc, #244]	; (8000fdc <prvAddNewTaskToReadyList+0x108>)
 8000ee8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <prvAddNewTaskToReadyList+0x108>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d110      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f00:	f000 fd2c 	bl	800195c <prvInitialiseTaskLists>
 8000f04:	e00d      	b.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f06:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <prvAddNewTaskToReadyList+0x110>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d802      	bhi.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f1c:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <prvAddNewTaskToReadyList+0x114>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <prvAddNewTaskToReadyList+0x114>)
 8000f2a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2201      	movs	r2, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <prvAddNewTaskToReadyList+0x118>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <prvAddNewTaskToReadyList+0x118>)
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	492b      	ldr	r1, [pc, #172]	; (8000ff0 <prvAddNewTaskToReadyList+0x11c>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	3204      	adds	r2, #4
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <prvAddNewTaskToReadyList+0x11c>)
 8000f82:	441a      	add	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <prvAddNewTaskToReadyList+0x11c>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1c59      	adds	r1, r3, #1
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <prvAddNewTaskToReadyList+0x11c>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4403      	add	r3, r0
 8000fa8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000faa:	f001 f9f5 	bl	8002398 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <prvAddNewTaskToReadyList+0x110>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <prvAddNewTaskToReadyList+0x120>)
 8000fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000130 	.word	0x20000130
 8000fe0:	20000030 	.word	0x20000030
 8000fe4:	2000013c 	.word	0x2000013c
 8000fe8:	2000014c 	.word	0x2000014c
 8000fec:	20000138 	.word	0x20000138
 8000ff0:	20000034 	.word	0x20000034
 8000ff4:	e000ed04 	.word	0xe000ed04

08000ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d017      	beq.n	800103a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <vTaskDelay+0x60>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <vTaskDelay+0x30>
        __asm volatile
 8001012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001016:	f383 8811 	msr	BASEPRI, r3
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	60bb      	str	r3, [r7, #8]
    }
 8001024:	bf00      	nop
 8001026:	e7fe      	b.n	8001026 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001028:	f000 f866 	bl	80010f8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800102c:	2100      	movs	r1, #0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 ffd6 	bl	8001fe0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001034:	f000 f86e 	bl	8001114 <xTaskResumeAll>
 8001038:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <vTaskDelay+0x64>)
 8001042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000158 	.word	0x20000158
 800105c:	e000ed04 	.word	0xe000ed04

08001060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <vTaskStartScheduler+0x7c>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	491b      	ldr	r1, [pc, #108]	; (80010e0 <vTaskStartScheduler+0x80>)
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <vTaskStartScheduler+0x84>)
 8001076:	f7ff fe61 	bl	8000d3c <xTaskCreate>
 800107a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d116      	bne.n	80010b0 <vTaskStartScheduler+0x50>
        __asm volatile
 8001082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001086:	f383 8811 	msr	BASEPRI, r3
 800108a:	f3bf 8f6f 	isb	sy
 800108e:	f3bf 8f4f 	dsb	sy
 8001092:	60bb      	str	r3, [r7, #8]
    }
 8001094:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <vTaskStartScheduler+0x88>)
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <vTaskStartScheduler+0x8c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <vTaskStartScheduler+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80010aa:	f001 f8a3 	bl	80021f4 <xPortStartScheduler>
 80010ae:	e00e      	b.n	80010ce <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d10a      	bne.n	80010ce <vTaskStartScheduler+0x6e>
        __asm volatile
 80010b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010bc:	f383 8811 	msr	BASEPRI, r3
 80010c0:	f3bf 8f6f 	isb	sy
 80010c4:	f3bf 8f4f 	dsb	sy
 80010c8:	607b      	str	r3, [r7, #4]
    }
 80010ca:	bf00      	nop
 80010cc:	e7fe      	b.n	80010cc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <vTaskStartScheduler+0x94>)
 80010d0:	681b      	ldr	r3, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000154 	.word	0x20000154
 80010e0:	0800a760 	.word	0x0800a760
 80010e4:	0800192d 	.word	0x0800192d
 80010e8:	20000150 	.word	0x20000150
 80010ec:	2000013c 	.word	0x2000013c
 80010f0:	20000134 	.word	0x20000134
 80010f4:	20000000 	.word	0x20000000

080010f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <vTaskSuspendAll+0x18>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a03      	ldr	r2, [pc, #12]	; (8001110 <vTaskSuspendAll+0x18>)
 8001104:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000158 	.word	0x20000158

08001114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001122:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <xTaskResumeAll+0x1d4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <xTaskResumeAll+0x2c>
        __asm volatile
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	607b      	str	r3, [r7, #4]
    }
 800113c:	bf00      	nop
 800113e:	e7fe      	b.n	800113e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001140:	f001 f8fa 	bl	8002338 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <xTaskResumeAll+0x1d4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a67      	ldr	r2, [pc, #412]	; (80012e8 <xTaskResumeAll+0x1d4>)
 800114c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800114e:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <xTaskResumeAll+0x1d4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80c0 	bne.w	80012d8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <xTaskResumeAll+0x1d8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80bb 	beq.w	80012d8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001162:	e08a      	b.n	800127a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001164:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <xTaskResumeAll+0x1dc>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	6a12      	ldr	r2, [r2, #32]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	69d2      	ldr	r2, [r2, #28]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3318      	adds	r3, #24
 800118e:	429a      	cmp	r2, r3
 8001190:	d103      	bne.n	800119a <xTaskResumeAll+0x86>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	68d2      	ldr	r2, [r2, #12]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	6892      	ldr	r2, [r2, #8]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3304      	adds	r3, #4
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d103      	bne.n	80011d8 <xTaskResumeAll+0xc4>
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2201      	movs	r2, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <xTaskResumeAll+0x1e0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <xTaskResumeAll+0x1e0>)
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fe:	493e      	ldr	r1, [pc, #248]	; (80012f8 <xTaskResumeAll+0x1e4>)
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	3204      	adds	r2, #4
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <xTaskResumeAll+0x1e4>)
 800123e:	441a      	add	r2, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001248:	492b      	ldr	r1, [pc, #172]	; (80012f8 <xTaskResumeAll+0x1e4>)
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1c59      	adds	r1, r3, #1
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <xTaskResumeAll+0x1e4>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4403      	add	r3, r0
 8001264:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <xTaskResumeAll+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	429a      	cmp	r2, r3
 8001272:	d302      	bcc.n	800127a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <xTaskResumeAll+0x1ec>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <xTaskResumeAll+0x1dc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f af70 	bne.w	8001164 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800128a:	f000 fbe5 	bl	8001a58 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <xTaskResumeAll+0x1f0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d010      	beq.n	80012bc <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800129a:	f000 f853 	bl	8001344 <xTaskIncrementTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <xTaskResumeAll+0x1ec>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f1      	bne.n	800129a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <xTaskResumeAll+0x1f0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <xTaskResumeAll+0x1ec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <xTaskResumeAll+0x1f4>)
 80012ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80012d8:	f001 f85e 	bl	8002398 <vPortExitCritical>

    return xAlreadyYielded;
 80012dc:	69bb      	ldr	r3, [r7, #24]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000158 	.word	0x20000158
 80012ec:	20000130 	.word	0x20000130
 80012f0:	200000f0 	.word	0x200000f0
 80012f4:	20000138 	.word	0x20000138
 80012f8:	20000034 	.word	0x20000034
 80012fc:	20000030 	.word	0x20000030
 8001300:	20000144 	.word	0x20000144
 8001304:	20000140 	.word	0x20000140
 8001308:	e000ed04 	.word	0xe000ed04

0800130c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <xTaskGetTickCount+0x1c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000134 	.word	0x20000134

0800132c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <uxTaskGetNumberOfTasks+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000130 	.word	0x20000130

08001344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800134e:	4b7d      	ldr	r3, [pc, #500]	; (8001544 <xTaskIncrementTick+0x200>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80ec 	bne.w	8001530 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <xTaskIncrementTick+0x204>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001360:	4a79      	ldr	r2, [pc, #484]	; (8001548 <xTaskIncrementTick+0x204>)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d120      	bne.n	80013ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800136c:	4b77      	ldr	r3, [pc, #476]	; (800154c <xTaskIncrementTick+0x208>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <xTaskIncrementTick+0x48>
        __asm volatile
 8001376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	607b      	str	r3, [r7, #4]
    }
 8001388:	bf00      	nop
 800138a:	e7fe      	b.n	800138a <xTaskIncrementTick+0x46>
 800138c:	4b6f      	ldr	r3, [pc, #444]	; (800154c <xTaskIncrementTick+0x208>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <xTaskIncrementTick+0x20c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6d      	ldr	r2, [pc, #436]	; (800154c <xTaskIncrementTick+0x208>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4a6d      	ldr	r2, [pc, #436]	; (8001550 <xTaskIncrementTick+0x20c>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <xTaskIncrementTick+0x210>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <xTaskIncrementTick+0x210>)
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	f000 fb55 	bl	8001a58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <xTaskIncrementTick+0x214>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f0c0 80a6 	bcc.w	8001506 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <xTaskIncrementTick+0x208>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d104      	bne.n	80013ce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <xTaskIncrementTick+0x214>)
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ca:	601a      	str	r2, [r3, #0]
                    break;
 80013cc:	e09b      	b.n	8001506 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <xTaskIncrementTick+0x208>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80013de:	6a3a      	ldr	r2, [r7, #32]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d203      	bcs.n	80013ee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013e6:	4a5c      	ldr	r2, [pc, #368]	; (8001558 <xTaskIncrementTick+0x214>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80013ec:	e08b      	b.n	8001506 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	68d2      	ldr	r2, [r2, #12]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3304      	adds	r3, #4
 8001410:	429a      	cmp	r2, r3
 8001412:	d103      	bne.n	800141c <xTaskIncrementTick+0xd8>
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01e      	beq.n	8001472 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	6a12      	ldr	r2, [r2, #32]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	69d2      	ldr	r2, [r2, #28]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	3318      	adds	r3, #24
 8001456:	429a      	cmp	r2, r3
 8001458:	d103      	bne.n	8001462 <xTaskIncrementTick+0x11e>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	2201      	movs	r2, #1
 8001478:	409a      	lsls	r2, r3
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <xTaskIncrementTick+0x218>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	4a36      	ldr	r2, [pc, #216]	; (800155c <xTaskIncrementTick+0x218>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001488:	4935      	ldr	r1, [pc, #212]	; (8001560 <xTaskIncrementTick+0x21c>)
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3304      	adds	r3, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	3204      	adds	r2, #4
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1d1a      	adds	r2, r3, #4
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4a26      	ldr	r2, [pc, #152]	; (8001560 <xTaskIncrementTick+0x21c>)
 80014c8:	441a      	add	r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d2:	4923      	ldr	r1, [pc, #140]	; (8001560 <xTaskIncrementTick+0x21c>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1c59      	adds	r1, r3, #1
 80014e2:	481f      	ldr	r0, [pc, #124]	; (8001560 <xTaskIncrementTick+0x21c>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4403      	add	r3, r0
 80014ee:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <xTaskIncrementTick+0x220>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f67f af5d 	bls.w	80013ba <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001504:	e759      	b.n	80013ba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <xTaskIncrementTick+0x220>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150c:	4914      	ldr	r1, [pc, #80]	; (8001560 <xTaskIncrementTick+0x21c>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d901      	bls.n	8001522 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <xTaskIncrementTick+0x224>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800152a:	2301      	movs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e004      	b.n	800153a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <xTaskIncrementTick+0x228>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <xTaskIncrementTick+0x228>)
 8001538:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800153c:	4618      	mov	r0, r3
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000158 	.word	0x20000158
 8001548:	20000134 	.word	0x20000134
 800154c:	200000e8 	.word	0x200000e8
 8001550:	200000ec 	.word	0x200000ec
 8001554:	20000148 	.word	0x20000148
 8001558:	20000150 	.word	0x20000150
 800155c:	20000138 	.word	0x20000138
 8001560:	20000034 	.word	0x20000034
 8001564:	20000030 	.word	0x20000030
 8001568:	20000144 	.word	0x20000144
 800156c:	20000140 	.word	0x20000140

08001570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <vTaskSwitchContext+0xa4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <vTaskSwitchContext+0xa8>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001584:	e03f      	b.n	8001606 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <vTaskSwitchContext+0xa8>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <vTaskSwitchContext+0xac>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	f1c3 031f 	rsb	r3, r3, #31
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	491f      	ldr	r1, [pc, #124]	; (8001620 <vTaskSwitchContext+0xb0>)
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	607b      	str	r3, [r7, #4]
    }
 80015c8:	bf00      	nop
 80015ca:	e7fe      	b.n	80015ca <vTaskSwitchContext+0x5a>
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <vTaskSwitchContext+0xb0>)
 80015d8:	4413      	add	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	3308      	adds	r3, #8
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d104      	bne.n	80015fc <vTaskSwitchContext+0x8c>
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <vTaskSwitchContext+0xb4>)
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000158 	.word	0x20000158
 8001618:	20000144 	.word	0x20000144
 800161c:	20000138 	.word	0x20000138
 8001620:	20000034 	.word	0x20000034
 8001624:	20000030 	.word	0x20000030

08001628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163c:	f383 8811 	msr	BASEPRI, r3
 8001640:	f3bf 8f6f 	isb	sy
 8001644:	f3bf 8f4f 	dsb	sy
 8001648:	60fb      	str	r3, [r7, #12]
    }
 800164a:	bf00      	nop
 800164c:	e7fe      	b.n	800164c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <vTaskPlaceOnEventList+0x44>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3318      	adds	r3, #24
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7fe ff85 	bl	8000566 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800165c:	2101      	movs	r1, #1
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f000 fcbe 	bl	8001fe0 <prvAddCurrentTaskToDelayedList>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000030 	.word	0x20000030

08001670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10a      	bne.n	800169c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168a:	f383 8811 	msr	BASEPRI, r3
 800168e:	f3bf 8f6f 	isb	sy
 8001692:	f3bf 8f4f 	dsb	sy
 8001696:	60fb      	str	r3, [r7, #12]
    }
 8001698:	bf00      	nop
 800169a:	e7fe      	b.n	800169a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	6a3a      	ldr	r2, [r7, #32]
 80016a8:	6a12      	ldr	r2, [r2, #32]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	69d2      	ldr	r2, [r2, #28]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	3318      	adds	r3, #24
 80016be:	429a      	cmp	r2, r3
 80016c0:	d103      	bne.n	80016ca <xTaskRemoveFromEventList+0x5a>
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <xTaskRemoveFromEventList+0x194>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d15e      	bne.n	80017a0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	68d2      	ldr	r2, [r2, #12]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	6a3a      	ldr	r2, [r7, #32]
 80016f8:	6892      	ldr	r2, [r2, #8]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	3304      	adds	r3, #4
 8001704:	429a      	cmp	r2, r3
 8001706:	d103      	bne.n	8001710 <xTaskRemoveFromEventList+0xa0>
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <xTaskRemoveFromEventList+0x198>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	4a36      	ldr	r2, [pc, #216]	; (8001808 <xTaskRemoveFromEventList+0x198>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001736:	4935      	ldr	r1, [pc, #212]	; (800180c <xTaskRemoveFromEventList+0x19c>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	6a3a      	ldr	r2, [r7, #32]
 800175c:	3204      	adds	r2, #4
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	1d1a      	adds	r2, r3, #4
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <xTaskRemoveFromEventList+0x19c>)
 8001776:	441a      	add	r2, r3
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <xTaskRemoveFromEventList+0x19c>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	1c59      	adds	r1, r3, #1
 8001790:	481e      	ldr	r0, [pc, #120]	; (800180c <xTaskRemoveFromEventList+0x19c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4403      	add	r3, r0
 800179c:	6019      	str	r1, [r3, #0]
 800179e:	e01b      	b.n	80017d8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <xTaskRemoveFromEventList+0x1a0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	61da      	str	r2, [r3, #28]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	3218      	adds	r2, #24
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f103 0218 	add.w	r2, r3, #24
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <xTaskRemoveFromEventList+0x1a0>)
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <xTaskRemoveFromEventList+0x1a0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <xTaskRemoveFromEventList+0x1a0>)
 80017d6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <xTaskRemoveFromEventList+0x1a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d905      	bls.n	80017f2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <xTaskRemoveFromEventList+0x1a8>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e001      	b.n	80017f6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	372c      	adds	r7, #44	; 0x2c
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20000158 	.word	0x20000158
 8001808:	20000138 	.word	0x20000138
 800180c:	20000034 	.word	0x20000034
 8001810:	200000f0 	.word	0x200000f0
 8001814:	20000030 	.word	0x20000030
 8001818:	20000144 	.word	0x20000144

0800181c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <vTaskInternalSetTimeOutState+0x24>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <vTaskInternalSetTimeOutState+0x28>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000148 	.word	0x20000148
 8001844:	20000134 	.word	0x20000134

08001848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10a      	bne.n	800186e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	613b      	str	r3, [r7, #16]
    }
 800186a:	bf00      	nop
 800186c:	e7fe      	b.n	800186c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	60fb      	str	r3, [r7, #12]
    }
 8001886:	bf00      	nop
 8001888:	e7fe      	b.n	8001888 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800188a:	f000 fd55 	bl	8002338 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <xTaskCheckForTimeOut+0xc4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d102      	bne.n	80018ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	e026      	b.n	80018fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <xTaskCheckForTimeOut+0xc8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d00a      	beq.n	80018d0 <xTaskCheckForTimeOut+0x88>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d305      	bcc.n	80018d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e015      	b.n	80018fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20b      	bcs.n	80018f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff98 	bl	800181c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e004      	b.n	80018fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80018fc:	f000 fd4c 	bl	8002398 <vPortExitCritical>

    return xReturn;
 8001900:	69fb      	ldr	r3, [r7, #28]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000134 	.word	0x20000134
 8001910:	20000148 	.word	0x20000148

08001914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <vTaskMissedYield+0x14>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000144 	.word	0x20000144

0800192c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001934:	f000 f852 	bl	80019dc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <prvIdleTask+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d9f9      	bls.n	8001934 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <prvIdleTask+0x2c>)
 8001942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001950:	e7f0      	b.n	8001934 <prvIdleTask+0x8>
 8001952:	bf00      	nop
 8001954:	20000034 	.word	0x20000034
 8001958:	e000ed04 	.word	0xe000ed04

0800195c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	e00c      	b.n	8001982 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <prvInitialiseTaskLists+0x60>)
 8001974:	4413      	add	r3, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdc8 	bl	800050c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d9ef      	bls.n	8001968 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <prvInitialiseTaskLists+0x64>)
 800198a:	f7fe fdbf 	bl	800050c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <prvInitialiseTaskLists+0x68>)
 8001990:	f7fe fdbc 	bl	800050c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <prvInitialiseTaskLists+0x6c>)
 8001996:	f7fe fdb9 	bl	800050c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <prvInitialiseTaskLists+0x70>)
 800199c:	f7fe fdb6 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <prvInitialiseTaskLists+0x74>)
 80019a2:	f7fe fdb3 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <prvInitialiseTaskLists+0x78>)
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <prvInitialiseTaskLists+0x64>)
 80019aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <prvInitialiseTaskLists+0x7c>)
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <prvInitialiseTaskLists+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000034 	.word	0x20000034
 80019c0:	200000c0 	.word	0x200000c0
 80019c4:	200000d4 	.word	0x200000d4
 80019c8:	200000f0 	.word	0x200000f0
 80019cc:	20000104 	.word	0x20000104
 80019d0:	2000011c 	.word	0x2000011c
 80019d4:	200000e8 	.word	0x200000e8
 80019d8:	200000ec 	.word	0x200000ec

080019dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019e2:	e019      	b.n	8001a18 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80019e4:	f000 fca8 	bl	8002338 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <prvCheckTasksWaitingTermination+0x50>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdef 	bl	80005d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <prvCheckTasksWaitingTermination+0x54>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <prvCheckTasksWaitingTermination+0x54>)
 8001a02:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a0c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001a0e:	f000 fcc3 	bl	8002398 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f810 	bl	8001a38 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e1      	bne.n	80019e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000104 	.word	0x20000104
 8001a30:	20000130 	.word	0x20000130
 8001a34:	20000118 	.word	0x20000118

08001a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fe53 	bl	80026f0 <vPortFree>
            vPortFree( pxTCB );
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fe50 	bl	80026f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <prvResetNextTaskUnblockTime+0x30>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <prvResetNextTaskUnblockTime+0x34>)
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a6e:	e005      	b.n	8001a7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <prvResetNextTaskUnblockTime+0x30>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <prvResetNextTaskUnblockTime+0x34>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200000e8 	.word	0x200000e8
 8001a8c:	20000150 	.word	0x20000150

08001a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <xTaskGetSchedulerState+0x34>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e008      	b.n	8001ab6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <xTaskGetSchedulerState+0x38>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001aac:	2302      	movs	r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	e001      	b.n	8001ab6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ab6:	687b      	ldr	r3, [r7, #4]
    }
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000013c 	.word	0x2000013c
 8001ac8:	20000158 	.word	0x20000158

08001acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 808c 	beq.w	8001bfc <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001ae4:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <xTaskPriorityDisinherit+0x13c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d00a      	beq.n	8001b04 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8001aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	613b      	str	r3, [r7, #16]
    }
 8001b00:	bf00      	nop
 8001b02:	e7fe      	b.n	8001b02 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8001b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	60fb      	str	r3, [r7, #12]
    }
 8001b1e:	bf00      	nop
 8001b20:	e7fe      	b.n	8001b20 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d061      	beq.n	8001bfc <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d15d      	bne.n	8001bfc <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd47 	bl	80005d8 <uxListRemove>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <xTaskPriorityDisinherit+0x140>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4013      	ands	r3, r2
 8001b62:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <xTaskPriorityDisinherit+0x140>)
 8001b64:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f1c3 0207 	rsb	r2, r3, #7
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	2201      	movs	r2, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <xTaskPriorityDisinherit+0x140>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <xTaskPriorityDisinherit+0x140>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	491f      	ldr	r1, [pc, #124]	; (8001c10 <xTaskPriorityDisinherit+0x144>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	3204      	adds	r2, #4
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <xTaskPriorityDisinherit+0x144>)
 8001bd0:	441a      	add	r2, r3
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	490d      	ldr	r1, [pc, #52]	; (8001c10 <xTaskPriorityDisinherit+0x144>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c59      	adds	r1, r3, #1
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <xTaskPriorityDisinherit+0x144>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4403      	add	r3, r0
 8001bf6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000030 	.word	0x20000030
 8001c0c:	20000138 	.word	0x20000138
 8001c10:	20000034 	.word	0x20000034

08001c14 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	613b      	str	r3, [r7, #16]
    }
 8001c3a:	bf00      	nop
 8001c3c:	e7fe      	b.n	8001c3c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001c3e:	f000 fb7b 	bl	8002338 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3350      	adds	r3, #80	; 0x50
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d024      	beq.n	8001c9e <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3312      	adds	r3, #18
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4019      	ands	r1, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3312      	adds	r3, #18
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3350      	adds	r3, #80	; 0x50
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c86:	2101      	movs	r1, #1
 8001c88:	6a38      	ldr	r0, [r7, #32]
 8001c8a:	f000 f9a9 	bl	8001fe0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <xTaskGenericNotifyWait+0x104>)
 8001c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c9e:	f000 fb7b 	bl	8002398 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001ca2:	f000 fb49 	bl	8002338 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3312      	adds	r3, #18
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3350      	adds	r3, #80	; 0x50
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d002      	beq.n	8001cd6 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e010      	b.n	8001cf8 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3312      	adds	r3, #18
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3312      	adds	r3, #18
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <xTaskGenericNotifyWait+0x100>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3350      	adds	r3, #80	; 0x50
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001d06:	f000 fb47 	bl	8002398 <vPortExitCritical>

        return xReturn;
 8001d0a:	697b      	ldr	r3, [r7, #20]
    }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000030 	.word	0x20000030
 8001d18:	e000ed04 	.word	0xe000ed04

08001d1c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b092      	sub	sp, #72	; 0x48
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d66:	f000 fbc9 	bl	80024fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8001d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8001d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	623a      	str	r2, [r7, #32]
 8001d84:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8001d86:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8001d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3312      	adds	r3, #18
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	3350      	adds	r3, #80	; 0x50
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d841      	bhi.n	8001e44 <xTaskGenericNotifyFromISR+0x128>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <xTaskGenericNotifyFromISR+0xac>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001dfb 	.word	0x08001dfb
 8001dd4:	08001e17 	.word	0x08001e17
 8001dd8:	08001e27 	.word	0x08001e27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3312      	adds	r3, #18
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3312      	adds	r3, #18
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	605a      	str	r2, [r3, #4]
                    break;
 8001df8:	e036      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3312      	adds	r3, #18
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3312      	adds	r3, #18
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	605a      	str	r2, [r3, #4]
                    break;
 8001e14:	e028      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3312      	adds	r3, #18
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]
                    break;
 8001e24:	e020      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001e26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d007      	beq.n	8001e3e <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3312      	adds	r3, #18
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001e3c:	e014      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8001e42:	e011      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <xTaskGenericNotifyFromISR+0x2a8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00c      	beq.n	8001e66 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8001e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e50:	f383 8811 	msr	BASEPRI, r3
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	61bb      	str	r3, [r7, #24]
    }
 8001e5e:	bf00      	nop
 8001e60:	e7fe      	b.n	8001e60 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8001e62:	bf00      	nop
 8001e64:	e000      	b.n	8001e68 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8001e66:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001e68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 809e 	bne.w	8001fae <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	617b      	str	r3, [r7, #20]
    }
 8001e8c:	bf00      	nop
 8001e8e:	e7fe      	b.n	8001e8e <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <xTaskGenericNotifyFromISR+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d15e      	bne.n	8001f56 <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eae:	6892      	ldr	r2, [r2, #8]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb8:	3304      	adds	r3, #4
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d103      	bne.n	8001ec6 <xTaskGenericNotifyFromISR+0x1aa>
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	2201      	movs	r2, #1
 8001edc:	409a      	lsls	r2, r3
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <xTaskGenericNotifyFromISR+0x2b0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <xTaskGenericNotifyFromISR+0x2b0>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	4938      	ldr	r1, [pc, #224]	; (8001fd0 <xTaskGenericNotifyFromISR+0x2b4>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f12:	3204      	adds	r2, #4
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f18:	1d1a      	adds	r2, r3, #4
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <xTaskGenericNotifyFromISR+0x2b4>)
 8001f2c:	441a      	add	r2, r3
 8001f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f36:	4926      	ldr	r1, [pc, #152]	; (8001fd0 <xTaskGenericNotifyFromISR+0x2b4>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	4822      	ldr	r0, [pc, #136]	; (8001fd0 <xTaskGenericNotifyFromISR+0x2b4>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4403      	add	r3, r0
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	e01b      	b.n	8001f8e <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <xTaskGenericNotifyFromISR+0x2b8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f60:	61da      	str	r2, [r3, #28]
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f68:	621a      	str	r2, [r3, #32]
 8001f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f70:	3218      	adds	r2, #24
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f76:	f103 0218 	add.w	r2, r3, #24
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <xTaskGenericNotifyFromISR+0x2b8>)
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <xTaskGenericNotifyFromISR+0x2b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <xTaskGenericNotifyFromISR+0x2b8>)
 8001f8c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <xTaskGenericNotifyFromISR+0x2bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d908      	bls.n	8001fae <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <xTaskGenericNotifyFromISR+0x2c0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb0:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f383 8811 	msr	BASEPRI, r3
    }
 8001fb8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3748      	adds	r7, #72	; 0x48
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000134 	.word	0x20000134
 8001fc8:	20000158 	.word	0x20000158
 8001fcc:	20000138 	.word	0x20000138
 8001fd0:	20000034 	.word	0x20000034
 8001fd4:	200000f0 	.word	0x200000f0
 8001fd8:	20000030 	.word	0x20000030
 8001fdc:	20000144 	.word	0x20000144

08001fe0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe faee 	bl	80005d8 <uxListRemove>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <prvAddCurrentTaskToDelayedList+0xec>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4013      	ands	r3, r2
 8002016:	4a2d      	ldr	r2, [pc, #180]	; (80020cc <prvAddCurrentTaskToDelayedList+0xec>)
 8002018:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d124      	bne.n	800206c <prvAddCurrentTaskToDelayedList+0x8c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d021      	beq.n	800206c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	6892      	ldr	r2, [r2, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	3204      	adds	r2, #4
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1d1a      	adds	r2, r3, #4
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800206a:	e026      	b.n	80020ba <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d209      	bcs.n	8002098 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3304      	adds	r3, #4
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f7fe fa68 	bl	8000566 <vListInsert>
}
 8002096:	e010      	b.n	80020ba <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3304      	adds	r3, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7fe fa5e 	bl	8000566 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <prvAddCurrentTaskToDelayedList+0xfc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d202      	bcs.n	80020ba <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80020b4:	4a09      	ldr	r2, [pc, #36]	; (80020dc <prvAddCurrentTaskToDelayedList+0xfc>)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000134 	.word	0x20000134
 80020c8:	20000030 	.word	0x20000030
 80020cc:	20000138 	.word	0x20000138
 80020d0:	2000011c 	.word	0x2000011c
 80020d4:	200000ec 	.word	0x200000ec
 80020d8:	200000e8 	.word	0x200000e8
 80020dc:	20000150 	.word	0x20000150

080020e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b04      	subs	r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3b04      	subs	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f023 0201 	bic.w	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3b04      	subs	r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <pxPortInitialiseStack+0x64>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3b14      	subs	r3, #20
 800211a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b04      	subs	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f06f 0202 	mvn.w	r2, #2
 800212e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3b20      	subs	r3, #32
 8002134:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	08002149 	.word	0x08002149

08002148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <prvTaskExitError+0x54>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d00a      	beq.n	8002172 <prvTaskExitError+0x2a>
        __asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	60fb      	str	r3, [r7, #12]
    }
 800216e:	bf00      	nop
 8002170:	e7fe      	b.n	8002170 <prvTaskExitError+0x28>
        __asm volatile
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	60bb      	str	r3, [r7, #8]
    }
 8002184:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002186:	bf00      	nop
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0fc      	beq.n	8002188 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	20000004 	.word	0x20000004

080021a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <pxCurrentTCBConst2>)
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	6808      	ldr	r0, [r1, #0]
 80021a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021aa:	f380 8809 	msr	PSP, r0
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f380 8811 	msr	BASEPRI, r0
 80021ba:	4770      	bx	lr
 80021bc:	f3af 8000 	nop.w

080021c0 <pxCurrentTCBConst2>:
 80021c0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop

080021c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <prvPortStartFirstTask+0x24>)
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	6800      	ldr	r0, [r0, #0]
 80021ce:	f380 8808 	msr	MSP, r0
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f380 8814 	msr	CONTROL, r0
 80021da:	b662      	cpsie	i
 80021dc:	b661      	cpsie	f
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	df00      	svc	0
 80021e8:	bf00      	nop
 80021ea:	0000      	.short	0x0000
 80021ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop

080021f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <xPortStartScheduler+0x120>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <xPortStartScheduler+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d10a      	bne.n	800221a <xPortStartScheduler+0x26>
        __asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	613b      	str	r3, [r7, #16]
    }
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <xPortStartScheduler+0x120>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <xPortStartScheduler+0x128>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10a      	bne.n	800223a <xPortStartScheduler+0x46>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	60fb      	str	r3, [r7, #12]
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <xPortStartScheduler+0x12c>)
 800223c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	22ff      	movs	r2, #255	; 0xff
 800224a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <xPortStartScheduler+0x130>)
 8002260:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <xPortStartScheduler+0x134>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002268:	e009      	b.n	800227e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <xPortStartScheduler+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	4a2d      	ldr	r2, [pc, #180]	; (8002328 <xPortStartScheduler+0x134>)
 8002272:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	d0ef      	beq.n	800226a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <xPortStartScheduler+0x134>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	d00a      	beq.n	80022ac <xPortStartScheduler+0xb8>
        __asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	60bb      	str	r3, [r7, #8]
    }
 80022a8:	bf00      	nop
 80022aa:	e7fe      	b.n	80022aa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <xPortStartScheduler+0x134>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <xPortStartScheduler+0x134>)
 80022b4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <xPortStartScheduler+0x134>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <xPortStartScheduler+0x134>)
 80022c0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <xPortStartScheduler+0x138>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <xPortStartScheduler+0x138>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <xPortStartScheduler+0x138>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <xPortStartScheduler+0x138>)
 80022dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80022e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80022e2:	f000 f8db 	bl	800249c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <xPortStartScheduler+0x13c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80022ec:	f000 f8fa 	bl	80024e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <xPortStartScheduler+0x140>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <xPortStartScheduler+0x140>)
 80022f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80022fc:	f7ff ff64 	bl	80021c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002300:	f7ff f936 	bl	8001570 <vTaskSwitchContext>
    prvTaskExitError();
 8002304:	f7ff ff20 	bl	8002148 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	410fc271 	.word	0x410fc271
 800231c:	410fc270 	.word	0x410fc270
 8002320:	e000e400 	.word	0xe000e400
 8002324:	2000015c 	.word	0x2000015c
 8002328:	20000160 	.word	0x20000160
 800232c:	e000ed20 	.word	0xe000ed20
 8002330:	20000004 	.word	0x20000004
 8002334:	e000ef34 	.word	0xe000ef34

08002338 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
        __asm volatile
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	607b      	str	r3, [r7, #4]
    }
 8002350:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <vPortEnterCritical+0x58>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <vPortEnterCritical+0x58>)
 800235a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <vPortEnterCritical+0x58>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10f      	bne.n	8002384 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <vPortEnterCritical+0x5c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <vPortEnterCritical+0x4c>
        __asm volatile
 800236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	603b      	str	r3, [r7, #0]
    }
 8002380:	bf00      	nop
 8002382:	e7fe      	b.n	8002382 <vPortEnterCritical+0x4a>
    }
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	20000004 	.word	0x20000004
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <vPortExitCritical+0x50>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <vPortExitCritical+0x24>
        __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	607b      	str	r3, [r7, #4]
    }
 80023b8:	bf00      	nop
 80023ba:	e7fe      	b.n	80023ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <vPortExitCritical+0x50>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <vPortExitCritical+0x50>)
 80023c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <vPortExitCritical+0x50>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <vPortExitCritical+0x42>
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f383 8811 	msr	BASEPRI, r3
    }
 80023d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000004 	.word	0x20000004
 80023ec:	00000000 	.word	0x00000000

080023f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80023f0:	f3ef 8009 	mrs	r0, PSP
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <pxCurrentTCBConst>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f01e 0f10 	tst.w	lr, #16
 8002400:	bf08      	it	eq
 8002402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240a:	6010      	str	r0, [r2, #0]
 800240c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002414:	f380 8811 	msr	BASEPRI, r0
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f7ff f8a6 	bl	8001570 <vTaskSwitchContext>
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	f380 8811 	msr	BASEPRI, r0
 800242c:	bc09      	pop	{r0, r3}
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	6808      	ldr	r0, [r1, #0]
 8002432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002436:	f01e 0f10 	tst.w	lr, #16
 800243a:	bf08      	it	eq
 800243c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002440:	f380 8809 	msr	PSP, r0
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	f3af 8000 	nop.w

08002450 <pxCurrentTCBConst>:
 8002450:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop

08002458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	607b      	str	r3, [r7, #4]
    }
 8002470:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002472:	f7fe ff67 	bl	8001344 <xTaskIncrementTick>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SysTick_Handler+0x40>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f383 8811 	msr	BASEPRI, r3
    }
 800248e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	e000ed04 	.word	0xe000ed04

0800249c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <vPortSetupTimerInterrupt+0x34>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <vPortSetupTimerInterrupt+0x38>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <vPortSetupTimerInterrupt+0x3c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <vPortSetupTimerInterrupt+0x40>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <vPortSetupTimerInterrupt+0x44>)
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <vPortSetupTimerInterrupt+0x34>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010
 80024d4:	e000e018 	.word	0xe000e018
 80024d8:	20000008 	.word	0x20000008
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	e000e014 	.word	0xe000e014

080024e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80024e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80024f4 <vPortEnableVFP+0x10>
 80024e8:	6801      	ldr	r1, [r0, #0]
 80024ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80024ee:	6001      	str	r1, [r0, #0]
 80024f0:	4770      	bx	lr
 80024f2:	0000      	.short	0x0000
 80024f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop

080024fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002502:	f3ef 8305 	mrs	r3, IPSR
 8002506:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	d914      	bls.n	8002538 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <vPortValidateInterruptPriority+0x70>)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <vPortValidateInterruptPriority+0x74>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	7afa      	ldrb	r2, [r7, #11]
 800251e:	429a      	cmp	r2, r3
 8002520:	d20a      	bcs.n	8002538 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	607b      	str	r3, [r7, #4]
    }
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <vPortValidateInterruptPriority+0x78>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <vPortValidateInterruptPriority+0x7c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d90a      	bls.n	800255e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	603b      	str	r3, [r7, #0]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <vPortValidateInterruptPriority+0x60>
    }
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e3f0 	.word	0xe000e3f0
 8002570:	2000015c 	.word	0x2000015c
 8002574:	e000ed0c 	.word	0xe000ed0c
 8002578:	20000160 	.word	0x20000160

0800257c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002588:	f7fe fdb6 	bl	80010f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <pvPortMalloc+0x160>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002594:	f000 f908 	bl	80027a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d012      	beq.n	80025c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800259e:	2208      	movs	r2, #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	3308      	adds	r3, #8
 80025aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d804      	bhi.n	80025c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	e001      	b.n	80025c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db70      	blt.n	80026ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d06d      	beq.n	80026ac <pvPortMalloc+0x130>
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <pvPortMalloc+0x164>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d868      	bhi.n	80026ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <pvPortMalloc+0x168>)
 80025dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <pvPortMalloc+0x168>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025e4:	e004      	b.n	80025f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d903      	bls.n	8002602 <pvPortMalloc+0x86>
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f1      	bne.n	80025e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <pvPortMalloc+0x160>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	429a      	cmp	r2, r3
 800260a:	d04f      	beq.n	80026ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2208      	movs	r2, #8
 8002612:	4413      	add	r3, r2
 8002614:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad2      	subs	r2, r2, r3
 8002626:	2308      	movs	r3, #8
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	429a      	cmp	r2, r3
 800262c:	d91f      	bls.n	800266e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <pvPortMalloc+0xda>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f000 f8f9 	bl	8002860 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <pvPortMalloc+0x164>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <pvPortMalloc+0x164>)
 800267a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <pvPortMalloc+0x164>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <pvPortMalloc+0x16c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d203      	bcs.n	8002690 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <pvPortMalloc+0x164>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <pvPortMalloc+0x16c>)
 800268e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <pvPortMalloc+0x170>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a10      	ldr	r2, [pc, #64]	; (80026ec <pvPortMalloc+0x170>)
 80026aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80026ac:	f7fe fd32 	bl	8001114 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <pvPortMalloc+0x154>
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	60fb      	str	r3, [r7, #12]
    }
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <pvPortMalloc+0x152>
    return pvReturn;
 80026d0:	69fb      	ldr	r3, [r7, #28]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000d24 	.word	0x20000d24
 80026e0:	20000d28 	.word	0x20000d28
 80026e4:	20000d1c 	.word	0x20000d1c
 80026e8:	20000d2c 	.word	0x20000d2c
 80026ec:	20000d30 	.word	0x20000d30

080026f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d049      	beq.n	8002796 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002702:	2308      	movs	r3, #8
 8002704:	425b      	negs	r3, r3
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4413      	add	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <vPortFree+0x3e>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	60fb      	str	r3, [r7, #12]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <vPortFree+0x5c>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	60bb      	str	r3, [r7, #8]
    }
 8002748:	bf00      	nop
 800274a:	e7fe      	b.n	800274a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0fdb      	lsrs	r3, r3, #31
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d118      	bne.n	8002796 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002770:	f7fe fcc2 	bl	80010f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <vPortFree+0xb0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4413      	add	r3, r2
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <vPortFree+0xb0>)
 8002780:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002782:	6938      	ldr	r0, [r7, #16]
 8002784:	f000 f86c 	bl	8002860 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <vPortFree+0xb4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <vPortFree+0xb4>)
 8002790:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002792:	f7fe fcbf 	bl	8001114 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000d28 	.word	0x20000d28
 80027a4:	20000d34 	.word	0x20000d34

080027a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80027b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <prvHeapInit+0xa4>)
 80027b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3307      	adds	r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <prvHeapInit+0xa4>)
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <prvHeapInit+0xa8>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <prvHeapInit+0xa8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4413      	add	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80027f4:	2208      	movs	r2, #8
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <prvHeapInit+0xac>)
 8002808:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <prvHeapInit+0xac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <prvHeapInit+0xac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <prvHeapInit+0xac>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a08      	ldr	r2, [pc, #32]	; (8002858 <prvHeapInit+0xb0>)
 8002836:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <prvHeapInit+0xb4>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	20000164 	.word	0x20000164
 8002850:	20000d1c 	.word	0x20000d1c
 8002854:	20000d24 	.word	0x20000d24
 8002858:	20000d2c 	.word	0x20000d2c
 800285c:	20000d28 	.word	0x20000d28

08002860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <prvInsertBlockIntoFreeList+0xac>)
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e002      	b.n	8002874 <prvInsertBlockIntoFreeList+0x14>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d8f7      	bhi.n	800286e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4413      	add	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d108      	bne.n	80028a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	441a      	add	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	441a      	add	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d118      	bne.n	80028e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <prvInsertBlockIntoFreeList+0xb0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d00d      	beq.n	80028de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	441a      	add	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e008      	b.n	80028f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <prvInsertBlockIntoFreeList+0xb0>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e003      	b.n	80028f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d002      	beq.n	80028fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000d1c 	.word	0x20000d1c
 8002910:	20000d24 	.word	0x20000d24

08002914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800291a:	f001 fbc0 	bl	800409e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800291e:	f000 f86f 	bl	8002a00 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002922:	f000 f8cb 	bl	8002abc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002926:	f000 fc1d 	bl	8003164 <MX_GPIO_Init>
  MX_ADC1_Init();
 800292a:	f000 f8f7 	bl	8002b1c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800292e:	f000 f959 	bl	8002be4 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8002932:	f000 f98f 	bl	8002c54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002936:	f000 f9cb 	bl	8002cd0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800293a:	f000 fa07 	bl	8002d4c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800293e:	f000 fa5b 	bl	8002df8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002942:	f000 fa97 	bl	8002e74 <MX_SPI3_Init>
  MX_UART4_Init();
 8002946:	f000 fad3 	bl	8002ef0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800294a:	f000 fb1d 	bl	8002f88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800294e:	f000 fb67 	bl	8003020 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002952:	f000 fbb3 	bl	80030bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002956:	f000 fbfd 	bl	8003154 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 800295a:	f000 fd55 	bl	8003408 <MyLED2_init>
 MyButton_init();
 800295e:	f000 fd85 	bl	800346c <MyButton_init>
 MyUART1_init();
 8002962:	f000 fdcb 	bl	80034fc <MyUART1_init>
 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <main+0xc0>)
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2303      	movs	r3, #3
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002972:	22c8      	movs	r2, #200	; 0xc8
 8002974:	4918      	ldr	r1, [pc, #96]	; (80029d8 <main+0xc4>)
 8002976:	4819      	ldr	r0, [pc, #100]	; (80029dc <main+0xc8>)
 8002978:	f7fe f9e0 	bl	8000d3c <xTaskCreate>
 800297c:	6078      	str	r0, [r7, #4]
 if(flag!=pdPASS)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <main+0x74>
 {
	 Error_Handler();
 8002984:	f000 fefa 	bl	800377c <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8002988:	f7fe fcc0 	bl	800130c <xTaskGetTickCount>
 800298c:	4603      	mov	r3, r0
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <main+0xcc>)
 8002990:	6013      	str	r3, [r2, #0]

 flag_uart = xTaskCreate(UART_SendMsg, "UART_SendMsg", 200, "\rS\n Send SOS with LEDs!!! Please enter 1,2 or 3 for number of repeats:", 3, &pUART_SendMsg);
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <main+0xd0>)
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2303      	movs	r3, #3
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <main+0xd4>)
 800299c:	22c8      	movs	r2, #200	; 0xc8
 800299e:	4913      	ldr	r1, [pc, #76]	; (80029ec <main+0xd8>)
 80029a0:	4813      	ldr	r0, [pc, #76]	; (80029f0 <main+0xdc>)
 80029a2:	f7fe f9cb 	bl	8000d3c <xTaskCreate>
 80029a6:	6038      	str	r0, [r7, #0]
 if(flag_uart!=pdPASS)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <main+0x9e>
 {
	 Error_Handler();
 80029ae:	f000 fee5 	bl	800377c <Error_Handler>
 }

 HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);
 80029b2:	2201      	movs	r2, #1
 80029b4:	490f      	ldr	r1, [pc, #60]	; (80029f4 <main+0xe0>)
 80029b6:	4810      	ldr	r0, [pc, #64]	; (80029f8 <main+0xe4>)
 80029b8:	f005 fe3c 	bl	8008634 <HAL_UART_Receive_IT>
 pUARTQueue = xQueueCreate(10, sizeof(uint8_t));
 80029bc:	2200      	movs	r2, #0
 80029be:	2101      	movs	r1, #1
 80029c0:	200a      	movs	r0, #10
 80029c2:	f7fd fec3 	bl	800074c <xQueueGenericCreate>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <main+0xe8>)
 80029ca:	6013      	str	r3, [r2, #0]
 //start Scheduler
 vTaskStartScheduler();
 80029cc:	f7fe fb48 	bl	8001060 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <main+0xbc>
 80029d2:	bf00      	nop
 80029d4:	20000d38 	.word	0x20000d38
 80029d8:	0800a768 	.word	0x0800a768
 80029dc:	080035bd 	.word	0x080035bd
 80029e0:	20000d3c 	.word	0x20000d3c
 80029e4:	20000d40 	.word	0x20000d40
 80029e8:	0800a778 	.word	0x0800a778
 80029ec:	0800a7c0 	.word	0x0800a7c0
 80029f0:	080036ed 	.word	0x080036ed
 80029f4:	20000d4c 	.word	0x20000d4c
 80029f8:	20001044 	.word	0x20001044
 80029fc:	20000d48 	.word	0x20000d48

08002a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b096      	sub	sp, #88	; 0x58
 8002a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	2244      	movs	r2, #68	; 0x44
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f007 fe60 	bl	800a6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a14:	463b      	mov	r3, r7
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a26:	f003 fcf9 	bl	800641c <HAL_PWREx_ControlVoltageScaling>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a30:	f000 fea4 	bl	800377c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a34:	f003 fcc2 	bl	80063bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <SystemClock_Config+0xb8>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <SystemClock_Config+0xb8>)
 8002a40:	f023 0318 	bic.w	r3, r3, #24
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002a48:	2316      	movs	r3, #22
 8002a4a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a56:	2340      	movs	r3, #64	; 0x40
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a62:	2360      	movs	r3, #96	; 0x60
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fd78 	bl	8006564 <HAL_RCC_OscConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002a7a:	f000 fe7f 	bl	800377c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7e:	230f      	movs	r3, #15
 8002a80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a82:	2301      	movs	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a8a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002a90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 f97c 	bl	8006d98 <HAL_RCC_ClockConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002aa6:	f000 fe69 	bl	800377c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002aaa:	f004 ff95 	bl	80079d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002aae:	bf00      	nop
 8002ab0:	3758      	adds	r7, #88	; 0x58
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0a6      	sub	sp, #152	; 0x98
 8002ac0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2294      	movs	r2, #148	; 0x94
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f007 fe03 	bl	800a6d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8002ace:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ad2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ad4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002adc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002aea:	2318      	movs	r3, #24
 8002aec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002aee:	2302      	movs	r3, #2
 8002af0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002af6:	2302      	movs	r3, #2
 8002af8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002afa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8002afe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fc38 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002b0e:	f000 fe35 	bl	800377c <Error_Handler>
  }
}
 8002b12:	bf00      	nop
 8002b14:	3798      	adds	r7, #152	; 0x98
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b22:	463b      	mov	r3, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <MX_ADC1_Init+0xc0>)
 8002b36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b52:	2204      	movs	r2, #4
 8002b54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b92:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002b94:	f001 fc5c 	bl	8004450 <HAL_ADC_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002b9e:	f000 fded 	bl	800377c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_ADC1_Init+0xc4>)
 8002ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bae:	237f      	movs	r3, #127	; 0x7f
 8002bb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <MX_ADC1_Init+0xbc>)
 8002bc0:	f001 fd8c 	bl	80046dc <HAL_ADC_ConfigChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002bca:	f000 fdd7 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000d50 	.word	0x20000d50
 8002bdc:	50040000 	.word	0x50040000
 8002be0:	04300002 	.word	0x04300002

08002be4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <MX_DFSDM1_Init+0x6c>)
 8002bec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_DFSDM1_Init+0x68>)
 8002c38:	f002 fa2e 	bl	8005098 <HAL_DFSDM_ChannelInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8002c42:	f000 fd9b 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000db8 	.word	0x20000db8
 8002c50:	40016040 	.word	0x40016040

08002c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <MX_I2C1_Init+0x78>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c60:	f640 6214 	movw	r2, #3604	; 0xe14
 8002c64:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002c92:	f002 fd8b 	bl	80057ac <HAL_I2C_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c9c:	f000 fd6e 	bl	800377c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4809      	ldr	r0, [pc, #36]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002ca4:	f002 fe1d 	bl	80058e2 <HAL_I2CEx_ConfigAnalogFilter>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002cae:	f000 fd65 	bl	800377c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_I2C1_Init+0x74>)
 8002cb6:	f002 fe5f 	bl	8005978 <HAL_I2CEx_ConfigDigitalFilter>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002cc0:	f000 fd5c 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000df0 	.word	0x20000df0
 8002ccc:	40005400 	.word	0x40005400

08002cd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <MX_I2C2_Init+0x78>)
 8002cd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cdc:	f640 6214 	movw	r2, #3604	; 0xe14
 8002ce0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002d0e:	f002 fd4d 	bl	80057ac <HAL_I2C_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d18:	f000 fd30 	bl	800377c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4809      	ldr	r0, [pc, #36]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002d20:	f002 fddf 	bl	80058e2 <HAL_I2CEx_ConfigAnalogFilter>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002d2a:	f000 fd27 	bl	800377c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4804      	ldr	r0, [pc, #16]	; (8002d44 <MX_I2C2_Init+0x74>)
 8002d32:	f002 fe21 	bl	8005978 <HAL_I2CEx_ConfigDigitalFilter>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002d3c:	f000 fd1e 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000e44 	.word	0x20000e44
 8002d48:	40005800 	.word	0x40005800

08002d4c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <MX_OCTOSPI1_Init+0xa8>)
 8002d64:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d78:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002dac:	2208      	movs	r2, #8
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002db2:	f002 fe2d 	bl	8005a10 <HAL_OSPI_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002dbc:	f000 fcde 	bl	800377c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002dc8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002dcc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4806      	ldr	r0, [pc, #24]	; (8002df0 <MX_OCTOSPI1_Init+0xa4>)
 8002dd8:	f002 fed4 	bl	8005b84 <HAL_OSPIM_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8002de2:	f000 fccb 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000e98 	.word	0x20000e98
 8002df4:	a0001000 	.word	0xa0001000

08002df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <MX_SPI1_Init+0x78>)
 8002e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e2e:	2208      	movs	r2, #8
 8002e30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e46:	2207      	movs	r2, #7
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e52:	2208      	movs	r2, #8
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_SPI1_Init+0x74>)
 8002e58:	f004 ffb6 	bl	8007dc8 <HAL_SPI_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e62:	f000 fc8b 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000ee8 	.word	0x20000ee8
 8002e70:	40013000 	.word	0x40013000

08002e74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <MX_SPI3_Init+0x78>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002eaa:	2208      	movs	r2, #8
 8002eac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ece:	2208      	movs	r2, #8
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_SPI3_Init+0x74>)
 8002ed4:	f004 ff78 	bl	8007dc8 <HAL_SPI_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002ede:	f000 fc4d 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000f4c 	.word	0x20000f4c
 8002eec:	40003c00 	.word	0x40003c00

08002ef0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <MX_UART4_Init+0x90>)
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <MX_UART4_Init+0x94>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <MX_UART4_Init+0x90>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f3a:	f005 fa9b 	bl	8008474 <HAL_UART_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002f44:	f000 fc1a 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f4c:	f007 faf7 	bl	800a53e <HAL_UARTEx_SetTxFifoThreshold>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002f56:	f000 fc11 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4808      	ldr	r0, [pc, #32]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f5e:	f007 fb2c 	bl	800a5ba <HAL_UARTEx_SetRxFifoThreshold>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002f68:	f000 fc08 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f6c:	4804      	ldr	r0, [pc, #16]	; (8002f80 <MX_UART4_Init+0x90>)
 8002f6e:	f007 faad 	bl	800a4cc <HAL_UARTEx_DisableFifoMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002f78:	f000 fc00 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000fb0 	.word	0x20000fb0
 8002f84:	40004c00 	.word	0x40004c00

08002f88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002f8e:	4a23      	ldr	r2, [pc, #140]	; (800301c <MX_USART1_UART_Init+0x94>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fd0:	4811      	ldr	r0, [pc, #68]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fd2:	f005 fa4f 	bl	8008474 <HAL_UART_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fdc:	f000 fbce 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002fe4:	f007 faab 	bl	800a53e <HAL_UARTEx_SetTxFifoThreshold>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fee:	f000 fbc5 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4808      	ldr	r0, [pc, #32]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8002ff6:	f007 fae0 	bl	800a5ba <HAL_UARTEx_SetRxFifoThreshold>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003000:	f000 fbbc 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003004:	4804      	ldr	r0, [pc, #16]	; (8003018 <MX_USART1_UART_Init+0x90>)
 8003006:	f007 fa61 	bl	800a4cc <HAL_UARTEx_DisableFifoMode>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003010:	f000 fbb4 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20001044 	.word	0x20001044
 800301c:	40013800 	.word	0x40013800

08003020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003026:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <MX_USART2_UART_Init+0x98>)
 8003028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800302c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003046:	220c      	movs	r2, #12
 8003048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800304c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003050:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003066:	2200      	movs	r2, #0
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800306a:	4812      	ldr	r0, [pc, #72]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800306c:	f005 fa02 	bl	8008474 <HAL_UART_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003076:	f000 fb81 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800307a:	2100      	movs	r1, #0
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 800307e:	f007 fa5e 	bl	800a53e <HAL_UARTEx_SetTxFifoThreshold>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003088:	f000 fb78 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800308c:	2100      	movs	r1, #0
 800308e:	4809      	ldr	r0, [pc, #36]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 8003090:	f007 fa93 	bl	800a5ba <HAL_UARTEx_SetRxFifoThreshold>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800309a:	f000 fb6f 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <MX_USART2_UART_Init+0x94>)
 80030a0:	f007 fa14 	bl	800a4cc <HAL_UARTEx_DisableFifoMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80030aa:	f000 fb67 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200010d8 	.word	0x200010d8
 80030b8:	40004400 	.word	0x40004400

080030bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <MX_USART3_UART_Init+0x94>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <MX_USART3_UART_Init+0x90>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <MX_USART3_UART_Init+0x90>)
 8003100:	2200      	movs	r2, #0
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003104:	4811      	ldr	r0, [pc, #68]	; (800314c <MX_USART3_UART_Init+0x90>)
 8003106:	f005 f9b5 	bl	8008474 <HAL_UART_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003110:	f000 fb34 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003114:	2100      	movs	r1, #0
 8003116:	480d      	ldr	r0, [pc, #52]	; (800314c <MX_USART3_UART_Init+0x90>)
 8003118:	f007 fa11 	bl	800a53e <HAL_UARTEx_SetTxFifoThreshold>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003122:	f000 fb2b 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003126:	2100      	movs	r1, #0
 8003128:	4808      	ldr	r0, [pc, #32]	; (800314c <MX_USART3_UART_Init+0x90>)
 800312a:	f007 fa46 	bl	800a5ba <HAL_UARTEx_SetRxFifoThreshold>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003134:	f000 fb22 	bl	800377c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <MX_USART3_UART_Init+0x90>)
 800313a:	f007 f9c7 	bl	800a4cc <HAL_UARTEx_DisableFifoMode>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003144:	f000 fb1a 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000116c 	.word	0x2000116c
 8003150:	40004800 	.word	0x40004800

08003154 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800317a:	4b9e      	ldr	r3, [pc, #632]	; (80033f4 <MX_GPIO_Init+0x290>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a9d      	ldr	r2, [pc, #628]	; (80033f4 <MX_GPIO_Init+0x290>)
 8003180:	f043 0310 	orr.w	r3, r3, #16
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b9b      	ldr	r3, [pc, #620]	; (80033f4 <MX_GPIO_Init+0x290>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003192:	4b98      	ldr	r3, [pc, #608]	; (80033f4 <MX_GPIO_Init+0x290>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	4a97      	ldr	r2, [pc, #604]	; (80033f4 <MX_GPIO_Init+0x290>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319e:	4b95      	ldr	r3, [pc, #596]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	4a91      	ldr	r2, [pc, #580]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a8b      	ldr	r2, [pc, #556]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	4b86      	ldr	r3, [pc, #536]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	4a85      	ldr	r2, [pc, #532]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e6:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f2:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <MX_GPIO_Init+0x290>)
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <MX_GPIO_Init+0x290>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	f240 1105 	movw	r1, #261	; 0x105
 8003210:	4879      	ldr	r0, [pc, #484]	; (80033f8 <MX_GPIO_Init+0x294>)
 8003212:	f002 fa9b 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8003216:	2200      	movs	r2, #0
 8003218:	f248 111c 	movw	r1, #33052	; 0x811c
 800321c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003220:	f002 fa94 	bl	800574c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003224:	2200      	movs	r2, #0
 8003226:	f24f 0134 	movw	r1, #61492	; 0xf034
 800322a:	4874      	ldr	r0, [pc, #464]	; (80033fc <MX_GPIO_Init+0x298>)
 800322c:	f002 fa8e 	bl	800574c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8003230:	2200      	movs	r2, #0
 8003232:	f242 0183 	movw	r1, #8323	; 0x2083
 8003236:	4872      	ldr	r0, [pc, #456]	; (8003400 <MX_GPIO_Init+0x29c>)
 8003238:	f002 fa88 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003242:	4870      	ldr	r0, [pc, #448]	; (8003404 <MX_GPIO_Init+0x2a0>)
 8003244:	f002 fa82 	bl	800574c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003248:	f240 1305 	movw	r3, #261	; 0x105
 800324c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324e:	2301      	movs	r3, #1
 8003250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	4865      	ldr	r0, [pc, #404]	; (80033f8 <MX_GPIO_Init+0x294>)
 8003262:	f002 f8e1 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8003266:	237a      	movs	r3, #122	; 0x7a
 8003268:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800326a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800326e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	4619      	mov	r1, r3
 800327a:	485f      	ldr	r0, [pc, #380]	; (80033f8 <MX_GPIO_Init+0x294>)
 800327c:	f002 f8d4 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003280:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8003284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003286:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800328a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	485b      	ldr	r0, [pc, #364]	; (8003404 <MX_GPIO_Init+0x2a0>)
 8003298:	f002 f8c6 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800329c:	f248 131c 	movw	r3, #33052	; 0x811c
 80032a0:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a2:	2301      	movs	r3, #1
 80032a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4619      	mov	r1, r3
 80032b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b8:	f002 f8b6 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80032bc:	2301      	movs	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	484a      	ldr	r0, [pc, #296]	; (80033fc <MX_GPIO_Init+0x298>)
 80032d2:	f002 f8a9 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032e6:	2302      	movs	r3, #2
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	4842      	ldr	r0, [pc, #264]	; (80033fc <MX_GPIO_Init+0x298>)
 80032f2:	f002 f899 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80032f6:	f24b 0334 	movw	r3, #45108	; 0xb034
 80032fa:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fc:	2301      	movs	r3, #1
 80032fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	4619      	mov	r1, r3
 800330e:	483b      	ldr	r0, [pc, #236]	; (80033fc <MX_GPIO_Init+0x298>)
 8003310:	f002 f88a 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8003314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331a:	2301      	movs	r3, #1
 800331c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	4833      	ldr	r0, [pc, #204]	; (80033fc <MX_GPIO_Init+0x298>)
 800332e:	f002 f87b 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8003332:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8003336:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003338:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800333c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	482d      	ldr	r0, [pc, #180]	; (8003400 <MX_GPIO_Init+0x29c>)
 800334a:	f002 f86d 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800334e:	f242 0383 	movw	r3, #8323	; 0x2083
 8003352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003354:	2301      	movs	r3, #1
 8003356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	4826      	ldr	r0, [pc, #152]	; (8003400 <MX_GPIO_Init+0x29c>)
 8003368:	f002 f85e 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800336c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	2301      	movs	r3, #1
 8003374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	481f      	ldr	r0, [pc, #124]	; (8003404 <MX_GPIO_Init+0x2a0>)
 8003386:	f002 f84f 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800338a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a2:	f002 f841 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80033a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033b8:	230a      	movs	r3, #10
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033c6:	f002 f82f 	bl	8005428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	2017      	movs	r0, #23
 80033d0:	f001 fe38 	bl	8005044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033d4:	2017      	movs	r0, #23
 80033d6:	f001 fe51 	bl	800507c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2106      	movs	r1, #6
 80033de:	2028      	movs	r0, #40	; 0x28
 80033e0:	f001 fe30 	bl	8005044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033e4:	2028      	movs	r0, #40	; 0x28
 80033e6:	f001 fe49 	bl	800507c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033ea:	bf00      	nop
 80033ec:	3730      	adds	r7, #48	; 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	48001000 	.word	0x48001000
 80033fc:	48000400 	.word	0x48000400
 8003400:	48000c00 	.word	0x48000c00
 8003404:	48000800 	.word	0x48000800

08003408 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <MyLED2_init+0x60>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a15      	ldr	r2, [pc, #84]	; (8003468 <MyLED2_init+0x60>)
 8003412:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003416:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <MyLED2_init+0x60>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <MyLED2_init+0x60>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <MyLED2_init+0x60>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <MyLED2_init+0x60>)
 800342a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342e:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <MyLED2_init+0x60>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <MyLED2_init+0x60>)
 8003436:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800343a:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <MyLED2_init+0x60>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a09      	ldr	r2, [pc, #36]	; (8003468 <MyLED2_init+0x60>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <MyLED2_init+0x60>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <MyLED2_init+0x60>)
 800344e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003452:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <MyLED2_init+0x60>)
 8003456:	4a04      	ldr	r2, [pc, #16]	; (8003468 <MyLED2_init+0x60>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	60d3      	str	r3, [r2, #12]

}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	48000400 	.word	0x48000400

0800346c <MyButton_init>:

static void MyButton_init(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <MyButton_init+0x7c>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <MyButton_init+0x7c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6613      	str	r3, [r2, #96]	; 0x60
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <MyButton_init+0x7c>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <MyButton_init+0x80>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <MyButton_init+0x80>)
 8003490:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003494:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <MyButton_init+0x80>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <MyButton_init+0x80>)
 800349c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80034a0:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <MyButton_init+0x80>)
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <MyButton_init+0x80>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <MyButton_init+0x84>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <MyButton_init+0x84>)
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MyButton_init+0x88>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <MyButton_init+0x88>)
 80034bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c0:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MyButton_init+0x88>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <MyButton_init+0x88>)
 80034c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034cc:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <MyButton_init+0x8c>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <MyButton_init+0x8c>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6053      	str	r3, [r2, #4]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	48000800 	.word	0x48000800
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40010400 	.word	0x40010400
 80034f8:	e000e100 	.word	0xe000e100

080034fc <MyUART1_init>:

static void MyUART1_init(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8003500:	4b22      	ldr	r3, [pc, #136]	; (800358c <MyUART1_init+0x90>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <MyUART1_init+0x90>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800350e:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <MyUART1_init+0x90>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MyUART1_init+0x90>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MyUART1_init+0x90>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <MyUART1_init+0x90>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800352e:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <MyUART1_init+0x90>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <MyUART1_init+0x90>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <MyUART1_init+0x90>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MyUART1_init+0x90>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MyUART1_init+0x90>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <MyUART1_init+0x90>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0208 	orr.w	r2, r2, #8
 800355e:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <MyUART1_init+0x90>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <MyUART1_init+0x90>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0204 	orr.w	r2, r2, #4
 800356e:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <MyUART1_init+0x90>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <MyUART1_init+0x90>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800357e:	605a      	str	r2, [r3, #4]

}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20001044 	.word	0x20001044

08003590 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af02      	add	r7, sp, #8
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_GPIO_EXTI_Callback+0x28>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	f7fe fbb6 	bl	8001d1c <xTaskGenericNotifyFromISR>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000d40 	.word	0x20000d40

080035bc <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  repeat = 2;
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <SOS_Transmit+0x120>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
  while(1)
	  {
	  //activate when user enters number of repeats

		  //for(int j=0; j<3; j++)
	      while(repeat>0)
 80035ca:	e068      	b.n	800369e <SOS_Transmit+0xe2>
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e016      	b.n	8003600 <SOS_Transmit+0x44>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <SOS_Transmit+0x124>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <SOS_Transmit+0x124>)
 80035d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035dc:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 80035de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035e2:	f7fd fd09 	bl	8000ff8 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <SOS_Transmit+0x124>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4a3d      	ldr	r2, [pc, #244]	; (80036e0 <SOS_Transmit+0x124>)
 80035ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f0:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 80035f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035f6:	f7fd fcff 	bl	8000ff8 <vTaskDelay>
	        for(int i=0; i<3; i++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b02      	cmp	r3, #2
 8003604:	dde5      	ble.n	80035d2 <SOS_Transmit+0x16>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8003606:	f44f 7016 	mov.w	r0, #600	; 0x258
 800360a:	f7fd fcf5 	bl	8000ff8 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e016      	b.n	8003642 <SOS_Transmit+0x86>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8003614:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <SOS_Transmit+0x124>)
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <SOS_Transmit+0x124>)
 800361a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361e:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8003620:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003624:	f7fd fce8 	bl	8000ff8 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <SOS_Transmit+0x124>)
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4a2c      	ldr	r2, [pc, #176]	; (80036e0 <SOS_Transmit+0x124>)
 800362e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003632:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8003634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003638:	f7fd fcde 	bl	8000ff8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3301      	adds	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b02      	cmp	r3, #2
 8003646:	dde5      	ble.n	8003614 <SOS_Transmit+0x58>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8003648:	f44f 7016 	mov.w	r0, #600	; 0x258
 800364c:	f7fd fcd4 	bl	8000ff8 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e016      	b.n	8003684 <SOS_Transmit+0xc8>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <SOS_Transmit+0x124>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <SOS_Transmit+0x124>)
 800365c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003660:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8003662:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003666:	f7fd fcc7 	bl	8000ff8 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <SOS_Transmit+0x124>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <SOS_Transmit+0x124>)
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8003676:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800367a:	f7fd fcbd 	bl	8000ff8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b02      	cmp	r3, #2
 8003688:	dde5      	ble.n	8003656 <SOS_Transmit+0x9a>
	 		  }
	         //7 time units between words
	 	  // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 800368a:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800368e:	f7fd fcb3 	bl	8000ff8 <vTaskDelay>
             repeat--;
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <SOS_Transmit+0x120>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3b01      	subs	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <SOS_Transmit+0x120>)
 800369c:	701a      	strb	r2, [r3, #0]
	      while(repeat>0)
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <SOS_Transmit+0x120>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d192      	bne.n	80035cc <SOS_Transmit+0x10>
		  }
	//	  SOS_transmission=0;
	      xQueueReceive(pUARTQueue,&cmd, portMAX_DELAY);
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <SOS_Transmit+0x128>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	490e      	ldr	r1, [pc, #56]	; (80036e8 <SOS_Transmit+0x12c>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd f96b 	bl	800098c <xQueueReceive>

	      if(cmd-'0'>=1 && cmd-'0'<=3)
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <SOS_Transmit+0x12c>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d90a      	bls.n	80036d4 <SOS_Transmit+0x118>
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <SOS_Transmit+0x12c>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b33      	cmp	r3, #51	; 0x33
 80036c4:	d806      	bhi.n	80036d4 <SOS_Transmit+0x118>
	      {
	    	  repeat = cmd - '0';
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <SOS_Transmit+0x12c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	3b30      	subs	r3, #48	; 0x30
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b03      	ldr	r3, [pc, #12]	; (80036dc <SOS_Transmit+0x120>)
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e002      	b.n	80036da <SOS_Transmit+0x11e>
	      }
	      else
	      {
	    	  repeat = 0;
 80036d4:	4b01      	ldr	r3, [pc, #4]	; (80036dc <SOS_Transmit+0x120>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
	      while(repeat>0)
 80036da:	e7e0      	b.n	800369e <SOS_Transmit+0xe2>
 80036dc:	20000d44 	.word	0x20000d44
 80036e0:	48000400 	.word	0x48000400
 80036e4:	20000d48 	.word	0x20000d48
 80036e8:	20000d45 	.word	0x20000d45

080036ec <UART_SendMsg>:
	      }
      }
  }

static void UART_SendMsg(void *parameter)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, parameter, strlen(parameter), HAL_MAX_DELAY);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fc fd83 	bl	8000200 <strlen>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4806      	ldr	r0, [pc, #24]	; (8003720 <UART_SendMsg+0x34>)
 8003706:	f004 ff05 	bl	8008514 <HAL_UART_Transmit>
		//wait for button push to reprint
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2000      	movs	r0, #0
 8003718:	f7fe fa7c 	bl	8001c14 <xTaskGenericNotifyWait>
		HAL_UART_Transmit(&huart1, parameter, strlen(parameter), HAL_MAX_DELAY);
 800371c:	e7ea      	b.n	80036f4 <UART_SendMsg+0x8>
 800371e:	bf00      	nop
 8003720:	20001044 	.word	0x20001044

08003724 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
   xQueueSendFromISR(pUARTQueue, &receiveBuf, NULL);
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_UART_RxCpltCallback+0x28>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	2300      	movs	r3, #0
 8003732:	2200      	movs	r2, #0
 8003734:	4906      	ldr	r1, [pc, #24]	; (8003750 <HAL_UART_RxCpltCallback+0x2c>)
 8003736:	f7fd f876 	bl	8000826 <xQueueGenericSendFromISR>
   HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);
 800373a:	2201      	movs	r2, #1
 800373c:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_UART_RxCpltCallback+0x2c>)
 800373e:	4805      	ldr	r0, [pc, #20]	; (8003754 <HAL_UART_RxCpltCallback+0x30>)
 8003740:	f004 ff78 	bl	8008634 <HAL_UART_Receive_IT>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000d48 	.word	0x20000d48
 8003750:	20000d4c 	.word	0x20000d4c
 8003754:	20001044 	.word	0x20001044

08003758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800376a:	f000 fcb1 	bl	80040d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40001000 	.word	0x40001000

0800377c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003780:	b672      	cpsid	i
}
 8003782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003784:	e7fe      	b.n	8003784 <Error_Handler+0x8>
	...

08003788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_MspInit+0x44>)
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_MspInit+0x44>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6613      	str	r3, [r2, #96]	; 0x60
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_MspInit+0x44>)
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_MspInit+0x44>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_MspInit+0x44>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_MspInit+0x44>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_ADC_MspInit+0x74>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d123      	bne.n	800383a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_ADC_MspInit+0x78>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_ADC_MspInit+0x78>)
 80037f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_ADC_MspInit+0x78>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_ADC_MspInit+0x78>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_ADC_MspInit+0x78>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_ADC_MspInit+0x78>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003822:	233f      	movs	r3, #63	; 0x3f
 8003824:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003826:	230b      	movs	r3, #11
 8003828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	4805      	ldr	r0, [pc, #20]	; (800384c <HAL_ADC_MspInit+0x7c>)
 8003836:	f001 fdf7 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800383a:	bf00      	nop
 800383c:	3728      	adds	r7, #40	; 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	50040000 	.word	0x50040000
 8003848:	40021000 	.word	0x40021000
 800384c:	48000800 	.word	0x48000800

08003850 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b0ae      	sub	sp, #184	; 0xb8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	2294      	movs	r2, #148	; 0x94
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f006 ff2f 	bl	800a6d4 <memset>
  if(DFSDM1_Init == 0)
 8003876:	4b25      	ldr	r3, [pc, #148]	; (800390c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d142      	bne.n	8003904 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800387e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003882:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fd72 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800389a:	f7ff ff6f 	bl	800377c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a8:	6613      	str	r3, [r2, #96]	; 0x60
 80038aa:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038bc:	f043 0310 	orr.w	r3, r3, #16
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80038ce:	f44f 7320 	mov.w	r3, #640	; 0x280
 80038d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80038e8:	2306      	movs	r3, #6
 80038ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4807      	ldr	r0, [pc, #28]	; (8003914 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80038f6:	f001 fd97 	bl	8005428 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	4a02      	ldr	r2, [pc, #8]	; (800390c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003902:	6013      	str	r3, [r2, #0]
  }

}
 8003904:	bf00      	nop
 8003906:	37b8      	adds	r7, #184	; 0xb8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20001200 	.word	0x20001200
 8003910:	40021000 	.word	0x40021000
 8003914:	48001000 	.word	0x48001000

08003918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b0b0      	sub	sp, #192	; 0xc0
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003930:	f107 0318 	add.w	r3, r7, #24
 8003934:	2294      	movs	r2, #148	; 0x94
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f006 fecb 	bl	800a6d4 <memset>
  if(hi2c->Instance==I2C1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <HAL_I2C_MspInit+0x134>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d13c      	bne.n	80039c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800394c:	2300      	movs	r3, #0
 800394e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003950:	f107 0318 	add.w	r3, r7, #24
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fd0f 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003960:	f7ff ff0c 	bl	800377c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003964:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003970:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800397c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003984:	2312      	movs	r3, #18
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800398a:	2301      	movs	r3, #1
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003996:	2304      	movs	r3, #4
 8003998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039a0:	4619      	mov	r1, r3
 80039a2:	482c      	ldr	r0, [pc, #176]	; (8003a54 <HAL_I2C_MspInit+0x13c>)
 80039a4:	f001 fd40 	bl	8005428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039a8:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b2:	6593      	str	r3, [r2, #88]	; 0x58
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039c0:	e040      	b.n	8003a44 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_I2C_MspInit+0x140>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d13b      	bne.n	8003a44 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fccd 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80039e4:	f7ff feca 	bl	800377c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039ee:	f043 0302 	orr.w	r3, r3, #2
 80039f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a08:	2312      	movs	r3, #18
 8003a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a24:	4619      	mov	r1, r3
 8003a26:	480b      	ldr	r0, [pc, #44]	; (8003a54 <HAL_I2C_MspInit+0x13c>)
 8003a28:	f001 fcfe 	bl	8005428 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 8003a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_I2C_MspInit+0x138>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
}
 8003a44:	bf00      	nop
 8003a46:	37c0      	adds	r7, #192	; 0xc0
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40005400 	.word	0x40005400
 8003a50:	40021000 	.word	0x40021000
 8003a54:	48000400 	.word	0x48000400
 8003a58:	40005800 	.word	0x40005800

08003a5c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0b0      	sub	sp, #192	; 0xc0
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a74:	f107 0318 	add.w	r3, r7, #24
 8003a78:	2294      	movs	r2, #148	; 0x94
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 fe29 	bl	800a6d4 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a28      	ldr	r2, [pc, #160]	; (8003b28 <HAL_OSPI_MspInit+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d149      	bne.n	8003b20 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a98:	f107 0318 	add.w	r3, r7, #24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fc6b 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003aa8:	f7ff fe68 	bl	800377c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003aac:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6513      	str	r3, [r2, #80]	; 0x50
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_OSPI_MspInit+0xd0>)
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003af4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003b0e:	230a      	movs	r3, #10
 8003b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <HAL_OSPI_MspInit+0xd4>)
 8003b1c:	f001 fc84 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003b20:	bf00      	nop
 8003b22:	37c0      	adds	r7, #192	; 0xc0
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	a0001000 	.word	0xa0001000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	48001000 	.word	0x48001000

08003b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <HAL_SPI_MspInit+0xdc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d129      	bne.n	8003baa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b60:	6613      	str	r3, [r2, #96]	; 0x60
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	4a28      	ldr	r2, [pc, #160]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003b86:	23e0      	movs	r3, #224	; 0xe0
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b92:	2303      	movs	r3, #3
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b96:	2305      	movs	r3, #5
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba4:	f001 fc40 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003ba8:	e02d      	b.n	8003c06 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_SPI_MspInit+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d128      	bne.n	8003c06 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	4a10      	ldr	r2, [pc, #64]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_SPI_MspInit+0xe0>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003be4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bf6:	2306      	movs	r3, #6
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfa:	f107 031c 	add.w	r3, r7, #28
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <HAL_SPI_MspInit+0xe8>)
 8003c02:	f001 fc11 	bl	8005428 <HAL_GPIO_Init>
}
 8003c06:	bf00      	nop
 8003c08:	3730      	adds	r7, #48	; 0x30
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40013000 	.word	0x40013000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40003c00 	.word	0x40003c00
 8003c1c:	48000800 	.word	0x48000800

08003c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0b4      	sub	sp, #208	; 0xd0
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c3c:	2294      	movs	r2, #148	; 0x94
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f006 fd47 	bl	800a6d4 <memset>
  if(huart->Instance==UART4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a87      	ldr	r2, [pc, #540]	; (8003e68 <HAL_UART_MspInit+0x248>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d13c      	bne.n	8003cca <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c50:	2308      	movs	r3, #8
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003c54:	2300      	movs	r3, #0
 8003c56:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 fb8b 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c68:	f7ff fd88 	bl	800377c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c6c:	4b7f      	ldr	r3, [pc, #508]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	4a7e      	ldr	r2, [pc, #504]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c76:	6593      	str	r3, [r2, #88]	; 0x58
 8003c78:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c84:	4b79      	ldr	r3, [pc, #484]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c90:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc4:	f001 fbb0 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cc8:	e0ca      	b.n	8003e60 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_UART_MspInit+0x250>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d143      	bne.n	8003d5c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fb49 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003cec:	f7ff fd46 	bl	800377c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	4a5d      	ldr	r2, [pc, #372]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8003cfc:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	4a57      	ldr	r2, [pc, #348]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d14:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d32:	2303      	movs	r3, #3
 8003d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d42:	4619      	mov	r1, r3
 8003d44:	484b      	ldr	r0, [pc, #300]	; (8003e74 <HAL_UART_MspInit+0x254>)
 8003d46:	f001 fb6f 	bl	8005428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2106      	movs	r1, #6
 8003d4e:	2025      	movs	r0, #37	; 0x25
 8003d50:	f001 f978 	bl	8005044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d54:	2025      	movs	r0, #37	; 0x25
 8003d56:	f001 f991 	bl	800507c <HAL_NVIC_EnableIRQ>
}
 8003d5a:	e081      	b.n	8003e60 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a45      	ldr	r2, [pc, #276]	; (8003e78 <HAL_UART_MspInit+0x258>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d13b      	bne.n	8003dde <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d66:	2302      	movs	r3, #2
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fb00 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8003d7e:	f7ff fcfd 	bl	800377c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a39      	ldr	r2, [pc, #228]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003db2:	2378      	movs	r3, #120	; 0x78
 8003db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dca:	2307      	movs	r3, #7
 8003dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4829      	ldr	r0, [pc, #164]	; (8003e7c <HAL_UART_MspInit+0x25c>)
 8003dd8:	f001 fb26 	bl	8005428 <HAL_GPIO_Init>
}
 8003ddc:	e040      	b.n	8003e60 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <HAL_UART_MspInit+0x260>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d13b      	bne.n	8003e60 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003de8:	2304      	movs	r3, #4
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003dec:	2300      	movs	r3, #0
 8003dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fabf 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8003e00:	f7ff fcbc 	bl	800377c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e22:	f043 0308 	orr.w	r3, r3, #8
 8003e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <HAL_UART_MspInit+0x24c>)
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003e34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e4e:	2307      	movs	r3, #7
 8003e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4808      	ldr	r0, [pc, #32]	; (8003e7c <HAL_UART_MspInit+0x25c>)
 8003e5c:	f001 fae4 	bl	8005428 <HAL_GPIO_Init>
}
 8003e60:	bf00      	nop
 8003e62:	37d0      	adds	r7, #208	; 0xd0
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40004c00 	.word	0x40004c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40013800 	.word	0x40013800
 8003e74:	48000400 	.word	0x48000400
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	48000c00 	.word	0x48000c00
 8003e80:	40004800 	.word	0x40004800

08003e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08e      	sub	sp, #56	; 0x38
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_InitTick+0xe0>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	4a33      	ldr	r2, [pc, #204]	; (8003f64 <HAL_InitTick+0xe0>)
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_InitTick+0xe0>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003eaa:	f107 0210 	add.w	r2, r7, #16
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 f96d 	bl	8007194 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f003 f93a 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 8003ec8:	6378      	str	r0, [r7, #52]	; 0x34
 8003eca:	e004      	b.n	8003ed6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ecc:	f003 f936 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_InitTick+0xe4>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0c9b      	lsrs	r3, r3, #18
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_InitTick+0xe8>)
 8003ee6:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_InitTick+0xec>)
 8003ee8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_InitTick+0xe8>)
 8003eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ef0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <HAL_InitTick+0xe8>)
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <HAL_InitTick+0xe8>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_InitTick+0xe8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_InitTick+0xe8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f0a:	4818      	ldr	r0, [pc, #96]	; (8003f6c <HAL_InitTick+0xe8>)
 8003f0c:	f003 ffff 	bl	8007f0e <HAL_TIM_Base_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11b      	bne.n	8003f56 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f1e:	4813      	ldr	r0, [pc, #76]	; (8003f6c <HAL_InitTick+0xe8>)
 8003f20:	f004 f856 	bl	8007fd0 <HAL_TIM_Base_Start_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d111      	bne.n	8003f56 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f32:	2036      	movs	r0, #54	; 0x36
 8003f34:	f001 f8a2 	bl	800507c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d808      	bhi.n	8003f50 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	2036      	movs	r0, #54	; 0x36
 8003f44:	f001 f87e 	bl	8005044 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_InitTick+0xf0>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e002      	b.n	8003f56 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3738      	adds	r7, #56	; 0x38
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	431bde83 	.word	0x431bde83
 8003f6c:	20001204 	.word	0x20001204
 8003f70:	40001000 	.word	0x40001000
 8003f74:	2000000c 	.word	0x2000000c

08003f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <NMI_Handler+0x4>

08003f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f82:	e7fe      	b.n	8003f82 <HardFault_Handler+0x4>

08003f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <MemManage_Handler+0x4>

08003f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f8e:	e7fe      	b.n	8003f8e <BusFault_Handler+0x4>

08003f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f94:	e7fe      	b.n	8003f94 <UsageFault_Handler+0x4>

08003f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003fa8:	2020      	movs	r0, #32
 8003faa:	f001 fbe7 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003fae:	2040      	movs	r0, #64	; 0x40
 8003fb0:	f001 fbe4 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003fb4:	2080      	movs	r0, #128	; 0x80
 8003fb6:	f001 fbe1 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003fba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fbe:	f001 fbdd 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fcc:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <USART1_IRQHandler+0x10>)
 8003fce:	f004 fb7d 	bl	80086cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20001044 	.word	0x20001044

08003fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003fe0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fe4:	f001 fbca 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fec:	f001 fbc6 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003ff0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ff4:	f001 fbc2 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ffc:	f001 fbbe 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8004000:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004004:	f001 fbba 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8004008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800400c:	f001 fbb6 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}

08004014 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004018:	4802      	ldr	r0, [pc, #8]	; (8004024 <TIM6_DAC_IRQHandler+0x10>)
 800401a:	f004 f849 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20001204 	.word	0x20001204

08004028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <SystemInit+0x20>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <SystemInit+0x20>)
 8004034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800404c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004084 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004050:	f7ff ffea 	bl	8004028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <LoopForever+0x6>)
  ldr r1, =_edata
 8004056:	490d      	ldr	r1, [pc, #52]	; (800408c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <LoopForever+0xe>)
  movs r3, #0
 800405a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800405c:	e002      	b.n	8004064 <LoopCopyDataInit>

0800405e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800405e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004062:	3304      	adds	r3, #4

08004064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004068:	d3f9      	bcc.n	800405e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800406c:	4c0a      	ldr	r4, [pc, #40]	; (8004098 <LoopForever+0x16>)
  movs r3, #0
 800406e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004070:	e001      	b.n	8004076 <LoopFillZerobss>

08004072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004074:	3204      	adds	r2, #4

08004076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004078:	d3fb      	bcc.n	8004072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800407a:	f006 fb33 	bl	800a6e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800407e:	f7fe fc49 	bl	8002914 <main>

08004082 <LoopForever>:

LoopForever:
    b LoopForever
 8004082:	e7fe      	b.n	8004082 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004084:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800408c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004090:	0800a850 	.word	0x0800a850
  ldr r2, =_sbss
 8004094:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004098:	20001278 	.word	0x20001278

0800409c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800409c:	e7fe      	b.n	800409c <ADC1_IRQHandler>

0800409e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a8:	2003      	movs	r0, #3
 80040aa:	f000 ffc0 	bl	800502e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040ae:	200f      	movs	r0, #15
 80040b0:	f7ff fee8 	bl	8003e84 <HAL_InitTick>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	71fb      	strb	r3, [r7, #7]
 80040be:	e001      	b.n	80040c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040c0:	f7ff fb62 	bl	8003788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040c4:	79fb      	ldrb	r3, [r7, #7]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_IncTick+0x20>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_IncTick+0x24>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <HAL_IncTick+0x24>)
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000010 	.word	0x20000010
 80040f4:	20001250 	.word	0x20001250

080040f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return uwTick;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_GetTick+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20001250 	.word	0x20001250

08004110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3360      	adds	r3, #96	; 0x60
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <LL_ADC_SetOffset+0x44>)
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	03fff000 	.word	0x03fff000

080041c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	461a      	mov	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3360      	adds	r3, #96	; 0x60
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	431a      	orrs	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	615a      	str	r2, [r3, #20]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3330      	adds	r3, #48	; 0x30
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	4413      	add	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	211f      	movs	r1, #31
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	401a      	ands	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	0e9b      	lsrs	r3, r3, #26
 8004280:	f003 011f 	and.w	r1, r3, #31
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	431a      	orrs	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3314      	adds	r3, #20
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0e5b      	lsrs	r3, r3, #25
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0d1b      	lsrs	r3, r3, #20
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2107      	movs	r1, #7
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	401a      	ands	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	0d1b      	lsrs	r3, r3, #20
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	431a      	orrs	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0318 	and.w	r3, r3, #24
 800431a:	4908      	ldr	r1, [pc, #32]	; (800433c <LL_ADC_SetChannelSingleDiff+0x44>)
 800431c:	40d9      	lsrs	r1, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	400b      	ands	r3, r1
 8004322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	0007ffff 	.word	0x0007ffff

08004340 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6093      	str	r3, [r2, #8]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004378:	d101      	bne.n	800437e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800439c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LL_ADC_IsEnabled+0x18>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LL_ADC_IsEnabled+0x1a>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d101      	bne.n	800441a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d101      	bne.n	8004440 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e129      	b.n	80046be <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff f9a9 	bl	80037d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff67 	bl	8004364 <LL_ADC_IsDeepPowerDownEnabled>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff4d 	bl	8004340 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff82 	bl	80043b4 <LL_ADC_IsInternalRegulatorEnabled>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d115      	bne.n	80044e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff66 	bl	800438c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c0:	4b81      	ldr	r3, [pc, #516]	; (80046c8 <HAL_ADC_Init+0x278>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	4a81      	ldr	r2, [pc, #516]	; (80046cc <HAL_ADC_Init+0x27c>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044d4:	e002      	b.n	80044dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b01      	subs	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f9      	bne.n	80044d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff64 	bl	80043b4 <LL_ADC_IsInternalRegulatorEnabled>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	f043 0210 	orr.w	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff75 	bl	8004402 <LL_ADC_REG_IsConversionOngoing>
 8004518:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80c2 	bne.w	80046ac <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80be 	bne.w	80046ac <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004538:	f043 0202 	orr.w	r2, r3, #2
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff49 	bl	80043dc <LL_ADC_IsEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004550:	485f      	ldr	r0, [pc, #380]	; (80046d0 <HAL_ADC_Init+0x280>)
 8004552:	f7ff ff43 	bl	80043dc <LL_ADC_IsEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4619      	mov	r1, r3
 8004562:	485c      	ldr	r0, [pc, #368]	; (80046d4 <HAL_ADC_Init+0x284>)
 8004564:	f7ff fdd4 	bl	8004110 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7e5b      	ldrb	r3, [r3, #25]
 800456c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004572:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004578:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800457e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004586:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d106      	bne.n	80045a4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	3b01      	subs	r3, #1
 800459c:	045b      	lsls	r3, r3, #17
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_ADC_Init+0x288>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	430b      	orrs	r3, r1
 80045d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff25 	bl	8004428 <LL_ADC_INJ_IsConversionOngoing>
 80045de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d140      	bne.n	8004668 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d13d      	bne.n	8004668 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7e1b      	ldrb	r3, [r3, #24]
 80045f4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045f6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460e:	f023 0306 	bic.w	r3, r3, #6
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	69b9      	ldr	r1, [r7, #24]
 8004618:	430b      	orrs	r3, r1
 800461a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004622:	2b01      	cmp	r3, #1
 8004624:	d118      	bne.n	8004658 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004642:	4311      	orrs	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004648:	430a      	orrs	r2, r1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e007      	b.n	8004668 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10c      	bne.n	800468a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f023 010f 	bic.w	r1, r3, #15
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	1e5a      	subs	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
 8004688:	e007      	b.n	800469a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 020f 	bic.w	r2, r2, #15
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	f043 0201 	orr.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58
 80046aa:	e007      	b.n	80046bc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f043 0210 	orr.w	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000008 	.word	0x20000008
 80046cc:	053e2d63 	.word	0x053e2d63
 80046d0:	50040000 	.word	0x50040000
 80046d4:	50040300 	.word	0x50040300
 80046d8:	fff0c007 	.word	0xfff0c007

080046dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b0b6      	sub	sp, #216	; 0xd8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x22>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e3d5      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x7ce>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fe79 	bl	8004402 <LL_ADC_REG_IsConversionOngoing>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 83ba 	bne.w	8004e8c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b05      	cmp	r3, #5
 8004726:	d824      	bhi.n	8004772 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	3b02      	subs	r3, #2
 800472e:	2b03      	cmp	r3, #3
 8004730:	d81b      	bhi.n	800476a <HAL_ADC_ConfigChannel+0x8e>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_ADC_ConfigChannel+0x5c>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004749 	.word	0x08004749
 800473c:	08004751 	.word	0x08004751
 8004740:	08004759 	.word	0x08004759
 8004744:	08004761 	.word	0x08004761
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004748:	230c      	movs	r3, #12
 800474a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800474e:	e010      	b.n	8004772 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004750:	2312      	movs	r3, #18
 8004752:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004756:	e00c      	b.n	8004772 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004758:	2318      	movs	r3, #24
 800475a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800475e:	e008      	b.n	8004772 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004768:	e003      	b.n	8004772 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800476a:	2306      	movs	r3, #6
 800476c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004770:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004780:	f7ff fd62 	bl	8004248 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fe3a 	bl	8004402 <LL_ADC_REG_IsConversionOngoing>
 800478e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fe46 	bl	8004428 <LL_ADC_INJ_IsConversionOngoing>
 800479c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 81bf 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 81ba 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047bc:	d10f      	bne.n	80047de <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7ff fd69 	bl	80042a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fd23 	bl	8004222 <LL_ADC_SetSamplingTimeCommonConfig>
 80047dc:	e00e      	b.n	80047fc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7ff fd58 	bl	80042a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fd13 	bl	8004222 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d00a      	beq.n	8004834 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6919      	ldr	r1, [r3, #16]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800482e:	f7ff fca3 	bl	8004178 <LL_ADC_SetOffset>
 8004832:	e179      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fcc0 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x184>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fcb5 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	f003 021f 	and.w	r2, r3, #31
 800485e:	e01e      	b.n	800489e <HAL_ADC_ConfigChannel+0x1c2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fcaa 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800487e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e004      	b.n	800489c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004892:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x1da>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	e018      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x20c>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80048ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80048d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e004      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80048de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fc79 	bl	80041ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fc5d 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x24a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fc52 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 800491c:	4603      	mov	r3, r0
 800491e:	0e9b      	lsrs	r3, r3, #26
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	e01e      	b.n	8004964 <HAL_ADC_ConfigChannel+0x288>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fc47 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800494c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004954:	2320      	movs	r3, #32
 8004956:	e004      	b.n	8004962 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <HAL_ADC_ConfigChannel+0x2a0>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	e018      	b.n	80049ae <HAL_ADC_ConfigChannel+0x2d2>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004988:	fa93 f3a3 	rbit	r3, r3
 800498c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80049a0:	2320      	movs	r3, #32
 80049a2:	e004      	b.n	80049ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80049a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a8:	fab3 f383 	clz	r3, r3
 80049ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d106      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2101      	movs	r1, #1
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fc16 	bl	80041ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fbfa 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x310>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fbef 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 80049e2:	4603      	mov	r3, r0
 80049e4:	0e9b      	lsrs	r3, r3, #26
 80049e6:	f003 021f 	and.w	r2, r3, #31
 80049ea:	e01e      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x34e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fbe4 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004a1a:	2320      	movs	r3, #32
 8004a1c:	e004      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	fab3 f383 	clz	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x366>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	0e9b      	lsrs	r3, r3, #26
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	e014      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x390>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	e004      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d106      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2102      	movs	r1, #2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fbb7 	bl	80041ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2103      	movs	r1, #3
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fb9b 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x3ce>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2103      	movs	r1, #3
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fb90 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	0e9b      	lsrs	r3, r3, #26
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	e017      	b.n	8004ada <HAL_ADC_ConfigChannel+0x3fe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2103      	movs	r1, #3
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fb85 	bl	80041c0 <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e003      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x416>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	0e9b      	lsrs	r3, r3, #26
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	e011      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x43a>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b02:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e003      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d106      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2103      	movs	r1, #3
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fb62 	bl	80041ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fc55 	bl	80043dc <LL_ADC_IsEnabled>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 813f 	bne.w	8004db8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7ff fbd6 	bl	80042f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a8e      	ldr	r2, [pc, #568]	; (8004d8c <HAL_ADC_ConfigChannel+0x6b0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f040 8130 	bne.w	8004db8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x4a4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2b09      	cmp	r3, #9
 8004b76:	bf94      	ite	ls
 8004b78:	2301      	movls	r3, #1
 8004b7a:	2300      	movhi	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e019      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x4d8>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e003      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2b09      	cmp	r3, #9
 8004bac:	bf94      	ite	ls
 8004bae:	2301      	movls	r3, #1
 8004bb0:	2300      	movhi	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d079      	beq.n	8004cac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d107      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x4f8>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	3301      	adds	r3, #1
 8004bcc:	069b      	lsls	r3, r3, #26
 8004bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd2:	e015      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x524>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e003      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	069b      	lsls	r3, r3, #26
 8004bfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x544>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	0e9b      	lsrs	r3, r3, #26
 8004c12:	3301      	adds	r3, #1
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	e017      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x574>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004c38:	2320      	movs	r3, #32
 8004c3a:	e003      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3e:	fab3 f383 	clz	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	3301      	adds	r3, #1
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	ea42 0103 	orr.w	r1, r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x59a>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0e9b      	lsrs	r3, r3, #26
 8004c66:	3301      	adds	r3, #1
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	051b      	lsls	r3, r3, #20
 8004c74:	e018      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x5cc>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004c8e:	2320      	movs	r3, #32
 8004c90:	e003      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f003 021f 	and.w	r2, r3, #31
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	e080      	b.n	8004dae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x5ec>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	069b      	lsls	r3, r3, #26
 8004cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc6:	e015      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x618>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	e003      	b.n	8004cec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	069b      	lsls	r3, r3, #26
 8004cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x638>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	0e9b      	lsrs	r3, r3, #26
 8004d06:	3301      	adds	r3, #1
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	e017      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x668>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	61bb      	str	r3, [r7, #24]
  return result;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e003      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10d      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x694>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	3b1e      	subs	r3, #30
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	e01d      	b.n	8004dac <HAL_ADC_ConfigChannel+0x6d0>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	60fb      	str	r3, [r7, #12]
  return result;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e005      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x6bc>
 8004d8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f003 021f 	and.w	r2, r3, #31
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	3b1e      	subs	r3, #30
 8004da6:	051b      	lsls	r3, r3, #20
 8004da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004db2:	4619      	mov	r1, r3
 8004db4:	f7ff fa74 	bl	80042a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b3d      	ldr	r3, [pc, #244]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d06c      	beq.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dc4:	483c      	ldr	r0, [pc, #240]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004dc6:	f7ff f9c9 	bl	800415c <LL_ADC_GetCommonPathInternalCh>
 8004dca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a3a      	ldr	r2, [pc, #232]	; (8004ebc <HAL_ADC_ConfigChannel+0x7e0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d127      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d121      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a35      	ldr	r2, [pc, #212]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d157      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004df6:	4619      	mov	r1, r3
 8004df8:	482f      	ldr	r0, [pc, #188]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004dfa:	f7ff f99c 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <HAL_ADC_ConfigChannel+0x7e8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <HAL_ADC_ConfigChannel+0x7ec>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e18:	e002      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f9      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e26:	e03a      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_ADC_ConfigChannel+0x7f0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d113      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d12a      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e50:	4619      	mov	r1, r3
 8004e52:	4819      	ldr	r0, [pc, #100]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004e54:	f7ff f96f 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e58:	e021      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_ADC_ConfigChannel+0x7f4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d11c      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d111      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e82:	4619      	mov	r1, r3
 8004e84:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004e86:	f7ff f956 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
 8004e8a:	e008      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004ea6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	37d8      	adds	r7, #216	; 0xd8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	80080000 	.word	0x80080000
 8004eb8:	50040300 	.word	0x50040300
 8004ebc:	c7520000 	.word	0xc7520000
 8004ec0:	50040000 	.word	0x50040000
 8004ec4:	20000008 	.word	0x20000008
 8004ec8:	053e2d63 	.word	0x053e2d63
 8004ecc:	cb840000 	.word	0xcb840000
 8004ed0:	80000001 	.word	0x80000001

08004ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f06:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <__NVIC_SetPriorityGrouping+0x44>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	60d3      	str	r3, [r2, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <__NVIC_GetPriorityGrouping+0x18>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	f003 0307 	and.w	r3, r3, #7
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	db0b      	blt.n	8004f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	f003 021f 	and.w	r2, r3, #31
 8004f50:	4907      	ldr	r1, [pc, #28]	; (8004f70 <__NVIC_EnableIRQ+0x38>)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2001      	movs	r0, #1
 8004f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e100 	.word	0xe000e100

08004f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	6039      	str	r1, [r7, #0]
 8004f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	db0a      	blt.n	8004f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	490c      	ldr	r1, [pc, #48]	; (8004fc0 <__NVIC_SetPriority+0x4c>)
 8004f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	440b      	add	r3, r1
 8004f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f9c:	e00a      	b.n	8004fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4908      	ldr	r1, [pc, #32]	; (8004fc4 <__NVIC_SetPriority+0x50>)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	3b04      	subs	r3, #4
 8004fac:	0112      	lsls	r2, r2, #4
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	761a      	strb	r2, [r3, #24]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000e100 	.word	0xe000e100
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	; 0x24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f1c3 0307 	rsb	r3, r3, #7
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	bf28      	it	cs
 8004fe6:	2304      	movcs	r3, #4
 8004fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2b06      	cmp	r3, #6
 8004ff0:	d902      	bls.n	8004ff8 <NVIC_EncodePriority+0x30>
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3b03      	subs	r3, #3
 8004ff6:	e000      	b.n	8004ffa <NVIC_EncodePriority+0x32>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43da      	mvns	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	401a      	ands	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005010:	f04f 31ff 	mov.w	r1, #4294967295
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	43d9      	mvns	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005020:	4313      	orrs	r3, r2
         );
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff4c 	bl	8004ed4 <__NVIC_SetPriorityGrouping>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005056:	f7ff ff61 	bl	8004f1c <__NVIC_GetPriorityGrouping>
 800505a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6978      	ldr	r0, [r7, #20]
 8005062:	f7ff ffb1 	bl	8004fc8 <NVIC_EncodePriority>
 8005066:	4602      	mov	r2, r0
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff80 	bl	8004f74 <__NVIC_SetPriority>
}
 8005074:	bf00      	nop
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff54 	bl	8004f38 <__NVIC_EnableIRQ>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0ac      	b.n	8005204 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f8b2 	bl	8005218 <DFSDM_GetChannelFromInstance>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4a55      	ldr	r2, [pc, #340]	; (800520c <HAL_DFSDM_ChannelInit+0x174>)
 80050b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e09f      	b.n	8005204 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fe fbc3 	bl	8003850 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80050ca:	4b51      	ldr	r3, [pc, #324]	; (8005210 <HAL_DFSDM_ChannelInit+0x178>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	4a4f      	ldr	r2, [pc, #316]	; (8005210 <HAL_DFSDM_ChannelInit+0x178>)
 80050d2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80050d4:	4b4e      	ldr	r3, [pc, #312]	; (8005210 <HAL_DFSDM_ChannelInit+0x178>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d125      	bne.n	8005128 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4c      	ldr	r2, [pc, #304]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050e6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80050e8:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4948      	ldr	r1, [pc, #288]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a46      	ldr	r2, [pc, #280]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 80050fc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8005100:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d108      	bne.n	800511c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800510a:	4b42      	ldr	r3, [pc, #264]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	493f      	ldr	r1, [pc, #252]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800511c:	4b3d      	ldr	r3, [pc, #244]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <HAL_DFSDM_ChannelInit+0x17c>)
 8005122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005126:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005136:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005146:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800514c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 020f 	bic.w	r2, r2, #15
 8005164:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800518c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6899      	ldr	r1, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 0207 	and.w	r2, r2, #7
 80051b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f810 	bl	8005218 <DFSDM_GetChannelFromInstance>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4904      	ldr	r1, [pc, #16]	; (800520c <HAL_DFSDM_ChannelInit+0x174>)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20001258 	.word	0x20001258
 8005210:	20001254 	.word	0x20001254
 8005214:	40016000 	.word	0x40016000

08005218 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <DFSDM_GetChannelFromInstance+0x7c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d102      	bne.n	800522e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e02b      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <DFSDM_GetChannelFromInstance+0x80>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d102      	bne.n	800523c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005236:	2301      	movs	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e024      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <DFSDM_GetChannelFromInstance+0x84>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d102      	bne.n	800524a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005244:	2302      	movs	r3, #2
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e01d      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <DFSDM_GetChannelFromInstance+0x88>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d102      	bne.n	8005258 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005252:	2304      	movs	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e016      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <DFSDM_GetChannelFromInstance+0x8c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d102      	bne.n	8005266 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005260:	2305      	movs	r3, #5
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e00f      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <DFSDM_GetChannelFromInstance+0x90>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d102      	bne.n	8005274 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800526e:	2306      	movs	r3, #6
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e008      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <DFSDM_GetChannelFromInstance+0x94>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d102      	bne.n	8005282 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800527c:	2307      	movs	r3, #7
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e001      	b.n	8005286 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005282:	2303      	movs	r3, #3
 8005284:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40016000 	.word	0x40016000
 8005298:	40016020 	.word	0x40016020
 800529c:	40016040 	.word	0x40016040
 80052a0:	40016080 	.word	0x40016080
 80052a4:	400160a0 	.word	0x400160a0
 80052a8:	400160c0 	.word	0x400160c0
 80052ac:	400160e0 	.word	0x400160e0

080052b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d008      	beq.n	80052da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2204      	movs	r2, #4
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e040      	b.n	800535c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 020e 	bic.w	r2, r2, #14
 80052e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f003 021c 	and.w	r2, r3, #28
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2101      	movs	r1, #1
 8005318:	fa01 f202 	lsl.w	r2, r1, r2
 800531c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005326:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005348:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d005      	beq.n	800538c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
 800538a:	e047      	b.n	800541c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 020e 	bic.w	r2, r2, #14
 800539a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	f003 021c 	and.w	r2, r3, #28
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f202 	lsl.w	r2, r1, r2
 80053ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053fa:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
    }
  }
  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005436:	e166      	b.n	8005706 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8158 	beq.w	8005700 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d005      	beq.n	8005468 <HAL_GPIO_Init+0x40>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d130      	bne.n	80054ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549e:	2201      	movs	r2, #1
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0201 	and.w	r2, r3, #1
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d017      	beq.n	8005506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d123      	bne.n	800555a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	08da      	lsrs	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3208      	adds	r2, #8
 800551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	220f      	movs	r2, #15
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	6939      	ldr	r1, [r7, #16]
 8005556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80b2 	beq.w	8005700 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559c:	4b61      	ldr	r3, [pc, #388]	; (8005724 <HAL_GPIO_Init+0x2fc>)
 800559e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a0:	4a60      	ldr	r2, [pc, #384]	; (8005724 <HAL_GPIO_Init+0x2fc>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6613      	str	r3, [r2, #96]	; 0x60
 80055a8:	4b5e      	ldr	r3, [pc, #376]	; (8005724 <HAL_GPIO_Init+0x2fc>)
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055b4:	4a5c      	ldr	r2, [pc, #368]	; (8005728 <HAL_GPIO_Init+0x300>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	3302      	adds	r3, #2
 80055bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055de:	d02b      	beq.n	8005638 <HAL_GPIO_Init+0x210>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a52      	ldr	r2, [pc, #328]	; (800572c <HAL_GPIO_Init+0x304>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d025      	beq.n	8005634 <HAL_GPIO_Init+0x20c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a51      	ldr	r2, [pc, #324]	; (8005730 <HAL_GPIO_Init+0x308>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01f      	beq.n	8005630 <HAL_GPIO_Init+0x208>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a50      	ldr	r2, [pc, #320]	; (8005734 <HAL_GPIO_Init+0x30c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d019      	beq.n	800562c <HAL_GPIO_Init+0x204>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a4f      	ldr	r2, [pc, #316]	; (8005738 <HAL_GPIO_Init+0x310>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <HAL_GPIO_Init+0x200>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a4e      	ldr	r2, [pc, #312]	; (800573c <HAL_GPIO_Init+0x314>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00d      	beq.n	8005624 <HAL_GPIO_Init+0x1fc>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <HAL_GPIO_Init+0x318>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <HAL_GPIO_Init+0x1f8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a4c      	ldr	r2, [pc, #304]	; (8005744 <HAL_GPIO_Init+0x31c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <HAL_GPIO_Init+0x1f4>
 8005618:	2307      	movs	r3, #7
 800561a:	e00e      	b.n	800563a <HAL_GPIO_Init+0x212>
 800561c:	2308      	movs	r3, #8
 800561e:	e00c      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005620:	2306      	movs	r3, #6
 8005622:	e00a      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005624:	2305      	movs	r3, #5
 8005626:	e008      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005628:	2304      	movs	r3, #4
 800562a:	e006      	b.n	800563a <HAL_GPIO_Init+0x212>
 800562c:	2303      	movs	r3, #3
 800562e:	e004      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005630:	2302      	movs	r3, #2
 8005632:	e002      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <HAL_GPIO_Init+0x212>
 8005638:	2300      	movs	r3, #0
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	f002 0203 	and.w	r2, r2, #3
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4093      	lsls	r3, r2
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800564a:	4937      	ldr	r1, [pc, #220]	; (8005728 <HAL_GPIO_Init+0x300>)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	3302      	adds	r3, #2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005658:	4b3b      	ldr	r3, [pc, #236]	; (8005748 <HAL_GPIO_Init+0x320>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800567c:	4a32      	ldr	r2, [pc, #200]	; (8005748 <HAL_GPIO_Init+0x320>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_GPIO_Init+0x320>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056a6:	4a28      	ldr	r2, [pc, #160]	; (8005748 <HAL_GPIO_Init+0x320>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056ac:	4b26      	ldr	r3, [pc, #152]	; (8005748 <HAL_GPIO_Init+0x320>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4013      	ands	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_GPIO_Init+0x320>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <HAL_GPIO_Init+0x320>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	43db      	mvns	r3, r3
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056fa:	4a13      	ldr	r2, [pc, #76]	; (8005748 <HAL_GPIO_Init+0x320>)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3301      	adds	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	f47f ae91 	bne.w	8005438 <HAL_GPIO_Init+0x10>
  }
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40021000 	.word	0x40021000
 8005728:	40010000 	.word	0x40010000
 800572c:	48000400 	.word	0x48000400
 8005730:	48000800 	.word	0x48000800
 8005734:	48000c00 	.word	0x48000c00
 8005738:	48001000 	.word	0x48001000
 800573c:	48001400 	.word	0x48001400
 8005740:	48001800 	.word	0x48001800
 8005744:	48001c00 	.word	0x48001c00
 8005748:	40010400 	.word	0x40010400

0800574c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
 8005758:	4613      	mov	r3, r2
 800575a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005768:	e002      	b.n	8005770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fd fef8 	bl	8003590 <HAL_GPIO_EXTI_Callback>
  }
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40010400 	.word	0x40010400

080057ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e08d      	b.n	80058da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fe f8a0 	bl	8003918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	e006      	b.n	8005834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d108      	bne.n	800584e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	e007      	b.n	800585e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800585c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800586c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d138      	bne.n	800596a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005902:	2302      	movs	r3, #2
 8005904:	e032      	b.n	800596c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2224      	movs	r2, #36	; 0x24
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005934:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	d139      	bne.n	8005a02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005998:	2302      	movs	r3, #2
 800599a:	e033      	b.n	8005a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2224      	movs	r2, #36	; 0x24
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
  }
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7fe fb6c 	bl	80040f8 <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e092      	b.n	8005b54 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 808b 	bne.w	8005b54 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe f80c 	bl	8003a5c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005a44:	f241 3188 	movw	r1, #5000	; 0x1388
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f88b 	bl	8005b64 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	4b42      	ldr	r3, [pc, #264]	; (8005b60 <HAL_OSPI_Init+0x150>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68d1      	ldr	r1, [r2, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6912      	ldr	r2, [r2, #16]
 8005a60:	3a01      	subs	r2, #1
 8005a62:	0412      	lsls	r2, r2, #16
 8005a64:	4311      	orrs	r1, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6952      	ldr	r2, [r2, #20]
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0212      	lsls	r2, r2, #8
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	69d2      	ldr	r2, [r2, #28]
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	0412      	lsls	r2, r2, #16
 8005a8e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	021a      	lsls	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb98 	bl	80061ec <OSPI_WaitFlagStateUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d146      	bne.n	8005b54 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005afc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d107      	bne.n	8005b3c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0202 	orr.w	r2, r2, #2
 8005b3a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b44:	d103      	bne.n	8005b4e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
 8005b4c:	e002      	b.n	8005b54 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	f8e0f8f4 	.word	0xf8e0f8f4

08005b64 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b092      	sub	sp, #72	; 0x48
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <HAL_OSPIM_Config+0x40>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d105      	bne.n	8005bb2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005bb0:	e004      	b.n	8005bbc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005bc2:	e01f      	b.n	8005c04 <HAL_OSPIM_Config+0x80>
 8005bc4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005bc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bcc:	3301      	adds	r3, #1
 8005bce:	b2d8      	uxtb	r0, r3
 8005bd0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005bd4:	f107 0114 	add.w	r1, r7, #20
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	4619      	mov	r1, r3
 8005be4:	f000 fb3a 	bl	800625c <OSPIM_GetConfig>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005c04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d9dd      	bls.n	8005bc8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005c0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 82de 	bne.w	80061d2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005c16:	4bc6      	ldr	r3, [pc, #792]	; (8005f30 <HAL_OSPIM_Config+0x3ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005c22:	4bc3      	ldr	r3, [pc, #780]	; (8005f30 <HAL_OSPIM_Config+0x3ac>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4ac2      	ldr	r2, [pc, #776]	; (8005f30 <HAL_OSPIM_Config+0x3ac>)
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005c2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005c3a:	4bbe      	ldr	r3, [pc, #760]	; (8005f34 <HAL_OSPIM_Config+0x3b0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005c46:	4bbb      	ldr	r3, [pc, #748]	; (8005f34 <HAL_OSPIM_Config+0x3b0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4aba      	ldr	r2, [pc, #744]	; (8005f34 <HAL_OSPIM_Config+0x3b0>)
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005c52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005c5e:	49b6      	ldr	r1, [pc, #728]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	3348      	adds	r3, #72	; 0x48
 8005c6c:	443b      	add	r3, r7
 8005c6e:	3b2c      	subs	r3, #44	; 0x2c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	48af      	ldr	r0, [pc, #700]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	3348      	adds	r3, #72	; 0x48
 8005c88:	443b      	add	r3, r7
 8005c8a:	3b2c      	subs	r3, #44	; 0x2c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4403      	add	r3, r0
 8005c98:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3348      	adds	r3, #72	; 0x48
 8005ca6:	443b      	add	r3, r7
 8005ca8:	3b34      	subs	r3, #52	; 0x34
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a1 	beq.w	8005df4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005cb2:	49a1      	ldr	r1, [pc, #644]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	3348      	adds	r3, #72	; 0x48
 8005cc0:	443b      	add	r3, r7
 8005cc2:	3b34      	subs	r3, #52	; 0x34
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	489a      	ldr	r0, [pc, #616]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	3348      	adds	r3, #72	; 0x48
 8005cdc:	443b      	add	r3, r7
 8005cde:	3b34      	subs	r3, #52	; 0x34
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f021 0201 	bic.w	r2, r1, #1
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4403      	add	r3, r0
 8005cec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	3348      	adds	r3, #72	; 0x48
 8005cfa:	443b      	add	r3, r7
 8005cfc:	3b30      	subs	r3, #48	; 0x30
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01d      	beq.n	8005d40 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005d04:	498c      	ldr	r1, [pc, #560]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	3348      	adds	r3, #72	; 0x48
 8005d12:	443b      	add	r3, r7
 8005d14:	3b30      	subs	r3, #48	; 0x30
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	4885      	ldr	r0, [pc, #532]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	3348      	adds	r3, #72	; 0x48
 8005d2e:	443b      	add	r3, r7
 8005d30:	3b30      	subs	r3, #48	; 0x30
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	f021 0210 	bic.w	r2, r1, #16
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4403      	add	r3, r0
 8005d3e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	3348      	adds	r3, #72	; 0x48
 8005d4c:	443b      	add	r3, r7
 8005d4e:	3b28      	subs	r3, #40	; 0x28
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d021      	beq.n	8005d9a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005d56:	4978      	ldr	r1, [pc, #480]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	3348      	adds	r3, #72	; 0x48
 8005d64:	443b      	add	r3, r7
 8005d66:	3b28      	subs	r3, #40	; 0x28
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	4870      	ldr	r0, [pc, #448]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	3348      	adds	r3, #72	; 0x48
 8005d84:	443b      	add	r3, r7
 8005d86:	3b28      	subs	r3, #40	; 0x28
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4403      	add	r3, r0
 8005d98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	3348      	adds	r3, #72	; 0x48
 8005da6:	443b      	add	r3, r7
 8005da8:	3b24      	subs	r3, #36	; 0x24
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d021      	beq.n	8005df4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005db0:	4961      	ldr	r1, [pc, #388]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3348      	adds	r3, #72	; 0x48
 8005dbe:	443b      	add	r3, r7
 8005dc0:	3b24      	subs	r3, #36	; 0x24
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	4859      	ldr	r0, [pc, #356]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	3348      	adds	r3, #72	; 0x48
 8005dde:	443b      	add	r3, r7
 8005de0:	3b24      	subs	r3, #36	; 0x24
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4403      	add	r3, r0
 8005df2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6819      	ldr	r1, [r3, #0]
 8005df8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	3348      	adds	r3, #72	; 0x48
 8005e06:	443b      	add	r3, r7
 8005e08:	3b34      	subs	r3, #52	; 0x34
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d038      	beq.n	8005e82 <HAL_OSPIM_Config+0x2fe>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	3348      	adds	r3, #72	; 0x48
 8005e22:	443b      	add	r3, r7
 8005e24:	3b30      	subs	r3, #48	; 0x30
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d02a      	beq.n	8005e82 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	3348      	adds	r3, #72	; 0x48
 8005e3e:	443b      	add	r3, r7
 8005e40:	3b2c      	subs	r3, #44	; 0x2c
 8005e42:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005e44:	4299      	cmp	r1, r3
 8005e46:	d01c      	beq.n	8005e82 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3348      	adds	r3, #72	; 0x48
 8005e5a:	443b      	add	r3, r7
 8005e5c:	3b28      	subs	r3, #40	; 0x28
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d00e      	beq.n	8005e82 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6919      	ldr	r1, [r3, #16]
 8005e68:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	3348      	adds	r3, #72	; 0x48
 8005e76:	443b      	add	r3, r7
 8005e78:	3b24      	subs	r3, #36	; 0x24
 8005e7a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	f040 80d3 	bne.w	8006028 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005e82:	492d      	ldr	r1, [pc, #180]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005e84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	3348      	adds	r3, #72	; 0x48
 8005e92:	443b      	add	r3, r7
 8005e94:	3b34      	subs	r3, #52	; 0x34
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	4825      	ldr	r0, [pc, #148]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005ea2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	3348      	adds	r3, #72	; 0x48
 8005eb0:	443b      	add	r3, r7
 8005eb2:	3b34      	subs	r3, #52	; 0x34
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	f021 0201 	bic.w	r2, r1, #1
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4403      	add	r3, r0
 8005ec0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005ec2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	3348      	adds	r3, #72	; 0x48
 8005ed0:	443b      	add	r3, r7
 8005ed2:	3b30      	subs	r3, #48	; 0x30
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01f      	beq.n	8005f1a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005eda:	4917      	ldr	r1, [pc, #92]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005edc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	3348      	adds	r3, #72	; 0x48
 8005eea:	443b      	add	r3, r7
 8005eec:	3b30      	subs	r3, #48	; 0x30
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	480f      	ldr	r0, [pc, #60]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005efa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	3348      	adds	r3, #72	; 0x48
 8005f08:	443b      	add	r3, r7
 8005f0a:	3b30      	subs	r3, #48	; 0x30
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	f021 0210 	bic.w	r2, r1, #16
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4403      	add	r3, r0
 8005f18:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005f1a:	4907      	ldr	r1, [pc, #28]	; (8005f38 <HAL_OSPIM_Config+0x3b4>)
 8005f1c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	3348      	adds	r3, #72	; 0x48
 8005f2a:	443b      	add	r3, r7
 8005f2c:	3b2c      	subs	r3, #44	; 0x2c
 8005f2e:	e005      	b.n	8005f3c <HAL_OSPIM_Config+0x3b8>
 8005f30:	a0001000 	.word	0xa0001000
 8005f34:	a0001400 	.word	0xa0001400
 8005f38:	50061c00 	.word	0x50061c00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	48a6      	ldr	r0, [pc, #664]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8005f48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	3348      	adds	r3, #72	; 0x48
 8005f56:	443b      	add	r3, r7
 8005f58:	3b2c      	subs	r3, #44	; 0x2c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4403      	add	r3, r0
 8005f66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005f68:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	3348      	adds	r3, #72	; 0x48
 8005f76:	443b      	add	r3, r7
 8005f78:	3b28      	subs	r3, #40	; 0x28
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d023      	beq.n	8005fc8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005f80:	4997      	ldr	r1, [pc, #604]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8005f82:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	3348      	adds	r3, #72	; 0x48
 8005f90:	443b      	add	r3, r7
 8005f92:	3b28      	subs	r3, #40	; 0x28
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	488f      	ldr	r0, [pc, #572]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8005fa4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	3348      	adds	r3, #72	; 0x48
 8005fb2:	443b      	add	r3, r7
 8005fb4:	3b28      	subs	r3, #40	; 0x28
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4403      	add	r3, r0
 8005fc6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005fc8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	3348      	adds	r3, #72	; 0x48
 8005fd6:	443b      	add	r3, r7
 8005fd8:	3b24      	subs	r3, #36	; 0x24
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d023      	beq.n	8006028 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005fe0:	497f      	ldr	r1, [pc, #508]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8005fe2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	3348      	adds	r3, #72	; 0x48
 8005ff0:	443b      	add	r3, r7
 8005ff2:	3b24      	subs	r3, #36	; 0x24
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	4877      	ldr	r0, [pc, #476]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006004:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3348      	adds	r3, #72	; 0x48
 8006012:	443b      	add	r3, r7
 8006014:	3b24      	subs	r3, #36	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4403      	add	r3, r0
 8006026:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006028:	4a6d      	ldr	r2, [pc, #436]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	3b01      	subs	r3, #1
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800603a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603c:	025b      	lsls	r3, r3, #9
 800603e:	431a      	orrs	r2, r3
 8006040:	4967      	ldr	r1, [pc, #412]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	3b01      	subs	r3, #1
 8006048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006052:	4a63      	ldr	r2, [pc, #396]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f023 0203 	bic.w	r2, r3, #3
 8006064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	431a      	orrs	r2, r3
 800606a:	495d      	ldr	r1, [pc, #372]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d014      	beq.n	80060ae <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006084:	4a56      	ldr	r2, [pc, #344]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006098:	015b      	lsls	r3, r3, #5
 800609a:	431a      	orrs	r2, r3
 800609c:	4950      	ldr	r1, [pc, #320]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	f042 0210 	orr.w	r2, r2, #16
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d019      	beq.n	80060ee <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80060ba:	4a49      	ldr	r2, [pc, #292]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80060d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d2:	049b      	lsls	r3, r3, #18
 80060d4:	431a      	orrs	r2, r3
 80060d6:	4942      	ldr	r1, [pc, #264]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	3b01      	subs	r3, #1
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e01c      	b.n	8006128 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80060f6:	4a3a      	ldr	r2, [pc, #232]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800610c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610e:	069b      	lsls	r3, r3, #26
 8006110:	431a      	orrs	r2, r3
 8006112:	4933      	ldr	r1, [pc, #204]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	3b01      	subs	r3, #1
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d019      	beq.n	8006168 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	3b01      	subs	r3, #1
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800614a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614c:	049b      	lsls	r3, r3, #18
 800614e:	431a      	orrs	r2, r3
 8006150:	4923      	ldr	r1, [pc, #140]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	3b01      	subs	r3, #1
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	e01c      	b.n	80061a2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	3b01      	subs	r3, #1
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	069b      	lsls	r3, r3, #26
 800618a:	431a      	orrs	r2, r3
 800618c:	4914      	ldr	r1, [pc, #80]	; (80061e0 <HAL_OSPIM_Config+0x65c>)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	3b01      	subs	r3, #1
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80061a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_OSPIM_Config+0x660>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <HAL_OSPIM_Config+0x660>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80061ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80061c6:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <HAL_OSPIM_Config+0x664>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <HAL_OSPIM_Config+0x664>)
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80061d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3748      	adds	r7, #72	; 0x48
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	50061c00 	.word	0x50061c00
 80061e4:	a0001000 	.word	0xa0001000
 80061e8:	a0001400 	.word	0xa0001400

080061ec <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80061fc:	e01a      	b.n	8006234 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d016      	beq.n	8006234 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fd ff77 	bl	80040f8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e00e      	b.n	8006252 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf14      	ite	ne
 8006242:	2301      	movne	r3, #1
 8006244:	2300      	moveq	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	429a      	cmp	r2, r3
 800624e:	d1d6      	bne.n	80061fe <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	6039      	str	r1, [r7, #0]
 8006266:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <OSPIM_GetConfig+0x26>
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d802      	bhi.n	8006282 <OSPIM_GetConfig+0x26>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
 8006286:	e08e      	b.n	80063a6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2200      	movs	r2, #0
 8006292:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2200      	movs	r2, #0
 800629e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d101      	bne.n	80062b0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80062ac:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <OSPIM_GetConfig+0x158>)
 80062ae:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e074      	b.n	80063a0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80062b6:	4a40      	ldr	r2, [pc, #256]	; (80063b8 <OSPIM_GetConfig+0x15c>)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4053      	eors	r3, r2
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4053      	eors	r3, r2
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	4053      	eors	r3, r2
 8006312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d018      	beq.n	800635e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4053      	eors	r3, r2
 8006332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d111      	bne.n	800635e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e005      	b.n	800635e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d018      	beq.n	800639a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4053      	eors	r3, r2
 800636e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d111      	bne.n	800639a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	611a      	str	r2, [r3, #16]
 800638c:	e005      	b.n	800639a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d987      	bls.n	80062b6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	04040222 	.word	0x04040222
 80063b8:	50061c00 	.word	0x50061c00

080063bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ca:	6013      	str	r3, [r2, #0]
}
 80063cc:	bf00      	nop
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40007000 	.word	0x40007000

080063dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d102      	bne.n	80063f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80063ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f2:	e00b      	b.n	800640c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d102      	bne.n	800640a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006408:	e000      	b.n	800640c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800640a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800640c:	4618      	mov	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40007000 	.word	0x40007000

0800641c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d141      	bne.n	80064ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800642a:	4b4b      	ldr	r3, [pc, #300]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d131      	bne.n	800649c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006438:	4b47      	ldr	r3, [pc, #284]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643e:	4a46      	ldr	r2, [pc, #280]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006448:	4b43      	ldr	r3, [pc, #268]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006450:	4a41      	ldr	r2, [pc, #260]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006458:	4b40      	ldr	r3, [pc, #256]	; (800655c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2232      	movs	r2, #50	; 0x32
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	4a3f      	ldr	r2, [pc, #252]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	0c9b      	lsrs	r3, r3, #18
 800646a:	3301      	adds	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800646e:	e002      	b.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3b01      	subs	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006476:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d102      	bne.n	800648a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f2      	bne.n	8006470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006496:	d158      	bne.n	800654a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e057      	b.n	800654c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800649c:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800649e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a2:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80064ac:	e04d      	b.n	800654a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b4:	d141      	bne.n	800653a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064b6:	4b28      	ldr	r3, [pc, #160]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c2:	d131      	bne.n	8006528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064c4:	4b24      	ldr	r3, [pc, #144]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ca:	4a23      	ldr	r2, [pc, #140]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064d4:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064dc:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2232      	movs	r2, #50	; 0x32
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064f0:	fba2 2303 	umull	r2, r3, r2, r3
 80064f4:	0c9b      	lsrs	r3, r3, #18
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064fa:	e002      	b.n	8006502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3b01      	subs	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650e:	d102      	bne.n	8006516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f2      	bne.n	80064fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d112      	bne.n	800654a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e011      	b.n	800654c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800652e:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006538:	e007      	b.n	800654a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800653a:	4b07      	ldr	r3, [pc, #28]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006542:	4a05      	ldr	r2, [pc, #20]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006548:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40007000 	.word	0x40007000
 800655c:	20000008 	.word	0x20000008
 8006560:	431bde83 	.word	0x431bde83

08006564 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f000 bc08 	b.w	8006d88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006578:	4b96      	ldr	r3, [pc, #600]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006582:	4b94      	ldr	r3, [pc, #592]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80e4 	beq.w	8006762 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <HAL_RCC_OscConfig+0x4c>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b0c      	cmp	r3, #12
 80065a4:	f040 808b 	bne.w	80066be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	f040 8087 	bne.w	80066be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065b0:	4b88      	ldr	r3, [pc, #544]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_OscConfig+0x64>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e3df      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	4b81      	ldr	r3, [pc, #516]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <HAL_RCC_OscConfig+0x7e>
 80065d8:	4b7e      	ldr	r3, [pc, #504]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e0:	e005      	b.n	80065ee <HAL_RCC_OscConfig+0x8a>
 80065e2:	4b7c      	ldr	r3, [pc, #496]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80065e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d223      	bcs.n	800663a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fdfe 	bl	80071f8 <RCC_SetFlashLatencyFromMSIRange>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e3c0      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006606:	4b73      	ldr	r3, [pc, #460]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a72      	ldr	r2, [pc, #456]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800660c:	f043 0308 	orr.w	r3, r3, #8
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	496d      	ldr	r1, [pc, #436]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006620:	4313      	orrs	r3, r2
 8006622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006624:	4b6b      	ldr	r3, [pc, #428]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	4968      	ldr	r1, [pc, #416]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	e025      	b.n	8006686 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800663a:	4b66      	ldr	r3, [pc, #408]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a65      	ldr	r2, [pc, #404]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006640:	f043 0308 	orr.w	r3, r3, #8
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	4960      	ldr	r1, [pc, #384]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006654:	4313      	orrs	r3, r2
 8006656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006658:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	495b      	ldr	r1, [pc, #364]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fdbe 	bl	80071f8 <RCC_SetFlashLatencyFromMSIRange>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e380      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006686:	f000 fcc1 	bl	800700c <HAL_RCC_GetSysClockFreq>
 800668a:	4602      	mov	r2, r0
 800668c:	4b51      	ldr	r3, [pc, #324]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	4950      	ldr	r1, [pc, #320]	; (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006698:	5ccb      	ldrb	r3, [r1, r3]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	4a4e      	ldr	r2, [pc, #312]	; (80067dc <HAL_RCC_OscConfig+0x278>)
 80066a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066a6:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <HAL_RCC_OscConfig+0x27c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fd fbea 	bl	8003e84 <HAL_InitTick>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d052      	beq.n	8006760 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	e364      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d032      	beq.n	800672c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066c6:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a42      	ldr	r2, [pc, #264]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066d2:	f7fd fd11 	bl	80040f8 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066da:	f7fd fd0d 	bl	80040f8 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e34d      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066ec:	4b39      	ldr	r3, [pc, #228]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066f8:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a35      	ldr	r2, [pc, #212]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80066fe:	f043 0308 	orr.w	r3, r3, #8
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	4930      	ldr	r1, [pc, #192]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	492b      	ldr	r1, [pc, #172]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006726:	4313      	orrs	r3, r2
 8006728:	604b      	str	r3, [r1, #4]
 800672a:	e01a      	b.n	8006762 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800672c:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a28      	ldr	r2, [pc, #160]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006738:	f7fd fcde 	bl	80040f8 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006740:	f7fd fcda 	bl	80040f8 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e31a      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x1dc>
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d073      	beq.n	8006856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d005      	beq.n	8006780 <HAL_RCC_OscConfig+0x21c>
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b0c      	cmp	r3, #12
 8006778:	d10e      	bne.n	8006798 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d10b      	bne.n	8006798 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d063      	beq.n	8006854 <HAL_RCC_OscConfig+0x2f0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d15f      	bne.n	8006854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e2f7      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d106      	bne.n	80067b0 <HAL_RCC_OscConfig+0x24c>
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a0b      	ldr	r2, [pc, #44]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e025      	b.n	80067fc <HAL_RCC_OscConfig+0x298>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067b8:	d114      	bne.n	80067e4 <HAL_RCC_OscConfig+0x280>
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a05      	ldr	r2, [pc, #20]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a02      	ldr	r2, [pc, #8]	; (80067d4 <HAL_RCC_OscConfig+0x270>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e013      	b.n	80067fc <HAL_RCC_OscConfig+0x298>
 80067d4:	40021000 	.word	0x40021000
 80067d8:	0800a7d0 	.word	0x0800a7d0
 80067dc:	20000008 	.word	0x20000008
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	4ba0      	ldr	r3, [pc, #640]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a9f      	ldr	r2, [pc, #636]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	4b9d      	ldr	r3, [pc, #628]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a9c      	ldr	r2, [pc, #624]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80067f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d013      	beq.n	800682c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fd fc78 	bl	80040f8 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800680c:	f7fd fc74 	bl	80040f8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e2b4      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800681e:	4b92      	ldr	r3, [pc, #584]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x2a8>
 800682a:	e014      	b.n	8006856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fd fc64 	bl	80040f8 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006834:	f7fd fc60 	bl	80040f8 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	; 0x64
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e2a0      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006846:	4b88      	ldr	r3, [pc, #544]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x2d0>
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d060      	beq.n	8006924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d005      	beq.n	8006874 <HAL_RCC_OscConfig+0x310>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b0c      	cmp	r3, #12
 800686c:	d119      	bne.n	80068a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d116      	bne.n	80068a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006874:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_RCC_OscConfig+0x328>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e27d      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688c:	4b76      	ldr	r3, [pc, #472]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	4973      	ldr	r1, [pc, #460]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a0:	e040      	b.n	8006924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d023      	beq.n	80068f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068aa:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6e      	ldr	r2, [pc, #440]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b6:	f7fd fc1f 	bl	80040f8 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068be:	f7fd fc1b 	bl	80040f8 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e25b      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d0:	4b65      	ldr	r3, [pc, #404]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068dc:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	495f      	ldr	r1, [pc, #380]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	604b      	str	r3, [r1, #4]
 80068f0:	e018      	b.n	8006924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f2:	4b5d      	ldr	r3, [pc, #372]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a5c      	ldr	r2, [pc, #368]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fe:	f7fd fbfb 	bl	80040f8 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006906:	f7fd fbf7 	bl	80040f8 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e237      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006918:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f0      	bne.n	8006906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d03c      	beq.n	80069aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01c      	beq.n	8006972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006938:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693e:	4a4a      	ldr	r2, [pc, #296]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006948:	f7fd fbd6 	bl	80040f8 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006950:	f7fd fbd2 	bl	80040f8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e212      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006962:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ef      	beq.n	8006950 <HAL_RCC_OscConfig+0x3ec>
 8006970:	e01b      	b.n	80069aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006972:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006978:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006982:	f7fd fbb9 	bl	80040f8 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698a:	f7fd fbb5 	bl	80040f8 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e1f5      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800699c:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 800699e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ef      	bne.n	800698a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80a6 	beq.w	8006b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069bc:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80069ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80069ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d2:	6593      	str	r3, [r2, #88]	; 0x58
 80069d4:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e0:	2301      	movs	r3, #1
 80069e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	4b21      	ldr	r3, [pc, #132]	; (8006a6c <HAL_RCC_OscConfig+0x508>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d118      	bne.n	8006a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069f0:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <HAL_RCC_OscConfig+0x508>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <HAL_RCC_OscConfig+0x508>)
 80069f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fc:	f7fd fb7c 	bl	80040f8 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a04:	f7fd fb78 	bl	80040f8 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e1b8      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a16:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <HAL_RCC_OscConfig+0x508>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d108      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4d8>
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	4a0d      	ldr	r2, [pc, #52]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a3a:	e029      	b.n	8006a90 <HAL_RCC_OscConfig+0x52c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b05      	cmp	r3, #5
 8006a42:	d115      	bne.n	8006a70 <HAL_RCC_OscConfig+0x50c>
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a4c:	f043 0304 	orr.w	r3, r3, #4
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5a:	4a03      	ldr	r2, [pc, #12]	; (8006a68 <HAL_RCC_OscConfig+0x504>)
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a64:	e014      	b.n	8006a90 <HAL_RCC_OscConfig+0x52c>
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	40007000 	.word	0x40007000
 8006a70:	4b9d      	ldr	r3, [pc, #628]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	4a9c      	ldr	r2, [pc, #624]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a80:	4b99      	ldr	r3, [pc, #612]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	4a98      	ldr	r2, [pc, #608]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006a88:	f023 0304 	bic.w	r3, r3, #4
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d016      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a98:	f7fd fb2e 	bl	80040f8 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa0:	f7fd fb2a 	bl	80040f8 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e168      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab6:	4b8c      	ldr	r3, [pc, #560]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ed      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x53c>
 8006ac4:	e015      	b.n	8006af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fd fb17 	bl	80040f8 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fd fb13 	bl	80040f8 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e151      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ae4:	4b80      	ldr	r3, [pc, #512]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1ed      	bne.n	8006ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af8:	4b7b      	ldr	r3, [pc, #492]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	4a7a      	ldr	r2, [pc, #488]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d03c      	beq.n	8006b8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01c      	beq.n	8006b52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b18:	4b73      	ldr	r3, [pc, #460]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b1e:	4a72      	ldr	r2, [pc, #456]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b28:	f7fd fae6 	bl	80040f8 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b30:	f7fd fae2 	bl	80040f8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e122      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b42:	4b69      	ldr	r3, [pc, #420]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0ef      	beq.n	8006b30 <HAL_RCC_OscConfig+0x5cc>
 8006b50:	e01b      	b.n	8006b8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b52:	4b65      	ldr	r3, [pc, #404]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b58:	4a63      	ldr	r2, [pc, #396]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fd fac9 	bl	80040f8 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b6a:	f7fd fac5 	bl	80040f8 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e105      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b7c:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ef      	bne.n	8006b6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80f9 	beq.w	8006d86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f040 80cf 	bne.w	8006d3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b9e:	4b52      	ldr	r3, [pc, #328]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f003 0203 	and.w	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d12c      	bne.n	8006c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d123      	bne.n	8006c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d11b      	bne.n	8006c0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d113      	bne.n	8006c0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d109      	bne.n	8006c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	3b01      	subs	r3, #1
 8006c06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d071      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b0c      	cmp	r3, #12
 8006c10:	d068      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c12:	4b35      	ldr	r3, [pc, #212]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c1e:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e0ac      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c2e:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2d      	ldr	r2, [pc, #180]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c3a:	f7fd fa5d 	bl	80040f8 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c42:	f7fd fa59 	bl	80040f8 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e099      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c54:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f0      	bne.n	8006c42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c60:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	4b21      	ldr	r3, [pc, #132]	; (8006cec <HAL_RCC_OscConfig+0x788>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c70:	3a01      	subs	r2, #1
 8006c72:	0112      	lsls	r2, r2, #4
 8006c74:	4311      	orrs	r1, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c7a:	0212      	lsls	r2, r2, #8
 8006c7c:	4311      	orrs	r1, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c82:	0852      	lsrs	r2, r2, #1
 8006c84:	3a01      	subs	r2, #1
 8006c86:	0552      	lsls	r2, r2, #21
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c8e:	0852      	lsrs	r2, r2, #1
 8006c90:	3a01      	subs	r2, #1
 8006c92:	0652      	lsls	r2, r2, #25
 8006c94:	4311      	orrs	r1, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c9a:	06d2      	lsls	r2, r2, #27
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	4912      	ldr	r1, [pc, #72]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ca4:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cbc:	f7fd fa1c 	bl	80040f8 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fd fa18 	bl	80040f8 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e058      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd6:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <HAL_RCC_OscConfig+0x784>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f0      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ce2:	e050      	b.n	8006d86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e04f      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d144      	bne.n	8006d86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cfc:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d08:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d14:	f7fd f9f0 	bl	80040f8 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fd f9ec 	bl	80040f8 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e02c      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x7b8>
 8006d3a:	e024      	b.n	8006d86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b0c      	cmp	r3, #12
 8006d40:	d01f      	beq.n	8006d82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fd f9d3 	bl	80040f8 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d56:	f7fd f9cf 	bl	80040f8 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e00f      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d74:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	4905      	ldr	r1, [pc, #20]	; (8006d90 <HAL_RCC_OscConfig+0x82c>)
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <HAL_RCC_OscConfig+0x830>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60cb      	str	r3, [r1, #12]
 8006d80:	e001      	b.n	8006d86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40021000 	.word	0x40021000
 8006d94:	feeefffc 	.word	0xfeeefffc

08006d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e11d      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006db0:	4b90      	ldr	r3, [pc, #576]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d910      	bls.n	8006de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dbe:	4b8d      	ldr	r3, [pc, #564]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 020f 	bic.w	r2, r3, #15
 8006dc6:	498b      	ldr	r1, [pc, #556]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dce:	4b89      	ldr	r3, [pc, #548]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e105      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	4b81      	ldr	r3, [pc, #516]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d908      	bls.n	8006e0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dfc:	4b7e      	ldr	r3, [pc, #504]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	497b      	ldr	r1, [pc, #492]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d079      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d11e      	bne.n	8006e60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e22:	4b75      	ldr	r3, [pc, #468]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e0dc      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006e32:	f000 fa3b 	bl	80072ac <RCC_GetSysClockFreqFromPLLSource>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4a70      	ldr	r2, [pc, #448]	; (8006ffc <HAL_RCC_ClockConfig+0x264>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d946      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006e3e:	4b6e      	ldr	r3, [pc, #440]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d140      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e4a:	4b6b      	ldr	r3, [pc, #428]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e52:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e035      	b.n	8006ecc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e68:	4b63      	ldr	r3, [pc, #396]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d115      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0b9      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e80:	4b5d      	ldr	r3, [pc, #372]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0ad      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e90:	4b59      	ldr	r3, [pc, #356]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0a5      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006ea0:	f000 f8b4 	bl	800700c <HAL_RCC_GetSysClockFreq>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4a55      	ldr	r2, [pc, #340]	; (8006ffc <HAL_RCC_ClockConfig+0x264>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d90f      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006eac:	4b52      	ldr	r3, [pc, #328]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006eb8:	4b4f      	ldr	r3, [pc, #316]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec0:	4a4d      	ldr	r2, [pc, #308]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ecc:	4b4a      	ldr	r3, [pc, #296]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 0203 	bic.w	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4947      	ldr	r1, [pc, #284]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ede:	f7fd f90b 	bl	80040f8 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee6:	f7fd f907 	bl	80040f8 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e077      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efc:	4b3e      	ldr	r3, [pc, #248]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 020c 	and.w	r2, r3, #12
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d1eb      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d105      	bne.n	8006f20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f14:	4b38      	ldr	r3, [pc, #224]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4a37      	ldr	r2, [pc, #220]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d208      	bcs.n	8006f4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3c:	4b2e      	ldr	r3, [pc, #184]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	492b      	ldr	r1, [pc, #172]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d210      	bcs.n	8006f7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 020f 	bic.w	r2, r3, #15
 8006f64:	4923      	ldr	r1, [pc, #140]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6c:	4b21      	ldr	r3, [pc, #132]	; (8006ff4 <HAL_RCC_ClockConfig+0x25c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d001      	beq.n	8006f7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e036      	b.n	8006fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	4918      	ldr	r1, [pc, #96]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fa8:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4910      	ldr	r1, [pc, #64]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fbc:	f000 f826 	bl	800700c <HAL_RCC_GetSysClockFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <HAL_RCC_ClockConfig+0x260>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	091b      	lsrs	r3, r3, #4
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	490c      	ldr	r1, [pc, #48]	; (8007000 <HAL_RCC_ClockConfig+0x268>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <HAL_RCC_ClockConfig+0x26c>)
 8006fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <HAL_RCC_ClockConfig+0x270>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fc ff4f 	bl	8003e84 <HAL_InitTick>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]

  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40022000 	.word	0x40022000
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	04c4b400 	.word	0x04c4b400
 8007000:	0800a7d0 	.word	0x0800a7d0
 8007004:	20000008 	.word	0x20000008
 8007008:	2000000c 	.word	0x2000000c

0800700c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800701a:	4b3e      	ldr	r3, [pc, #248]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007024:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_GetSysClockFreq+0x34>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b0c      	cmp	r3, #12
 8007038:	d121      	bne.n	800707e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d11e      	bne.n	800707e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007040:	4b34      	ldr	r3, [pc, #208]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800704c:	4b31      	ldr	r3, [pc, #196]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 800704e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	e005      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800705c:	4b2d      	ldr	r3, [pc, #180]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007068:	4a2b      	ldr	r2, [pc, #172]	; (8007118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10d      	bne.n	8007094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b04      	cmp	r3, #4
 8007082:	d102      	bne.n	800708a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <HAL_RCC_GetSysClockFreq+0x110>)
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	e004      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d101      	bne.n	8007094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007090:	4b23      	ldr	r3, [pc, #140]	; (8007120 <HAL_RCC_GetSysClockFreq+0x114>)
 8007092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b0c      	cmp	r3, #12
 8007098:	d134      	bne.n	8007104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800709a:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d003      	beq.n	80070b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d003      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0xac>
 80070b0:	e005      	b.n	80070be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <HAL_RCC_GetSysClockFreq+0x110>)
 80070b4:	617b      	str	r3, [r7, #20]
      break;
 80070b6:	e005      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_RCC_GetSysClockFreq+0x114>)
 80070ba:	617b      	str	r3, [r7, #20]
      break;
 80070bc:	e002      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	617b      	str	r3, [r7, #20]
      break;
 80070c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	091b      	lsrs	r3, r3, #4
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	3301      	adds	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	fb03 f202 	mul.w	r2, r3, r2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_RCC_GetSysClockFreq+0x108>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	0e5b      	lsrs	r3, r3, #25
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	3301      	adds	r3, #1
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007104:	69bb      	ldr	r3, [r7, #24]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3724      	adds	r7, #36	; 0x24
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40021000 	.word	0x40021000
 8007118:	0800a7e8 	.word	0x0800a7e8
 800711c:	00f42400 	.word	0x00f42400
 8007120:	007a1200 	.word	0x007a1200

08007124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <HAL_RCC_GetHCLKFreq+0x14>)
 800712a:	681b      	ldr	r3, [r3, #0]
}
 800712c:	4618      	mov	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000008 	.word	0x20000008

0800713c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007140:	f7ff fff0 	bl	8007124 <HAL_RCC_GetHCLKFreq>
 8007144:	4602      	mov	r2, r0
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007152:	5ccb      	ldrb	r3, [r1, r3]
 8007154:	f003 031f 	and.w	r3, r3, #31
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40021000 	.word	0x40021000
 8007164:	0800a7e0 	.word	0x0800a7e0

08007168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800716c:	f7ff ffda 	bl	8007124 <HAL_RCC_GetHCLKFreq>
 8007170:	4602      	mov	r2, r0
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	0adb      	lsrs	r3, r3, #11
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800717e:	5ccb      	ldrb	r3, [r1, r3]
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40021000 	.word	0x40021000
 8007190:	0800a7e0 	.word	0x0800a7e0

08007194 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220f      	movs	r2, #15
 80071a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_RCC_GetClockConfig+0x5c>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0203 	and.w	r2, r3, #3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RCC_GetClockConfig+0x5c>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <HAL_RCC_GetClockConfig+0x5c>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <HAL_RCC_GetClockConfig+0x5c>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	08db      	lsrs	r3, r3, #3
 80071ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <HAL_RCC_GetClockConfig+0x60>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40021000 	.word	0x40021000
 80071f4:	40022000 	.word	0x40022000

080071f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007204:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007210:	f7ff f8e4 	bl	80063dc <HAL_PWREx_GetVoltageRange>
 8007214:	6178      	str	r0, [r7, #20]
 8007216:	e014      	b.n	8007242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007218:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	6593      	str	r3, [r2, #88]	; 0x58
 8007224:	4b1f      	ldr	r3, [pc, #124]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007230:	f7ff f8d4 	bl	80063dc <HAL_PWREx_GetVoltageRange>
 8007234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007236:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800723c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007248:	d10b      	bne.n	8007262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d913      	bls.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2ba0      	cmp	r3, #160	; 0xa0
 8007254:	d902      	bls.n	800725c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007256:	2302      	movs	r3, #2
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e00d      	b.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800725c:	2301      	movs	r3, #1
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	e00a      	b.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b7f      	cmp	r3, #127	; 0x7f
 8007266:	d902      	bls.n	800726e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007268:	2302      	movs	r3, #2
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	e004      	b.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b70      	cmp	r3, #112	; 0x70
 8007272:	d101      	bne.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007274:	2301      	movs	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 020f 	bic.w	r2, r3, #15
 8007280:	4909      	ldr	r1, [pc, #36]	; (80072a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d001      	beq.n	800729a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40022000 	.word	0x40022000

080072ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072b2:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d00b      	beq.n	80072da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d825      	bhi.n	8007314 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d008      	beq.n	80072e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d11f      	bne.n	8007314 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80072d4:	4b25      	ldr	r3, [pc, #148]	; (800736c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80072d6:	613b      	str	r3, [r7, #16]
    break;
 80072d8:	e01f      	b.n	800731a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80072da:	4b25      	ldr	r3, [pc, #148]	; (8007370 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80072dc:	613b      	str	r3, [r7, #16]
    break;
 80072de:	e01c      	b.n	800731a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d107      	bne.n	80072fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e005      	b.n	8007308 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	091b      	lsrs	r3, r3, #4
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007308:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007310:	613b      	str	r3, [r7, #16]
    break;
 8007312:	e002      	b.n	800731a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
    break;
 8007318:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800731a:	4b13      	ldr	r3, [pc, #76]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	3301      	adds	r3, #1
 8007326:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007328:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	fb03 f202 	mul.w	r2, r3, r2
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	0e5b      	lsrs	r3, r3, #25
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	3301      	adds	r3, #1
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	fbb2 f3f3 	udiv	r3, r2, r3
 8007358:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800735a:	683b      	ldr	r3, [r7, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40021000 	.word	0x40021000
 800736c:	00f42400 	.word	0x00f42400
 8007370:	007a1200 	.word	0x007a1200
 8007374:	0800a7e8 	.word	0x0800a7e8

08007378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007380:	2300      	movs	r3, #0
 8007382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007384:	2300      	movs	r3, #0
 8007386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007390:	2b00      	cmp	r3, #0
 8007392:	d040      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007398:	2b80      	cmp	r3, #128	; 0x80
 800739a:	d02a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d825      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073a0:	2b60      	cmp	r3, #96	; 0x60
 80073a2:	d026      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073a4:	2b60      	cmp	r3, #96	; 0x60
 80073a6:	d821      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d006      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d81d      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d010      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80073b8:	e018      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073ba:	4b89      	ldr	r3, [pc, #548]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4a88      	ldr	r2, [pc, #544]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073c6:	e015      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fb12 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073d8:	e00c      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3320      	adds	r3, #32
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fbfd 	bl	8007be0 <RCCEx_PLLSAI2_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	74fb      	strb	r3, [r7, #19]
      break;
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80073f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073fa:	4b79      	ldr	r3, [pc, #484]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007400:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007408:	4975      	ldr	r1, [pc, #468]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007410:	e001      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007412:	7cfb      	ldrb	r3, [r7, #19]
 8007414:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d047      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742a:	d030      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800742c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007430:	d82a      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007436:	d02a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743c:	d824      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800743e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007442:	d008      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007448:	d81e      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800744e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007452:	d010      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007454:	e018      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007456:	4b62      	ldr	r3, [pc, #392]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4a61      	ldr	r2, [pc, #388]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007462:	e015      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fac4 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007474:	e00c      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3320      	adds	r3, #32
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fbaf 	bl	8007be0 <RCCEx_PLLSAI2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	74fb      	strb	r3, [r7, #19]
      break;
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800748e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007490:	7cfb      	ldrb	r3, [r7, #19]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10b      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007496:	4b52      	ldr	r3, [pc, #328]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800749c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	494e      	ldr	r1, [pc, #312]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80074ac:	e001      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ae:	7cfb      	ldrb	r3, [r7, #19]
 80074b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 809f 	beq.w	80075fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074c0:	2300      	movs	r3, #0
 80074c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074c4:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00d      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074da:	4b41      	ldr	r3, [pc, #260]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	4a40      	ldr	r2, [pc, #256]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e4:	6593      	str	r3, [r2, #88]	; 0x58
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074f2:	2301      	movs	r3, #1
 80074f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074f6:	4b3b      	ldr	r3, [pc, #236]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3a      	ldr	r2, [pc, #232]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80074fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007502:	f7fc fdf9 	bl	80040f8 <HAL_GetTick>
 8007506:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007508:	e009      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750a:	f7fc fdf5 	bl	80040f8 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d902      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	74fb      	strb	r3, [r7, #19]
        break;
 800751c:	e005      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800751e:	4b31      	ldr	r3, [pc, #196]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0ef      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800752a:	7cfb      	ldrb	r3, [r7, #19]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d15b      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007530:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01f      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	429a      	cmp	r2, r3
 800754c:	d019      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007558:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800755a:	4b21      	ldr	r3, [pc, #132]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007560:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800756a:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800757a:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758c:	f7fc fdb4 	bl	80040f8 <HAL_GetTick>
 8007590:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007592:	e00b      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fc fdb0 	bl	80040f8 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d902      	bls.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	74fb      	strb	r3, [r7, #19]
            break;
 80075aa:	e006      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ac:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0ec      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80075ba:	7cfb      	ldrb	r3, [r7, #19]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	4903      	ldr	r1, [pc, #12]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075d8:	e008      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075da:	7cfb      	ldrb	r3, [r7, #19]
 80075dc:	74bb      	strb	r3, [r7, #18]
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80075e0:	40021000 	.word	0x40021000
 80075e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e8:	7cfb      	ldrb	r3, [r7, #19]
 80075ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075ec:	7c7b      	ldrb	r3, [r7, #17]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f2:	4ba0      	ldr	r3, [pc, #640]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	4a9f      	ldr	r2, [pc, #636]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800760a:	4b9a      	ldr	r3, [pc, #616]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f023 0203 	bic.w	r2, r3, #3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	4996      	ldr	r1, [pc, #600]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800762c:	4b91      	ldr	r3, [pc, #580]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	f023 020c 	bic.w	r2, r3, #12
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	498e      	ldr	r1, [pc, #568]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800764e:	4b89      	ldr	r3, [pc, #548]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765c:	4985      	ldr	r1, [pc, #532]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007670:	4b80      	ldr	r3, [pc, #512]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767e:	497d      	ldr	r1, [pc, #500]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007692:	4b78      	ldr	r3, [pc, #480]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a0:	4974      	ldr	r1, [pc, #464]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076b4:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c2:	496c      	ldr	r1, [pc, #432]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076d6:	4b67      	ldr	r3, [pc, #412]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e4:	4963      	ldr	r1, [pc, #396]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076f8:	4b5e      	ldr	r3, [pc, #376]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007706:	495b      	ldr	r1, [pc, #364]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800771a:	4b56      	ldr	r3, [pc, #344]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	4952      	ldr	r1, [pc, #328]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800773c:	4b4d      	ldr	r3, [pc, #308]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	494a      	ldr	r1, [pc, #296]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800775e:	4b45      	ldr	r3, [pc, #276]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	4941      	ldr	r1, [pc, #260]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007780:	4b3c      	ldr	r3, [pc, #240]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007786:	f023 0203 	bic.w	r2, r3, #3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778e:	4939      	ldr	r1, [pc, #228]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d028      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077a2:	4b34      	ldr	r3, [pc, #208]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b0:	4930      	ldr	r1, [pc, #192]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077c0:	d106      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c2:	4b2c      	ldr	r3, [pc, #176]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	4a2b      	ldr	r2, [pc, #172]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077cc:	60d3      	str	r3, [r2, #12]
 80077ce:	e011      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	2101      	movs	r1, #1
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f909 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80077f0:	7cfb      	ldrb	r3, [r7, #19]
 80077f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d04d      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007808:	d108      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800780c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007810:	4a18      	ldr	r2, [pc, #96]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007816:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800781a:	e012      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800781c:	4b15      	ldr	r3, [pc, #84]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800781e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007822:	4a14      	ldr	r2, [pc, #80]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007828:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800783a:	490e      	ldr	r1, [pc, #56]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784a:	d106      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4a08      	ldr	r2, [pc, #32]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007856:	60d3      	str	r3, [r2, #12]
 8007858:	e020      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007862:	d109      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007864:	4b03      	ldr	r3, [pc, #12]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4a02      	ldr	r2, [pc, #8]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800786a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786e:	60d3      	str	r3, [r2, #12]
 8007870:	e014      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007872:	bf00      	nop
 8007874:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007880:	d10c      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	2101      	movs	r1, #1
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f8b5 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007892:	7cfb      	ldrb	r3, [r7, #19]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007898:	7cfb      	ldrb	r3, [r7, #19]
 800789a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d028      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078a8:	4b4a      	ldr	r3, [pc, #296]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b6:	4947      	ldr	r1, [pc, #284]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078c6:	d106      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078c8:	4b42      	ldr	r3, [pc, #264]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4a41      	ldr	r2, [pc, #260]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d2:	60d3      	str	r3, [r2, #12]
 80078d4:	e011      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078de:	d10c      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2101      	movs	r1, #1
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f886 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80078f6:	7cfb      	ldrb	r3, [r7, #19]
 80078f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01e      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007906:	4b33      	ldr	r3, [pc, #204]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007916:	492f      	ldr	r1, [pc, #188]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007928:	d10c      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3304      	adds	r3, #4
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f861 	bl	80079f8 <RCCEx_PLLSAI1_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007940:	7cfb      	ldrb	r3, [r7, #19]
 8007942:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007950:	4b20      	ldr	r3, [pc, #128]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007956:	f023 0204 	bic.w	r2, r3, #4
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007960:	491c      	ldr	r1, [pc, #112]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007974:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800797a:	f023 0218 	bic.w	r2, r3, #24
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007984:	4913      	ldr	r1, [pc, #76]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800799a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800799e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	490a      	ldr	r1, [pc, #40]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40021000 	.word	0x40021000

080079d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079e2:	f043 0304 	orr.w	r3, r3, #4
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40021000 	.word	0x40021000

080079f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a06:	4b72      	ldr	r3, [pc, #456]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00e      	beq.n	8007a30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a12:	4b6f      	ldr	r3, [pc, #444]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0203 	and.w	r2, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d103      	bne.n	8007a2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
       ||
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d142      	bne.n	8007ab0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
 8007a2e:	e03f      	b.n	8007ab0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d018      	beq.n	8007a6a <RCCEx_PLLSAI1_Config+0x72>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d825      	bhi.n	8007a88 <RCCEx_PLLSAI1_Config+0x90>
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d002      	beq.n	8007a46 <RCCEx_PLLSAI1_Config+0x4e>
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d009      	beq.n	8007a58 <RCCEx_PLLSAI1_Config+0x60>
 8007a44:	e020      	b.n	8007a88 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a46:	4b62      	ldr	r3, [pc, #392]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11d      	bne.n	8007a8e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a56:	e01a      	b.n	8007a8e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a58:	4b5d      	ldr	r3, [pc, #372]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d116      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a68:	e013      	b.n	8007a92 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a6a:	4b59      	ldr	r3, [pc, #356]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a76:	4b56      	ldr	r3, [pc, #344]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a86:	e006      	b.n	8007a96 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e004      	b.n	8007a98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a8e:	bf00      	nop
 8007a90:	e002      	b.n	8007a98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a92:	bf00      	nop
 8007a94:	e000      	b.n	8007a98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d108      	bne.n	8007ab0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007a9e:	4b4c      	ldr	r3, [pc, #304]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f023 0203 	bic.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4949      	ldr	r1, [pc, #292]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8086 	bne.w	8007bc4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ab8:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a44      	ldr	r2, [pc, #272]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007abe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac4:	f7fc fb18 	bl	80040f8 <HAL_GetTick>
 8007ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007aca:	e009      	b.n	8007ae0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007acc:	f7fc fb14 	bl	80040f8 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d902      	bls.n	8007ae0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	73fb      	strb	r3, [r7, #15]
        break;
 8007ade:	e005      	b.n	8007aec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ae0:	4b3b      	ldr	r3, [pc, #236]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1ef      	bne.n	8007acc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d168      	bne.n	8007bc4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d113      	bne.n	8007b20 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6892      	ldr	r2, [r2, #8]
 8007b04:	0211      	lsls	r1, r2, #8
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	68d2      	ldr	r2, [r2, #12]
 8007b0a:	06d2      	lsls	r2, r2, #27
 8007b0c:	4311      	orrs	r1, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6852      	ldr	r2, [r2, #4]
 8007b12:	3a01      	subs	r2, #1
 8007b14:	0112      	lsls	r2, r2, #4
 8007b16:	430a      	orrs	r2, r1
 8007b18:	492d      	ldr	r1, [pc, #180]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	610b      	str	r3, [r1, #16]
 8007b1e:	e02d      	b.n	8007b7c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d115      	bne.n	8007b52 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6892      	ldr	r2, [r2, #8]
 8007b32:	0211      	lsls	r1, r2, #8
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6912      	ldr	r2, [r2, #16]
 8007b38:	0852      	lsrs	r2, r2, #1
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	0552      	lsls	r2, r2, #21
 8007b3e:	4311      	orrs	r1, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6852      	ldr	r2, [r2, #4]
 8007b44:	3a01      	subs	r2, #1
 8007b46:	0112      	lsls	r2, r2, #4
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	4921      	ldr	r1, [pc, #132]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	610b      	str	r3, [r1, #16]
 8007b50:	e014      	b.n	8007b7c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6892      	ldr	r2, [r2, #8]
 8007b5e:	0211      	lsls	r1, r2, #8
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6952      	ldr	r2, [r2, #20]
 8007b64:	0852      	lsrs	r2, r2, #1
 8007b66:	3a01      	subs	r2, #1
 8007b68:	0652      	lsls	r2, r2, #25
 8007b6a:	4311      	orrs	r1, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6852      	ldr	r2, [r2, #4]
 8007b70:	3a01      	subs	r2, #1
 8007b72:	0112      	lsls	r2, r2, #4
 8007b74:	430a      	orrs	r2, r1
 8007b76:	4916      	ldr	r1, [pc, #88]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b7c:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b88:	f7fc fab6 	bl	80040f8 <HAL_GetTick>
 8007b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b8e:	e009      	b.n	8007ba4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b90:	f7fc fab2 	bl	80040f8 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d902      	bls.n	8007ba4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba2:	e005      	b.n	8007bb0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0ef      	beq.n	8007b90 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	4904      	ldr	r1, [pc, #16]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	07ff800f 	.word	0x07ff800f
 8007bd8:	ff9f800f 	.word	0xff9f800f
 8007bdc:	f9ff800f 	.word	0xf9ff800f

08007be0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bee:	4b72      	ldr	r3, [pc, #456]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00e      	beq.n	8007c18 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bfa:	4b6f      	ldr	r3, [pc, #444]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0203 	and.w	r2, r3, #3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d103      	bne.n	8007c12 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d142      	bne.n	8007c98 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e03f      	b.n	8007c98 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d018      	beq.n	8007c52 <RCCEx_PLLSAI2_Config+0x72>
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d825      	bhi.n	8007c70 <RCCEx_PLLSAI2_Config+0x90>
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d002      	beq.n	8007c2e <RCCEx_PLLSAI2_Config+0x4e>
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d009      	beq.n	8007c40 <RCCEx_PLLSAI2_Config+0x60>
 8007c2c:	e020      	b.n	8007c70 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c2e:	4b62      	ldr	r3, [pc, #392]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d11d      	bne.n	8007c76 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c3e:	e01a      	b.n	8007c76 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c40:	4b5d      	ldr	r3, [pc, #372]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d116      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c50:	e013      	b.n	8007c7a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c52:	4b59      	ldr	r3, [pc, #356]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10f      	bne.n	8007c7e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c5e:	4b56      	ldr	r3, [pc, #344]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c6e:	e006      	b.n	8007c7e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
      break;
 8007c74:	e004      	b.n	8007c80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007c86:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f023 0203 	bic.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4949      	ldr	r1, [pc, #292]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8086 	bne.w	8007dac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ca0:	4b45      	ldr	r3, [pc, #276]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a44      	ldr	r2, [pc, #272]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cac:	f7fc fa24 	bl	80040f8 <HAL_GetTick>
 8007cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cb2:	e009      	b.n	8007cc8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cb4:	f7fc fa20 	bl	80040f8 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d902      	bls.n	8007cc8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8007cc6:	e005      	b.n	8007cd4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cc8:	4b3b      	ldr	r3, [pc, #236]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1ef      	bne.n	8007cb4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d168      	bne.n	8007dac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d113      	bne.n	8007d08 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ce0:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1dc>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6892      	ldr	r2, [r2, #8]
 8007cec:	0211      	lsls	r1, r2, #8
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68d2      	ldr	r2, [r2, #12]
 8007cf2:	06d2      	lsls	r2, r2, #27
 8007cf4:	4311      	orrs	r1, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6852      	ldr	r2, [r2, #4]
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	0112      	lsls	r2, r2, #4
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	492d      	ldr	r1, [pc, #180]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	614b      	str	r3, [r1, #20]
 8007d06:	e02d      	b.n	8007d64 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d115      	bne.n	8007d3a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d0e:	4b2a      	ldr	r3, [pc, #168]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d10:	695a      	ldr	r2, [r3, #20]
 8007d12:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6892      	ldr	r2, [r2, #8]
 8007d1a:	0211      	lsls	r1, r2, #8
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6912      	ldr	r2, [r2, #16]
 8007d20:	0852      	lsrs	r2, r2, #1
 8007d22:	3a01      	subs	r2, #1
 8007d24:	0552      	lsls	r2, r2, #21
 8007d26:	4311      	orrs	r1, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6852      	ldr	r2, [r2, #4]
 8007d2c:	3a01      	subs	r2, #1
 8007d2e:	0112      	lsls	r2, r2, #4
 8007d30:	430a      	orrs	r2, r1
 8007d32:	4921      	ldr	r1, [pc, #132]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	614b      	str	r3, [r1, #20]
 8007d38:	e014      	b.n	8007d64 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d3a:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d3c:	695a      	ldr	r2, [r3, #20]
 8007d3e:	4b21      	ldr	r3, [pc, #132]	; (8007dc4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6892      	ldr	r2, [r2, #8]
 8007d46:	0211      	lsls	r1, r2, #8
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6952      	ldr	r2, [r2, #20]
 8007d4c:	0852      	lsrs	r2, r2, #1
 8007d4e:	3a01      	subs	r2, #1
 8007d50:	0652      	lsls	r2, r2, #25
 8007d52:	4311      	orrs	r1, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6852      	ldr	r2, [r2, #4]
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	0112      	lsls	r2, r2, #4
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	4916      	ldr	r1, [pc, #88]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d70:	f7fc f9c2 	bl	80040f8 <HAL_GetTick>
 8007d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d76:	e009      	b.n	8007d8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d78:	f7fc f9be 	bl	80040f8 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d902      	bls.n	8007d8c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	73fb      	strb	r3, [r7, #15]
          break;
 8007d8a:	e005      	b.n	8007d98 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ef      	beq.n	8007d78 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	4904      	ldr	r1, [pc, #16]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	07ff800f 	.word	0x07ff800f
 8007dc0:	ff9f800f 	.word	0xff9f800f
 8007dc4:	f9ff800f 	.word	0xf9ff800f

08007dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e095      	b.n	8007f06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dea:	d009      	beq.n	8007e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
 8007df2:	e005      	b.n	8007e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fb fe8a 	bl	8003b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e40:	d902      	bls.n	8007e48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	e002      	b.n	8007e4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e56:	d007      	beq.n	8007e68 <HAL_SPI_Init+0xa0>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	ea42 0103 	orr.w	r1, r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	f003 0204 	and.w	r2, r3, #4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ee4:	ea42 0103 	orr.w	r1, r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e049      	b.n	8007fb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f841 	bl	8007fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f000 f9d9 	bl	8008304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d001      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e04f      	b.n	8008088 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <HAL_TIM_Base_Start_IT+0xc4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d01d      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008012:	d018      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1f      	ldr	r2, [pc, #124]	; (8008098 <HAL_TIM_Base_Start_IT+0xc8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d013      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a1e      	ldr	r2, [pc, #120]	; (800809c <HAL_TIM_Base_Start_IT+0xcc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00e      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1c      	ldr	r2, [pc, #112]	; (80080a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d009      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d004      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x76>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a19      	ldr	r2, [pc, #100]	; (80080a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d115      	bne.n	8008072 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	4b17      	ldr	r3, [pc, #92]	; (80080ac <HAL_TIM_Base_Start_IT+0xdc>)
 800804e:	4013      	ands	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b06      	cmp	r3, #6
 8008056:	d015      	beq.n	8008084 <HAL_TIM_Base_Start_IT+0xb4>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d011      	beq.n	8008084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	e008      	b.n	8008084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e000      	b.n	8008086 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	40012c00 	.word	0x40012c00
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40013400 	.word	0x40013400
 80080a8:	40014000 	.word	0x40014000
 80080ac:	00010007 	.word	0x00010007

080080b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d020      	beq.n	8008114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0202 	mvn.w	r2, #2
 80080e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8e4 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8d6 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8e7 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d020      	beq.n	8008160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0204 	mvn.w	r2, #4
 8008130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f8be 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 800814c:	e005      	b.n	800815a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8b0 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f8c1 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01b      	beq.n	80081ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0208 	mvn.w	r2, #8
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f898 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f88a 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f89b 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0210 	mvn.w	r2, #16
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2208      	movs	r2, #8
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f872 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f864 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f875 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00c      	beq.n	800821c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0201 	mvn.w	r2, #1
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fb fa9e 	bl	8003758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f906 	bl	800844c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800825c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8fe 	bl	8008460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f834 	bl	80082f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00c      	beq.n	80082ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0220 	mvn.w	r2, #32
 80082a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8c6 	bl	8008438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a40      	ldr	r2, [pc, #256]	; (8008418 <TIM_Base_SetConfig+0x114>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d013      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008322:	d00f      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a3d      	ldr	r2, [pc, #244]	; (800841c <TIM_Base_SetConfig+0x118>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00b      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a3c      	ldr	r2, [pc, #240]	; (8008420 <TIM_Base_SetConfig+0x11c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d007      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a3b      	ldr	r2, [pc, #236]	; (8008424 <TIM_Base_SetConfig+0x120>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3a      	ldr	r2, [pc, #232]	; (8008428 <TIM_Base_SetConfig+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d108      	bne.n	8008356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2f      	ldr	r2, [pc, #188]	; (8008418 <TIM_Base_SetConfig+0x114>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d01f      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008364:	d01b      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2c      	ldr	r2, [pc, #176]	; (800841c <TIM_Base_SetConfig+0x118>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d017      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <TIM_Base_SetConfig+0x11c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <TIM_Base_SetConfig+0x120>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00f      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a29      	ldr	r2, [pc, #164]	; (8008428 <TIM_Base_SetConfig+0x124>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00b      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a28      	ldr	r2, [pc, #160]	; (800842c <TIM_Base_SetConfig+0x128>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a27      	ldr	r2, [pc, #156]	; (8008430 <TIM_Base_SetConfig+0x12c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d003      	beq.n	800839e <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a26      	ldr	r2, [pc, #152]	; (8008434 <TIM_Base_SetConfig+0x130>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d108      	bne.n	80083b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a10      	ldr	r2, [pc, #64]	; (8008418 <TIM_Base_SetConfig+0x114>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_Base_SetConfig+0xf8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a12      	ldr	r2, [pc, #72]	; (8008428 <TIM_Base_SetConfig+0x124>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_Base_SetConfig+0xf8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a11      	ldr	r2, [pc, #68]	; (800842c <TIM_Base_SetConfig+0x128>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_Base_SetConfig+0xf8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a10      	ldr	r2, [pc, #64]	; (8008430 <TIM_Base_SetConfig+0x12c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_Base_SetConfig+0xf8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a0f      	ldr	r2, [pc, #60]	; (8008434 <TIM_Base_SetConfig+0x130>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	615a      	str	r2, [r3, #20]
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40000c00 	.word	0x40000c00
 8008428:	40013400 	.word	0x40013400
 800842c:	40014000 	.word	0x40014000
 8008430:	40014400 	.word	0x40014400
 8008434:	40014800 	.word	0x40014800

08008438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e042      	b.n	800850c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7fb fbc1 	bl	8003c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2224      	movs	r2, #36	; 0x24
 80084a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 ff44 	bl	800934c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc45 	bl	8008d54 <UART_SetConfig>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e01b      	b.n	800850c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ffc3 	bl	8009490 <UART_CheckIdleState>
 800850a:	4603      	mov	r3, r0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08a      	sub	sp, #40	; 0x28
 8008518:	af02      	add	r7, sp, #8
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852a:	2b20      	cmp	r3, #32
 800852c:	d17c      	bne.n	8008628 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_UART_Transmit+0x26>
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e075      	b.n	800862a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2221      	movs	r2, #33	; 0x21
 800854a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800854e:	f7fb fdd3 	bl	80040f8 <HAL_GetTick>
 8008552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	88fa      	ldrh	r2, [r7, #6]
 8008560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856c:	d108      	bne.n	8008580 <HAL_UART_Transmit+0x6c>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e003      	b.n	8008588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008588:	e031      	b.n	80085ee <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2200      	movs	r2, #0
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f001 f825 	bl	80095e4 <UART_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e03e      	b.n	800862a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	881a      	ldrh	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085be:	b292      	uxth	r2, r2
 80085c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	3302      	adds	r3, #2
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	e008      	b.n	80085dc <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	b292      	uxth	r2, r2
 80085d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	3301      	adds	r3, #1
 80085da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1c7      	bne.n	800858a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2200      	movs	r2, #0
 8008602:	2140      	movs	r1, #64	; 0x40
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 ffed 	bl	80095e4 <UART_WaitOnFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e006      	b.n	800862a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e000      	b.n	800862a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
  }
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008648:	2b20      	cmp	r3, #32
 800864a:	d137      	bne.n	80086bc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_UART_Receive_IT+0x24>
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e030      	b.n	80086be <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <HAL_UART_Receive_IT+0x94>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d01f      	beq.n	80086ac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e6      	bne.n	800867a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	461a      	mov	r2, r3
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fffe 	bl	80096b4 <UART_Start_Receive_IT>
 80086b8:	4603      	mov	r3, r0
 80086ba:	e000      	b.n	80086be <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086bc:	2302      	movs	r3, #2
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3728      	adds	r7, #40	; 0x28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40008000 	.word	0x40008000

080086cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b0ba      	sub	sp, #232	; 0xe8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80086f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80086fa:	4013      	ands	r3, r2
 80086fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11b      	bne.n	8008740 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d015      	beq.n	8008740 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d009      	beq.n	8008740 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 82e3 	beq.w	8008cfc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
      }
      return;
 800873e:	e2dd      	b.n	8008cfc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8123 	beq.w	8008990 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800874a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800874e:	4b8d      	ldr	r3, [pc, #564]	; (8008984 <HAL_UART_IRQHandler+0x2b8>)
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800875a:	4b8b      	ldr	r3, [pc, #556]	; (8008988 <HAL_UART_IRQHandler+0x2bc>)
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8116 	beq.w	8008990 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d011      	beq.n	8008794 <HAL_UART_IRQHandler+0xc8>
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878a:	f043 0201 	orr.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d011      	beq.n	80087c4 <HAL_UART_IRQHandler+0xf8>
 80087a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2202      	movs	r2, #2
 80087b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ba:	f043 0204 	orr.w	r2, r3, #4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d011      	beq.n	80087f4 <HAL_UART_IRQHandler+0x128>
 80087d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2204      	movs	r2, #4
 80087e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	f043 0202 	orr.w	r2, r3, #2
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	f003 0308 	and.w	r3, r3, #8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d017      	beq.n	8008830 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	2b00      	cmp	r3, #0
 800880a:	d105      	bne.n	8008818 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800880c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008810:	4b5c      	ldr	r3, [pc, #368]	; (8008984 <HAL_UART_IRQHandler+0x2b8>)
 8008812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2208      	movs	r2, #8
 800881e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008826:	f043 0208 	orr.w	r2, r3, #8
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <HAL_UART_IRQHandler+0x196>
 800883c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8249 	beq.w	8008d00 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	d013      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800887a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	d005      	beq.n	80088c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d054      	beq.n	8008970 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f816 	bl	80098f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d146      	bne.n	8008968 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800890a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800891e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1d9      	bne.n	80088da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	2b00      	cmp	r3, #0
 800892e:	d017      	beq.n	8008960 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008936:	4a15      	ldr	r2, [pc, #84]	; (800898c <HAL_UART_IRQHandler+0x2c0>)
 8008938:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008940:	4618      	mov	r0, r3
 8008942:	f7fc fd11 	bl	8005368 <HAL_DMA_Abort_IT>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d019      	beq.n	8008980 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800895a:	4610      	mov	r0, r2
 800895c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895e:	e00f      	b.n	8008980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9e1 	bl	8008d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008966:	e00b      	b.n	8008980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f9dd 	bl	8008d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896e:	e007      	b.n	8008980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9d9 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800897e:	e1bf      	b.n	8008d00 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	bf00      	nop
    return;
 8008982:	e1bd      	b.n	8008d00 <HAL_UART_IRQHandler+0x634>
 8008984:	10000001 	.word	0x10000001
 8008988:	04000120 	.word	0x04000120
 800898c:	080099c5 	.word	0x080099c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008994:	2b01      	cmp	r3, #1
 8008996:	f040 8153 	bne.w	8008c40 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 814c 	beq.w	8008c40 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8145 	beq.w	8008c40 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2210      	movs	r2, #16
 80089bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	f040 80bb 	bne.w	8008b44 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 818f 	beq.w	8008d04 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089f0:	429a      	cmp	r2, r3
 80089f2:	f080 8187 	bcs.w	8008d04 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8087 	bne.w	8008b22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1da      	bne.n	8008a14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e1      	bne.n	8008a5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e3      	bne.n	8008a9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af0:	f023 0310 	bic.w	r3, r3, #16
 8008af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e4      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fc fbc7 	bl	80052b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f8fd 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b42:	e0df      	b.n	8008d04 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80d1 	beq.w	8008d08 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80cc 	beq.w	8008d08 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b92:	647b      	str	r3, [r7, #68]	; 0x44
 8008b94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e4      	bne.n	8008b70 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bbc:	f023 0301 	bic.w	r3, r3, #1
 8008bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bce:	633a      	str	r2, [r7, #48]	; 0x30
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e1      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0310 	bic.w	r3, r3, #16
 8008c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	69b9      	ldr	r1, [r7, #24]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	617b      	str	r3, [r7, #20]
   return(result);
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e4      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f87f 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c3e:	e063      	b.n	8008d08 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00e      	beq.n	8008c6a <HAL_UART_IRQHandler+0x59e>
 8008c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fc14 	bl	800a490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c68:	e051      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d014      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d03a      	beq.n	8008d0c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
    }
    return;
 8008c9e:	e035      	b.n	8008d0c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x5f4>
 8008cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fe99 	bl	80099f0 <UART_EndTransmit_IT>
    return;
 8008cbe:	e026      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x614>
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 fbed 	bl	800a4b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cde:	e016      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d010      	beq.n	8008d0e <HAL_UART_IRQHandler+0x642>
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da0c      	bge.n	8008d0e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fbd5 	bl	800a4a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cfa:	e008      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
      return;
 8008cfc:	bf00      	nop
 8008cfe:	e006      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
    return;
 8008d00:	bf00      	nop
 8008d02:	e004      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
      return;
 8008d04:	bf00      	nop
 8008d06:	e002      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
      return;
 8008d08:	bf00      	nop
 8008d0a:	e000      	b.n	8008d0e <HAL_UART_IRQHandler+0x642>
    return;
 8008d0c:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008d0e:	37e8      	adds	r7, #232	; 0xe8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d58:	b08c      	sub	sp, #48	; 0x30
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4baa      	ldr	r3, [pc, #680]	; (800902c <UART_SetConfig+0x2d8>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a9f      	ldr	r2, [pc, #636]	; (8009030 <UART_SetConfig+0x2dc>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008dca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	f023 010f 	bic.w	r1, r3, #15
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a90      	ldr	r2, [pc, #576]	; (8009034 <UART_SetConfig+0x2e0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d125      	bne.n	8008e44 <UART_SetConfig+0xf0>
 8008df8:	4b8f      	ldr	r3, [pc, #572]	; (8009038 <UART_SetConfig+0x2e4>)
 8008dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d81a      	bhi.n	8008e3c <UART_SetConfig+0xe8>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <UART_SetConfig+0xb8>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e2d 	.word	0x08008e2d
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e116      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008e24:	2302      	movs	r3, #2
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e2a:	e112      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e32:	e10e      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008e34:	2308      	movs	r3, #8
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e3a:	e10a      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e42:	e106      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a7c      	ldr	r2, [pc, #496]	; (800903c <UART_SetConfig+0x2e8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d138      	bne.n	8008ec0 <UART_SetConfig+0x16c>
 8008e4e:	4b7a      	ldr	r3, [pc, #488]	; (8009038 <UART_SetConfig+0x2e4>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f003 030c 	and.w	r3, r3, #12
 8008e58:	2b0c      	cmp	r3, #12
 8008e5a:	d82d      	bhi.n	8008eb8 <UART_SetConfig+0x164>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <UART_SetConfig+0x110>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008eb9 	.word	0x08008eb9
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008ea9 	.word	0x08008ea9
 8008e78:	08008eb9 	.word	0x08008eb9
 8008e7c:	08008eb9 	.word	0x08008eb9
 8008e80:	08008eb9 	.word	0x08008eb9
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008eb9 	.word	0x08008eb9
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008eb9 	.word	0x08008eb9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9e:	e0d8      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea6:	e0d4      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eae:	e0d0      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb6:	e0cc      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebe:	e0c8      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a5e      	ldr	r2, [pc, #376]	; (8009040 <UART_SetConfig+0x2ec>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d125      	bne.n	8008f16 <UART_SetConfig+0x1c2>
 8008eca:	4b5b      	ldr	r3, [pc, #364]	; (8009038 <UART_SetConfig+0x2e4>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ed4:	2b30      	cmp	r3, #48	; 0x30
 8008ed6:	d016      	beq.n	8008f06 <UART_SetConfig+0x1b2>
 8008ed8:	2b30      	cmp	r3, #48	; 0x30
 8008eda:	d818      	bhi.n	8008f0e <UART_SetConfig+0x1ba>
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	d00a      	beq.n	8008ef6 <UART_SetConfig+0x1a2>
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d814      	bhi.n	8008f0e <UART_SetConfig+0x1ba>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <UART_SetConfig+0x19a>
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	d008      	beq.n	8008efe <UART_SetConfig+0x1aa>
 8008eec:	e00f      	b.n	8008f0e <UART_SetConfig+0x1ba>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ef4:	e0ad      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008efc:	e0a9      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008efe:	2304      	movs	r3, #4
 8008f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f04:	e0a5      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f06:	2308      	movs	r3, #8
 8008f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f0c:	e0a1      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f0e:	2310      	movs	r3, #16
 8008f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f14:	e09d      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a4a      	ldr	r2, [pc, #296]	; (8009044 <UART_SetConfig+0x2f0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d125      	bne.n	8008f6c <UART_SetConfig+0x218>
 8008f20:	4b45      	ldr	r3, [pc, #276]	; (8009038 <UART_SetConfig+0x2e4>)
 8008f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f2c:	d016      	beq.n	8008f5c <UART_SetConfig+0x208>
 8008f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8008f30:	d818      	bhi.n	8008f64 <UART_SetConfig+0x210>
 8008f32:	2b80      	cmp	r3, #128	; 0x80
 8008f34:	d00a      	beq.n	8008f4c <UART_SetConfig+0x1f8>
 8008f36:	2b80      	cmp	r3, #128	; 0x80
 8008f38:	d814      	bhi.n	8008f64 <UART_SetConfig+0x210>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <UART_SetConfig+0x1f0>
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d008      	beq.n	8008f54 <UART_SetConfig+0x200>
 8008f42:	e00f      	b.n	8008f64 <UART_SetConfig+0x210>
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f4a:	e082      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f52:	e07e      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f5a:	e07a      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f62:	e076      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f6a:	e072      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a35      	ldr	r2, [pc, #212]	; (8009048 <UART_SetConfig+0x2f4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d12a      	bne.n	8008fcc <UART_SetConfig+0x278>
 8008f76:	4b30      	ldr	r3, [pc, #192]	; (8009038 <UART_SetConfig+0x2e4>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f84:	d01a      	beq.n	8008fbc <UART_SetConfig+0x268>
 8008f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f8a:	d81b      	bhi.n	8008fc4 <UART_SetConfig+0x270>
 8008f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f90:	d00c      	beq.n	8008fac <UART_SetConfig+0x258>
 8008f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f96:	d815      	bhi.n	8008fc4 <UART_SetConfig+0x270>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <UART_SetConfig+0x250>
 8008f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa0:	d008      	beq.n	8008fb4 <UART_SetConfig+0x260>
 8008fa2:	e00f      	b.n	8008fc4 <UART_SetConfig+0x270>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008faa:	e052      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008fac:	2302      	movs	r3, #2
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fb2:	e04e      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fba:	e04a      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fc2:	e046      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fca:	e042      	b.n	8009052 <UART_SetConfig+0x2fe>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a17      	ldr	r2, [pc, #92]	; (8009030 <UART_SetConfig+0x2dc>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d13a      	bne.n	800904c <UART_SetConfig+0x2f8>
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <UART_SetConfig+0x2e4>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fe4:	d01a      	beq.n	800901c <UART_SetConfig+0x2c8>
 8008fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fea:	d81b      	bhi.n	8009024 <UART_SetConfig+0x2d0>
 8008fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff0:	d00c      	beq.n	800900c <UART_SetConfig+0x2b8>
 8008ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff6:	d815      	bhi.n	8009024 <UART_SetConfig+0x2d0>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <UART_SetConfig+0x2b0>
 8008ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009000:	d008      	beq.n	8009014 <UART_SetConfig+0x2c0>
 8009002:	e00f      	b.n	8009024 <UART_SetConfig+0x2d0>
 8009004:	2300      	movs	r3, #0
 8009006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800900a:	e022      	b.n	8009052 <UART_SetConfig+0x2fe>
 800900c:	2302      	movs	r3, #2
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009012:	e01e      	b.n	8009052 <UART_SetConfig+0x2fe>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800901a:	e01a      	b.n	8009052 <UART_SetConfig+0x2fe>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009022:	e016      	b.n	8009052 <UART_SetConfig+0x2fe>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800902a:	e012      	b.n	8009052 <UART_SetConfig+0x2fe>
 800902c:	cfff69f3 	.word	0xcfff69f3
 8009030:	40008000 	.word	0x40008000
 8009034:	40013800 	.word	0x40013800
 8009038:	40021000 	.word	0x40021000
 800903c:	40004400 	.word	0x40004400
 8009040:	40004800 	.word	0x40004800
 8009044:	40004c00 	.word	0x40004c00
 8009048:	40005000 	.word	0x40005000
 800904c:	2310      	movs	r3, #16
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4aae      	ldr	r2, [pc, #696]	; (8009310 <UART_SetConfig+0x5bc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	f040 8097 	bne.w	800918c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800905e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009062:	2b08      	cmp	r3, #8
 8009064:	d823      	bhi.n	80090ae <UART_SetConfig+0x35a>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x318>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	08009091 	.word	0x08009091
 8009070:	080090af 	.word	0x080090af
 8009074:	08009099 	.word	0x08009099
 8009078:	080090af 	.word	0x080090af
 800907c:	0800909f 	.word	0x0800909f
 8009080:	080090af 	.word	0x080090af
 8009084:	080090af 	.word	0x080090af
 8009088:	080090af 	.word	0x080090af
 800908c:	080090a7 	.word	0x080090a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009090:	f7fe f854 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009096:	e010      	b.n	80090ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009098:	4b9e      	ldr	r3, [pc, #632]	; (8009314 <UART_SetConfig+0x5c0>)
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800909c:	e00d      	b.n	80090ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909e:	f7fd ffb5 	bl	800700c <HAL_RCC_GetSysClockFreq>
 80090a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090a4:	e009      	b.n	80090ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090ac:	e005      	b.n	80090ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8130 	beq.w	8009322 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	4a94      	ldr	r2, [pc, #592]	; (8009318 <UART_SetConfig+0x5c4>)
 80090c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	4613      	mov	r3, r2
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	4413      	add	r3, r2
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d305      	bcc.n	80090f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d903      	bls.n	80090fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090f8:	e113      	b.n	8009322 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	2200      	movs	r2, #0
 80090fe:	60bb      	str	r3, [r7, #8]
 8009100:	60fa      	str	r2, [r7, #12]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	4a84      	ldr	r2, [pc, #528]	; (8009318 <UART_SetConfig+0x5c4>)
 8009108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800910c:	b29b      	uxth	r3, r3
 800910e:	2200      	movs	r2, #0
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800911c:	f7f7 f878 	bl	8000210 <__aeabi_uldivmod>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4610      	mov	r0, r2
 8009126:	4619      	mov	r1, r3
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	020b      	lsls	r3, r1, #8
 8009132:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009136:	0202      	lsls	r2, r0, #8
 8009138:	6979      	ldr	r1, [r7, #20]
 800913a:	6849      	ldr	r1, [r1, #4]
 800913c:	0849      	lsrs	r1, r1, #1
 800913e:	2000      	movs	r0, #0
 8009140:	460c      	mov	r4, r1
 8009142:	4605      	mov	r5, r0
 8009144:	eb12 0804 	adds.w	r8, r2, r4
 8009148:	eb43 0905 	adc.w	r9, r3, r5
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	469a      	mov	sl, r3
 8009154:	4693      	mov	fp, r2
 8009156:	4652      	mov	r2, sl
 8009158:	465b      	mov	r3, fp
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 f857 	bl	8000210 <__aeabi_uldivmod>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4613      	mov	r3, r2
 8009168:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009170:	d308      	bcc.n	8009184 <UART_SetConfig+0x430>
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009178:	d204      	bcs.n	8009184 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6a3a      	ldr	r2, [r7, #32]
 8009180:	60da      	str	r2, [r3, #12]
 8009182:	e0ce      	b.n	8009322 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800918a:	e0ca      	b.n	8009322 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009194:	d166      	bne.n	8009264 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800919a:	2b08      	cmp	r3, #8
 800919c:	d827      	bhi.n	80091ee <UART_SetConfig+0x49a>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <UART_SetConfig+0x450>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091c9 	.word	0x080091c9
 80091a8:	080091d1 	.word	0x080091d1
 80091ac:	080091d9 	.word	0x080091d9
 80091b0:	080091ef 	.word	0x080091ef
 80091b4:	080091df 	.word	0x080091df
 80091b8:	080091ef 	.word	0x080091ef
 80091bc:	080091ef 	.word	0x080091ef
 80091c0:	080091ef 	.word	0x080091ef
 80091c4:	080091e7 	.word	0x080091e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091c8:	f7fd ffb8 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 80091cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091ce:	e014      	b.n	80091fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d0:	f7fd ffca 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
 80091d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091d6:	e010      	b.n	80091fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091d8:	4b4e      	ldr	r3, [pc, #312]	; (8009314 <UART_SetConfig+0x5c0>)
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091dc:	e00d      	b.n	80091fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091de:	f7fd ff15 	bl	800700c <HAL_RCC_GetSysClockFreq>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091e4:	e009      	b.n	80091fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091ec:	e005      	b.n	80091fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8090 	beq.w	8009322 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	4a44      	ldr	r2, [pc, #272]	; (8009318 <UART_SetConfig+0x5c4>)
 8009208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800920c:	461a      	mov	r2, r3
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	fbb3 f3f2 	udiv	r3, r3, r2
 8009214:	005a      	lsls	r2, r3, #1
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	085b      	lsrs	r3, r3, #1
 800921c:	441a      	add	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	fbb2 f3f3 	udiv	r3, r2, r3
 8009226:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	2b0f      	cmp	r3, #15
 800922c:	d916      	bls.n	800925c <UART_SetConfig+0x508>
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d212      	bcs.n	800925c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f023 030f 	bic.w	r3, r3, #15
 800923e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	b29b      	uxth	r3, r3
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	b29a      	uxth	r2, r3
 800924c:	8bfb      	ldrh	r3, [r7, #30]
 800924e:	4313      	orrs	r3, r2
 8009250:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	8bfa      	ldrh	r2, [r7, #30]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	e062      	b.n	8009322 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009262:	e05e      	b.n	8009322 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009268:	2b08      	cmp	r3, #8
 800926a:	d828      	bhi.n	80092be <UART_SetConfig+0x56a>
 800926c:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <UART_SetConfig+0x520>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	08009299 	.word	0x08009299
 8009278:	080092a1 	.word	0x080092a1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	080092bf 	.word	0x080092bf
 8009284:	080092af 	.word	0x080092af
 8009288:	080092bf 	.word	0x080092bf
 800928c:	080092bf 	.word	0x080092bf
 8009290:	080092bf 	.word	0x080092bf
 8009294:	080092b7 	.word	0x080092b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009298:	f7fd ff50 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 800929c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800929e:	e014      	b.n	80092ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092a0:	f7fd ff62 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
 80092a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092a6:	e010      	b.n	80092ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092a8:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <UART_SetConfig+0x5c0>)
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092ac:	e00d      	b.n	80092ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ae:	f7fd fead 	bl	800700c <HAL_RCC_GetSysClockFreq>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092b4:	e009      	b.n	80092ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092bc:	e005      	b.n	80092ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80092c8:	bf00      	nop
    }

    if (pclk != 0U)
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d028      	beq.n	8009322 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	4a10      	ldr	r2, [pc, #64]	; (8009318 <UART_SetConfig+0x5c4>)
 80092d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092da:	461a      	mov	r2, r3
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	fbb3 f2f2 	udiv	r2, r3, r2
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	085b      	lsrs	r3, r3, #1
 80092e8:	441a      	add	r2, r3
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	2b0f      	cmp	r3, #15
 80092f8:	d910      	bls.n	800931c <UART_SetConfig+0x5c8>
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009300:	d20c      	bcs.n	800931c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	b29a      	uxth	r2, r3
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60da      	str	r2, [r3, #12]
 800930c:	e009      	b.n	8009322 <UART_SetConfig+0x5ce>
 800930e:	bf00      	nop
 8009310:	40008000 	.word	0x40008000
 8009314:	00f42400 	.word	0x00f42400
 8009318:	0800a818 	.word	0x0800a818
      }
      else
      {
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2201      	movs	r2, #1
 8009326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2201      	movs	r2, #1
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2200      	movs	r2, #0
 8009336:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2200      	movs	r2, #0
 800933c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800933e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009342:	4618      	mov	r0, r3
 8009344:	3730      	adds	r7, #48	; 0x30
 8009346:	46bd      	mov	sp, r7
 8009348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800934c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00a      	beq.n	8009398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	f003 0304 	and.w	r3, r3, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01a      	beq.n	8009462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800944a:	d10a      	bne.n	8009462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	605a      	str	r2, [r3, #4]
  }
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b098      	sub	sp, #96	; 0x60
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094a0:	f7fa fe2a 	bl	80040f8 <HAL_GetTick>
 80094a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d12f      	bne.n	8009514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094bc:	2200      	movs	r2, #0
 80094be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f88e 	bl	80095e4 <UART_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d022      	beq.n	8009514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094e2:	653b      	str	r3, [r7, #80]	; 0x50
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ec:	647b      	str	r3, [r7, #68]	; 0x44
 80094ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e063      	b.n	80095dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	2b04      	cmp	r3, #4
 8009520:	d149      	bne.n	80095b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952a:	2200      	movs	r2, #0
 800952c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f857 	bl	80095e4 <UART_WaitOnFlagUntilTimeout>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d03c      	beq.n	80095b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	623b      	str	r3, [r7, #32]
   return(result);
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955a:	633b      	str	r3, [r7, #48]	; 0x30
 800955c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e6      	bne.n	800953c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3308      	adds	r3, #8
 8009574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	60fb      	str	r3, [r7, #12]
   return(result);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f023 0301 	bic.w	r3, r3, #1
 8009584:	64bb      	str	r3, [r7, #72]	; 0x48
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958e:	61fa      	str	r2, [r7, #28]
 8009590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009592:	69b9      	ldr	r1, [r7, #24]
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	e841 2300 	strex	r3, r2, [r1]
 800959a:	617b      	str	r3, [r7, #20]
   return(result);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1e5      	bne.n	800956e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e012      	b.n	80095dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3758      	adds	r7, #88	; 0x58
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	4613      	mov	r3, r2
 80095f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f4:	e049      	b.n	800968a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d045      	beq.n	800968a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fe:	f7fa fd7b 	bl	80040f8 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	429a      	cmp	r2, r3
 800960c:	d302      	bcc.n	8009614 <UART_WaitOnFlagUntilTimeout+0x30>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e048      	b.n	80096aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d031      	beq.n	800968a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b08      	cmp	r3, #8
 8009632:	d110      	bne.n	8009656 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2208      	movs	r2, #8
 800963a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f95b 	bl	80098f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2208      	movs	r2, #8
 8009646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e029      	b.n	80096aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009664:	d111      	bne.n	800968a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800966e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f941 	bl	80098f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2220      	movs	r2, #32
 800967a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e00f      	b.n	80096aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4013      	ands	r3, r2
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	429a      	cmp	r2, r3
 8009698:	bf0c      	ite	eq
 800969a:	2301      	moveq	r3, #1
 800969c:	2300      	movne	r3, #0
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d0a6      	beq.n	80095f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b0a3      	sub	sp, #140	; 0x8c
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	88fa      	ldrh	r2, [r7, #6]
 80096cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d10e      	bne.n	8009706 <UART_Start_Receive_IT+0x52>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <UART_Start_Receive_IT+0x48>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80096f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096fa:	e02d      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	22ff      	movs	r2, #255	; 0xff
 8009700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009704:	e028      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10d      	bne.n	800972a <UART_Start_Receive_IT+0x76>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <UART_Start_Receive_IT+0x6c>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	22ff      	movs	r2, #255	; 0xff
 800971a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800971e:	e01b      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	227f      	movs	r2, #127	; 0x7f
 8009724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009728:	e016      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009732:	d10d      	bne.n	8009750 <UART_Start_Receive_IT+0x9c>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <UART_Start_Receive_IT+0x92>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	227f      	movs	r2, #127	; 0x7f
 8009740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009744:	e008      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	223f      	movs	r2, #63	; 0x3f
 800974a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800974e:	e003      	b.n	8009758 <UART_Start_Receive_IT+0xa4>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2222      	movs	r2, #34	; 0x22
 8009764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3308      	adds	r3, #8
 800976e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800978c:	673a      	str	r2, [r7, #112]	; 0x70
 800978e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009792:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009794:	e841 2300 	strex	r3, r2, [r1]
 8009798:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800979a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e3      	bne.n	8009768 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a8:	d14f      	bne.n	800984a <UART_Start_Receive_IT+0x196>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097b0:	88fa      	ldrh	r2, [r7, #6]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d349      	bcc.n	800984a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097be:	d107      	bne.n	80097d0 <UART_Start_Receive_IT+0x11c>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4a47      	ldr	r2, [pc, #284]	; (80098e8 <UART_Start_Receive_IT+0x234>)
 80097cc:	675a      	str	r2, [r3, #116]	; 0x74
 80097ce:	e002      	b.n	80097d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4a46      	ldr	r2, [pc, #280]	; (80098ec <UART_Start_Receive_IT+0x238>)
 80097d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01a      	beq.n	8009814 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009802:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e4      	bne.n	80097de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3308      	adds	r3, #8
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800982a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3308      	adds	r3, #8
 8009832:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009834:	64ba      	str	r2, [r7, #72]	; 0x48
 8009836:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800983a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800983c:	e841 2300 	strex	r3, r2, [r1]
 8009840:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e5      	bne.n	8009814 <UART_Start_Receive_IT+0x160>
 8009848:	e046      	b.n	80098d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009852:	d107      	bne.n	8009864 <UART_Start_Receive_IT+0x1b0>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a24      	ldr	r2, [pc, #144]	; (80098f0 <UART_Start_Receive_IT+0x23c>)
 8009860:	675a      	str	r2, [r3, #116]	; 0x74
 8009862:	e002      	b.n	800986a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4a23      	ldr	r2, [pc, #140]	; (80098f4 <UART_Start_Receive_IT+0x240>)
 8009868:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d019      	beq.n	80098a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009886:	677b      	str	r3, [r7, #116]	; 0x74
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
 8009892:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_Start_Receive_IT+0x1be>
 80098a4:	e018      	b.n	80098d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	613b      	str	r3, [r7, #16]
   return(result);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f043 0320 	orr.w	r3, r3, #32
 80098ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098c4:	623b      	str	r3, [r7, #32]
 80098c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69f9      	ldr	r1, [r7, #28]
 80098ca:	6a3a      	ldr	r2, [r7, #32]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e6      	bne.n	80098a6 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	378c      	adds	r7, #140	; 0x8c
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	0800a125 	.word	0x0800a125
 80098ec:	08009dc1 	.word	0x08009dc1
 80098f0:	08009c05 	.word	0x08009c05
 80098f4:	08009a49 	.word	0x08009a49

080098f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b095      	sub	sp, #84	; 0x54
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	643b      	str	r3, [r7, #64]	; 0x40
 8009920:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e6      	bne.n	8009900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	61fb      	str	r3, [r7, #28]
   return(result);
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009948:	f023 0301 	bic.w	r3, r3, #1
 800994c:	64bb      	str	r3, [r7, #72]	; 0x48
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3308      	adds	r3, #8
 8009954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800995c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e3      	bne.n	8009932 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996e:	2b01      	cmp	r3, #1
 8009970:	d118      	bne.n	80099a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f023 0310 	bic.w	r3, r3, #16
 8009986:	647b      	str	r3, [r7, #68]	; 0x44
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009990:	61bb      	str	r3, [r7, #24]
 8009992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	6979      	ldr	r1, [r7, #20]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	e841 2300 	strex	r3, r2, [r1]
 800999c:	613b      	str	r3, [r7, #16]
   return(result);
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e6      	bne.n	8009972 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80099b8:	bf00      	nop
 80099ba:	3754      	adds	r7, #84	; 0x54
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff f9a0 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	613b      	str	r3, [r7, #16]
   return(result);
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e6      	bne.n	80099f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff f96b 	bl	8008d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a3e:	bf00      	nop
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b09c      	sub	sp, #112	; 0x70
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a60:	2b22      	cmp	r3, #34	; 0x22
 8009a62:	f040 80be 	bne.w	8009be2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a74:	b2d9      	uxtb	r1, r3
 8009a76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a80:	400a      	ands	r2, r1
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f040 80a3 	bne.w	8009bf6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ad0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	667b      	str	r3, [r7, #100]	; 0x64
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b02:	647a      	str	r2, [r7, #68]	; 0x44
 8009b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e5      	bne.n	8009ae2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a34      	ldr	r2, [pc, #208]	; (8009c00 <UART_RxISR_8BIT+0x1b8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d01f      	beq.n	8009b74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d018      	beq.n	8009b74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b56:	663b      	str	r3, [r7, #96]	; 0x60
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
 8009b62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e6      	bne.n	8009b42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d12e      	bne.n	8009bda <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0310 	bic.w	r3, r3, #16
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba0:	61fb      	str	r3, [r7, #28]
 8009ba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	69b9      	ldr	r1, [r7, #24]
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	617b      	str	r3, [r7, #20]
   return(result);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e6      	bne.n	8009b82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	2b10      	cmp	r3, #16
 8009bc0:	d103      	bne.n	8009bca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff f8b2 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bd8:	e00d      	b.n	8009bf6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7f9 fda2 	bl	8003724 <HAL_UART_RxCpltCallback>
}
 8009be0:	e009      	b.n	8009bf6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	8b1b      	ldrh	r3, [r3, #24]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0208 	orr.w	r2, r2, #8
 8009bf2:	b292      	uxth	r2, r2
 8009bf4:	831a      	strh	r2, [r3, #24]
}
 8009bf6:	bf00      	nop
 8009bf8:	3770      	adds	r7, #112	; 0x70
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40008000 	.word	0x40008000

08009c04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b09c      	sub	sp, #112	; 0x70
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1c:	2b22      	cmp	r3, #34	; 0x22
 8009c1e:	f040 80be 	bne.w	8009d9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c30:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009c36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c46:	1c9a      	adds	r2, r3, #2
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 80a3 	bne.w	8009db2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c74:	e853 3f00 	ldrex	r3, [r3]
 8009c78:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c80:	667b      	str	r3, [r7, #100]	; 0x64
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c8c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c92:	e841 2300 	strex	r3, r2, [r1]
 8009c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1e6      	bne.n	8009c6c <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	f023 0301 	bic.w	r3, r3, #1
 8009cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cbe:	643a      	str	r2, [r7, #64]	; 0x40
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e5      	bne.n	8009c9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a34      	ldr	r2, [pc, #208]	; (8009dbc <UART_RxISR_16BIT+0x1b8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d01f      	beq.n	8009d30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d018      	beq.n	8009d30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e6      	bne.n	8009cfe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d12e      	bne.n	8009d96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f023 0310 	bic.w	r3, r3, #16
 8009d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d5c:	61bb      	str	r3, [r7, #24]
 8009d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6979      	ldr	r1, [r7, #20]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	613b      	str	r3, [r7, #16]
   return(result);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e6      	bne.n	8009d3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	f003 0310 	and.w	r3, r3, #16
 8009d7a:	2b10      	cmp	r3, #16
 8009d7c:	d103      	bne.n	8009d86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2210      	movs	r2, #16
 8009d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7fe ffd4 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d94:	e00d      	b.n	8009db2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7f9 fcc4 	bl	8003724 <HAL_UART_RxCpltCallback>
}
 8009d9c:	e009      	b.n	8009db2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	8b1b      	ldrh	r3, [r3, #24]
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f042 0208 	orr.w	r2, r2, #8
 8009dae:	b292      	uxth	r2, r2
 8009db0:	831a      	strh	r2, [r3, #24]
}
 8009db2:	bf00      	nop
 8009db4:	3770      	adds	r7, #112	; 0x70
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40008000 	.word	0x40008000

08009dc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b0ac      	sub	sp, #176	; 0xb0
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df6:	2b22      	cmp	r3, #34	; 0x22
 8009df8:	f040 8182 	bne.w	800a100 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e02:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e06:	e125      	b.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e0e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009e16:	b2d9      	uxtb	r1, r3
 8009e18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	400a      	ands	r2, r1
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d053      	beq.n	8009f02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d011      	beq.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2201      	movs	r2, #1
 8009e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e80:	f043 0201 	orr.w	r2, r3, #1
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d011      	beq.n	8009eba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb0:	f043 0204 	orr.w	r2, r3, #4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d011      	beq.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee0:	f043 0202 	orr.w	r2, r3, #2
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fe ff17 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f040 80a2 	bne.w	800a054 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f34:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009f38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f6e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009f70:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e1      	bne.n	8009f46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a60      	ldr	r2, [pc, #384]	; (800a11c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d021      	beq.n	8009fe4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01a      	beq.n	8009fe4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8009fd2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fd8:	e841 2300 	strex	r3, r2, [r1]
 8009fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1e4      	bne.n	8009fae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d130      	bne.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	f023 0310 	bic.w	r3, r3, #16
 800a006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a014:	643b      	str	r3, [r7, #64]	; 0x40
 800a016:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a01a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e4      	bne.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b10      	cmp	r3, #16
 800a034:	d103      	bne.n	800a03e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2210      	movs	r2, #16
 800a03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fe fe78 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
 800a04c:	e002      	b.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f9 fb68 	bl	8003724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a054:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a05c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a060:	f003 0320 	and.w	r3, r3, #32
 800a064:	2b00      	cmp	r3, #0
 800a066:	f47f aecf 	bne.w	8009e08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a070:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a074:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d04b      	beq.n	800a114 <UART_RxISR_8BIT_FIFOEN+0x354>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a082:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a086:	429a      	cmp	r2, r3
 800a088:	d244      	bcs.n	800a114 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	61fb      	str	r3, [r7, #28]
   return(result);
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a0ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e3      	bne.n	800a08a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a16      	ldr	r2, [pc, #88]	; (800a120 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a0c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f043 0320 	orr.w	r3, r3, #32
 800a0dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6979      	ldr	r1, [r7, #20]
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e4      	bne.n	800a0c8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0fe:	e009      	b.n	800a114 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	8b1b      	ldrh	r3, [r3, #24]
 800a106:	b29a      	uxth	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0208 	orr.w	r2, r2, #8
 800a110:	b292      	uxth	r2, r2
 800a112:	831a      	strh	r2, [r3, #24]
}
 800a114:	bf00      	nop
 800a116:	37b0      	adds	r7, #176	; 0xb0
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	40008000 	.word	0x40008000
 800a120:	08009a49 	.word	0x08009a49

0800a124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b0ae      	sub	sp, #184	; 0xb8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a132:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a15a:	2b22      	cmp	r3, #34	; 0x22
 800a15c:	f040 8186 	bne.w	800a46c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a166:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a16a:	e129      	b.n	800a3c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a172:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a17e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a182:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a186:	4013      	ands	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a18e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d053      	beq.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d011      	beq.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e8:	f043 0201 	orr.w	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d011      	beq.n	800a222 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a1fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2202      	movs	r2, #2
 800a210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a218:	f043 0204 	orr.w	r2, r3, #4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d011      	beq.n	800a252 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a22e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2204      	movs	r2, #4
 800a240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a248:	f043 0202 	orr.w	r2, r3, #2
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe fd63 	bl	8008d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a270:	b29b      	uxth	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	f040 80a4 	bne.w	800a3c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a29a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a29e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a2ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e2      	bne.n	800a278 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2c8:	f023 0301 	bic.w	r3, r3, #1
 800a2cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a2da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e1      	bne.n	800a2b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a60      	ldr	r2, [pc, #384]	; (800a488 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d021      	beq.n	800a350 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01a      	beq.n	800a350 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a33c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a33e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e4      	bne.n	800a31a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d130      	bne.n	800a3ba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a380:	647b      	str	r3, [r7, #68]	; 0x44
 800a382:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e4      	bne.n	800a35e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f003 0310 	and.w	r3, r3, #16
 800a39e:	2b10      	cmp	r3, #16
 800a3a0:	d103      	bne.n	800a3aa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7fe fcc2 	bl	8008d3c <HAL_UARTEx_RxEventCallback>
 800a3b8:	e002      	b.n	800a3c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7f9 f9b2 	bl	8003724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d006      	beq.n	800a3d6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a3c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3cc:	f003 0320 	and.w	r3, r3, #32
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f47f aecb 	bne.w	800a16c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a3e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d04b      	beq.n	800a480 <UART_RxISR_16BIT_FIFOEN+0x35c>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d244      	bcs.n	800a480 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	623b      	str	r3, [r7, #32]
   return(result);
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a40c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a41a:	633a      	str	r2, [r7, #48]	; 0x30
 800a41c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e3      	bne.n	800a3f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a16      	ldr	r2, [pc, #88]	; (800a48c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a432:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	60fb      	str	r3, [r7, #12]
   return(result);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f043 0320 	orr.w	r3, r3, #32
 800a448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a456:	61fb      	str	r3, [r7, #28]
 800a458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	69b9      	ldr	r1, [r7, #24]
 800a45c:	69fa      	ldr	r2, [r7, #28]
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	617b      	str	r3, [r7, #20]
   return(result);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e4      	bne.n	800a434 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a46a:	e009      	b.n	800a480 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	8b1b      	ldrh	r3, [r3, #24]
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0208 	orr.w	r2, r2, #8
 800a47c:	b292      	uxth	r2, r2
 800a47e:	831a      	strh	r2, [r3, #24]
}
 800a480:	bf00      	nop
 800a482:	37b8      	adds	r7, #184	; 0xb8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	40008000 	.word	0x40008000
 800a48c:	08009c05 	.word	0x08009c05

0800a490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e027      	b.n	800a532 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2224      	movs	r2, #36	; 0x24
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0201 	bic.w	r2, r2, #1
 800a508:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2220      	movs	r2, #32
 800a524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a552:	2302      	movs	r3, #2
 800a554:	e02d      	b.n	800a5b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2224      	movs	r2, #36	; 0x24
 800a562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0201 	bic.w	r2, r2, #1
 800a57c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f850 	bl	800a638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e02d      	b.n	800a62e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2224      	movs	r2, #36	; 0x24
 800a5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0201 	bic.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f812 	bl	800a638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a644:	2b00      	cmp	r3, #0
 800a646:	d108      	bne.n	800a65a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a658:	e031      	b.n	800a6be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a65a:	2308      	movs	r3, #8
 800a65c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a65e:	2308      	movs	r3, #8
 800a660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	0e5b      	lsrs	r3, r3, #25
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	0f5b      	lsrs	r3, r3, #29
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0307 	and.w	r3, r3, #7
 800a680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	7b3a      	ldrb	r2, [r7, #12]
 800a686:	4911      	ldr	r1, [pc, #68]	; (800a6cc <UARTEx_SetNbDataToProcess+0x94>)
 800a688:	5c8a      	ldrb	r2, [r1, r2]
 800a68a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a68e:	7b3a      	ldrb	r2, [r7, #12]
 800a690:	490f      	ldr	r1, [pc, #60]	; (800a6d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a694:	fb93 f3f2 	sdiv	r3, r3, r2
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
 800a6a2:	7b7a      	ldrb	r2, [r7, #13]
 800a6a4:	4909      	ldr	r1, [pc, #36]	; (800a6cc <UARTEx_SetNbDataToProcess+0x94>)
 800a6a6:	5c8a      	ldrb	r2, [r1, r2]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6ac:	7b7a      	ldrb	r2, [r7, #13]
 800a6ae:	4908      	ldr	r1, [pc, #32]	; (800a6d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6be:	bf00      	nop
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	0800a830 	.word	0x0800a830
 800a6d0:	0800a838 	.word	0x0800a838

0800a6d4 <memset>:
 800a6d4:	4402      	add	r2, r0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d100      	bne.n	800a6de <memset+0xa>
 800a6dc:	4770      	bx	lr
 800a6de:	f803 1b01 	strb.w	r1, [r3], #1
 800a6e2:	e7f9      	b.n	800a6d8 <memset+0x4>

0800a6e4 <__libc_init_array>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4d0d      	ldr	r5, [pc, #52]	; (800a71c <__libc_init_array+0x38>)
 800a6e8:	4c0d      	ldr	r4, [pc, #52]	; (800a720 <__libc_init_array+0x3c>)
 800a6ea:	1b64      	subs	r4, r4, r5
 800a6ec:	10a4      	asrs	r4, r4, #2
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42a6      	cmp	r6, r4
 800a6f2:	d109      	bne.n	800a708 <__libc_init_array+0x24>
 800a6f4:	4d0b      	ldr	r5, [pc, #44]	; (800a724 <__libc_init_array+0x40>)
 800a6f6:	4c0c      	ldr	r4, [pc, #48]	; (800a728 <__libc_init_array+0x44>)
 800a6f8:	f000 f826 	bl	800a748 <_init>
 800a6fc:	1b64      	subs	r4, r4, r5
 800a6fe:	10a4      	asrs	r4, r4, #2
 800a700:	2600      	movs	r6, #0
 800a702:	42a6      	cmp	r6, r4
 800a704:	d105      	bne.n	800a712 <__libc_init_array+0x2e>
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70c:	4798      	blx	r3
 800a70e:	3601      	adds	r6, #1
 800a710:	e7ee      	b.n	800a6f0 <__libc_init_array+0xc>
 800a712:	f855 3b04 	ldr.w	r3, [r5], #4
 800a716:	4798      	blx	r3
 800a718:	3601      	adds	r6, #1
 800a71a:	e7f2      	b.n	800a702 <__libc_init_array+0x1e>
 800a71c:	0800a848 	.word	0x0800a848
 800a720:	0800a848 	.word	0x0800a848
 800a724:	0800a848 	.word	0x0800a848
 800a728:	0800a84c 	.word	0x0800a84c

0800a72c <memcpy>:
 800a72c:	440a      	add	r2, r1
 800a72e:	4291      	cmp	r1, r2
 800a730:	f100 33ff 	add.w	r3, r0, #4294967295
 800a734:	d100      	bne.n	800a738 <memcpy+0xc>
 800a736:	4770      	bx	lr
 800a738:	b510      	push	{r4, lr}
 800a73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a742:	4291      	cmp	r1, r2
 800a744:	d1f9      	bne.n	800a73a <memcpy+0xe>
 800a746:	bd10      	pop	{r4, pc}

0800a748 <_init>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	bf00      	nop
 800a74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a74e:	bc08      	pop	{r3}
 800a750:	469e      	mov	lr, r3
 800a752:	4770      	bx	lr

0800a754 <_fini>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	bf00      	nop
 800a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75a:	bc08      	pop	{r3}
 800a75c:	469e      	mov	lr, r3
 800a75e:	4770      	bx	lr

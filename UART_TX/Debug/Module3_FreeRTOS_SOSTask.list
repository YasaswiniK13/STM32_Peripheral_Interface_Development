
Module3_FreeRTOS_SOSTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d90  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd8  08007fd8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe0  08007fe0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000014  08007ffc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001268  08007ffc  00021268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f53  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d49  00000000  00000000  00041fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  00045d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017af  00000000  00000000  00047b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002daef  00000000  00000000  00049307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d7f  00000000  00000000  00076df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012eb75  00000000  00000000  0009ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000824c  00000000  00000000  001c96ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001d1938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007f38 	.word	0x08007f38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08007f38 	.word	0x08007f38

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f103 0208 	add.w	r2, r3, #8
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f103 0208 	add.w	r2, r3, #8
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f103 0208 	add.w	r2, r3, #8
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056c:	d103      	bne.n	8000576 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e00c      	b.n	8000590 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3308      	adds	r3, #8
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e002      	b.n	8000584 <vListInsert+0x2e>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	429a      	cmp	r2, r3
 800058e:	d2f6      	bcs.n	800057e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	6892      	ldr	r2, [r2, #8]
 80005de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	6852      	ldr	r2, [r2, #4]
 80005e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d103      	bne.n	80005fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1e5a      	subs	r2, r3, #1
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af04      	add	r7, sp, #16
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ffeb 	bl	800160c <pvPortMalloc>
 8000636:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d013      	beq.n	8000666 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800063e:	2054      	movs	r0, #84	; 0x54
 8000640:	f000 ffe4 	bl	800160c <pvPortMalloc>
 8000644:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	69f8      	ldr	r0, [r7, #28]
 8000652:	f007 fc45 	bl	8007ee0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
 800065c:	e005      	b.n	800066a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f001 f88e 	bl	8001780 <vPortFree>
 8000664:	e001      	b.n	800066a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d013      	beq.n	8000698 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	2300      	movs	r3, #0
 8000674:	9303      	str	r3, [sp, #12]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f80e 	bl	80006a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800068c:	69f8      	ldr	r0, [r7, #28]
 800068e:	f000 f891 	bl	80007b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e002      	b.n	800069e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800069e:	69bb      	ldr	r3, [r7, #24]
    }
 80006a0:	4618      	mov	r0, r3
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006c0:	3b01      	subs	r3, #1
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	f023 0307 	bic.w	r3, r3, #7
 80006ce:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006ec:	bf00      	nop
 80006ee:	e7fe      	b.n	80006ee <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01e      	beq.n	8000734 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e012      	b.n	8000722 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	4413      	add	r3, r2
 8000702:	7819      	ldrb	r1, [r3, #0]
 8000704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	4413      	add	r3, r2
 800070a:	3334      	adds	r3, #52	; 0x34
 800070c:	460a      	mov	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3301      	adds	r3, #1
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d9e9      	bls.n	80006fc <prvInitialiseNewTask+0x54>
 8000728:	e000      	b.n	800072c <prvInitialiseNewTask+0x84>
            {
                break;
 800072a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000736:	2b06      	cmp	r3, #6
 8000738:	d90a      	bls.n	8000750 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073e:	f383 8811 	msr	BASEPRI, r3
 8000742:	f3bf 8f6f 	isb	sy
 8000746:	f3bf 8f4f 	dsb	sy
 800074a:	613b      	str	r3, [r7, #16]
    }
 800074c:	bf00      	nop
 800074e:	e7fe      	b.n	800074e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	2b06      	cmp	r3, #6
 8000754:	d901      	bls.n	800075a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000756:	2306      	movs	r3, #6
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000768:	3304      	adds	r3, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fee6 	bl	800053c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	3318      	adds	r3, #24
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fee1 	bl	800053c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800077e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000782:	f1c3 0207 	rsb	r2, r3, #7
 8000786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000788:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	68f9      	ldr	r1, [r7, #12]
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f000 fd27 	bl	80011e8 <pxPortInitialiseStack>
 800079a:	4602      	mov	r2, r0
 800079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80007bc:	f000 fe44 	bl	8001448 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80007c0:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a3d      	ldr	r2, [pc, #244]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d109      	bne.n	80007e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d110      	bne.n	8000802 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80007e0:	f000 fbe8 	bl	8000fb4 <prvInitialiseTaskLists>
 80007e4:	e00d      	b.n	8000802 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <prvAddNewTaskToReadyList+0x110>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d109      	bne.n	8000802 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d802      	bhi.n	8000802 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80007fc:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <prvAddNewTaskToReadyList+0x114>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <prvAddNewTaskToReadyList+0x114>)
 800080a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	2201      	movs	r2, #1
 8000812:	409a      	lsls	r2, r3
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <prvAddNewTaskToReadyList+0x118>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4313      	orrs	r3, r2
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <prvAddNewTaskToReadyList+0x118>)
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	492b      	ldr	r1, [pc, #172]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	3304      	adds	r3, #4
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	3204      	adds	r2, #4
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1d1a      	adds	r2, r3, #4
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 8000862:	441a      	add	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086c:	4918      	ldr	r1, [pc, #96]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1c59      	adds	r1, r3, #1
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4403      	add	r3, r0
 8000888:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800088a:	f000 fe0d 	bl	80014a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <prvAddNewTaskToReadyList+0x110>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00e      	beq.n	80008b4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <prvAddNewTaskToReadyList+0x120>)
 80008a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000130 	.word	0x20000130
 80008c0:	20000030 	.word	0x20000030
 80008c4:	2000013c 	.word	0x2000013c
 80008c8:	2000014c 	.word	0x2000014c
 80008cc:	20000138 	.word	0x20000138
 80008d0:	20000034 	.word	0x20000034
 80008d4:	e000ed04 	.word	0xe000ed04

080008d8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10a      	bne.n	8000902 <xTaskDelayUntil+0x2a>
        __asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	617b      	str	r3, [r7, #20]
    }
 80008fe:	bf00      	nop
 8000900:	e7fe      	b.n	8000900 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10a      	bne.n	800091e <xTaskDelayUntil+0x46>
        __asm volatile
 8000908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090c:	f383 8811 	msr	BASEPRI, r3
 8000910:	f3bf 8f6f 	isb	sy
 8000914:	f3bf 8f4f 	dsb	sy
 8000918:	613b      	str	r3, [r7, #16]
    }
 800091a:	bf00      	nop
 800091c:	e7fe      	b.n	800091c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <xTaskDelayUntil+0xf0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00a      	beq.n	800093c <xTaskDelayUntil+0x64>
        __asm volatile
 8000926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092a:	f383 8811 	msr	BASEPRI, r3
 800092e:	f3bf 8f6f 	isb	sy
 8000932:	f3bf 8f4f 	dsb	sy
 8000936:	60fb      	str	r3, [r7, #12]
    }
 8000938:	bf00      	nop
 800093a:	e7fe      	b.n	800093a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 800093c:	f000 f896 	bl	8000a6c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <xTaskDelayUntil+0xf4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6a3a      	ldr	r2, [r7, #32]
 8000956:	429a      	cmp	r2, r3
 8000958:	d20b      	bcs.n	8000972 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	d211      	bcs.n	8000988 <xTaskDelayUntil+0xb0>
 8000964:	69fa      	ldr	r2, [r7, #28]
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	429a      	cmp	r2, r3
 800096a:	d90d      	bls.n	8000988 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800096c:	2301      	movs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
 8000970:	e00a      	b.n	8000988 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	429a      	cmp	r2, r3
 800097a:	d303      	bcc.n	8000984 <xTaskDelayUntil+0xac>
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	429a      	cmp	r2, r3
 8000982:	d901      	bls.n	8000988 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000994:	69fa      	ldr	r2, [r7, #28]
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fba3 	bl	80010e8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80009a2:	f000 f871 	bl	8000a88 <xTaskResumeAll>
 80009a6:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d107      	bne.n	80009be <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <xTaskDelayUntil+0xf8>)
 80009b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80009c0:	4618      	mov	r0, r3
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000158 	.word	0x20000158
 80009cc:	20000134 	.word	0x20000134
 80009d0:	e000ed04 	.word	0xe000ed04

080009d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <vTaskStartScheduler+0x7c>)
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	491b      	ldr	r1, [pc, #108]	; (8000a54 <vTaskStartScheduler+0x80>)
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <vTaskStartScheduler+0x84>)
 80009ea:	f7ff fe17 	bl	800061c <xTaskCreate>
 80009ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d116      	bne.n	8000a24 <vTaskStartScheduler+0x50>
        __asm volatile
 80009f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fa:	f383 8811 	msr	BASEPRI, r3
 80009fe:	f3bf 8f6f 	isb	sy
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	60bb      	str	r3, [r7, #8]
    }
 8000a08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <vTaskStartScheduler+0x88>)
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <vTaskStartScheduler+0x8c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <vTaskStartScheduler+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000a1e:	f000 fc71 	bl	8001304 <xPortStartScheduler>
 8000a22:	e00e      	b.n	8000a42 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2a:	d10a      	bne.n	8000a42 <vTaskStartScheduler+0x6e>
        __asm volatile
 8000a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a30:	f383 8811 	msr	BASEPRI, r3
 8000a34:	f3bf 8f6f 	isb	sy
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	607b      	str	r3, [r7, #4]
    }
 8000a3e:	bf00      	nop
 8000a40:	e7fe      	b.n	8000a40 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <vTaskStartScheduler+0x94>)
 8000a44:	681b      	ldr	r3, [r3, #0]
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000154 	.word	0x20000154
 8000a54:	08007f50 	.word	0x08007f50
 8000a58:	08000f85 	.word	0x08000f85
 8000a5c:	20000150 	.word	0x20000150
 8000a60:	2000013c 	.word	0x2000013c
 8000a64:	20000134 	.word	0x20000134
 8000a68:	20000000 	.word	0x20000000

08000a6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <vTaskSuspendAll+0x18>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <vTaskSuspendAll+0x18>)
 8000a78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000158 	.word	0x20000158

08000a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a96:	4b71      	ldr	r3, [pc, #452]	; (8000c5c <xTaskResumeAll+0x1d4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa2:	f383 8811 	msr	BASEPRI, r3
 8000aa6:	f3bf 8f6f 	isb	sy
 8000aaa:	f3bf 8f4f 	dsb	sy
 8000aae:	607b      	str	r3, [r7, #4]
    }
 8000ab0:	bf00      	nop
 8000ab2:	e7fe      	b.n	8000ab2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000ab4:	f000 fcc8 	bl	8001448 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000ab8:	4b68      	ldr	r3, [pc, #416]	; (8000c5c <xTaskResumeAll+0x1d4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a67      	ldr	r2, [pc, #412]	; (8000c5c <xTaskResumeAll+0x1d4>)
 8000ac0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ac2:	4b66      	ldr	r3, [pc, #408]	; (8000c5c <xTaskResumeAll+0x1d4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 80c0 	bne.w	8000c4c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000acc:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <xTaskResumeAll+0x1d8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 80bb 	beq.w	8000c4c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ad6:	e08a      	b.n	8000bee <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ad8:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <xTaskResumeAll+0x1dc>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	6a12      	ldr	r2, [r2, #32]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	69d2      	ldr	r2, [r2, #28]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3318      	adds	r3, #24
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d103      	bne.n	8000b0e <xTaskResumeAll+0x86>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	6a1a      	ldr	r2, [r3, #32]
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	69fa      	ldr	r2, [r7, #28]
 8000b2a:	68d2      	ldr	r2, [r2, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	6892      	ldr	r2, [r2, #8]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d103      	bne.n	8000b4c <xTaskResumeAll+0xc4>
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	2201      	movs	r2, #1
 8000b62:	409a      	lsls	r2, r3
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <xTaskResumeAll+0x1e0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	4a3f      	ldr	r2, [pc, #252]	; (8000c68 <xTaskResumeAll+0x1e0>)
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b72:	493e      	ldr	r1, [pc, #248]	; (8000c6c <xTaskResumeAll+0x1e4>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3304      	adds	r3, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	3204      	adds	r2, #4
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	1d1a      	adds	r2, r3, #4
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <xTaskResumeAll+0x1e4>)
 8000bb2:	441a      	add	r2, r3
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bbc:	492b      	ldr	r1, [pc, #172]	; (8000c6c <xTaskResumeAll+0x1e4>)
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1c59      	adds	r1, r3, #1
 8000bcc:	4827      	ldr	r0, [pc, #156]	; (8000c6c <xTaskResumeAll+0x1e4>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4403      	add	r3, r0
 8000bd8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <xTaskResumeAll+0x1e8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d302      	bcc.n	8000bee <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <xTaskResumeAll+0x1ec>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <xTaskResumeAll+0x1dc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f af70 	bne.w	8000ad8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000bfe:	f000 fa57 	bl	80010b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <xTaskResumeAll+0x1f0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d010      	beq.n	8000c30 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c0e:	f000 f847 	bl	8000ca0 <xTaskIncrementTick>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <xTaskResumeAll+0x1ec>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f1      	bne.n	8000c0e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <xTaskResumeAll+0x1f0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <xTaskResumeAll+0x1ec>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d009      	beq.n	8000c4c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <xTaskResumeAll+0x1f4>)
 8000c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c4c:	f000 fc2c 	bl	80014a8 <vPortExitCritical>

    return xAlreadyYielded;
 8000c50:	69bb      	ldr	r3, [r7, #24]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000158 	.word	0x20000158
 8000c60:	20000130 	.word	0x20000130
 8000c64:	200000f0 	.word	0x200000f0
 8000c68:	20000138 	.word	0x20000138
 8000c6c:	20000034 	.word	0x20000034
 8000c70:	20000030 	.word	0x20000030
 8000c74:	20000144 	.word	0x20000144
 8000c78:	20000140 	.word	0x20000140
 8000c7c:	e000ed04 	.word	0xe000ed04

08000c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <xTaskGetTickCount+0x1c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000134 	.word	0x20000134

08000ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000caa:	4b7d      	ldr	r3, [pc, #500]	; (8000ea0 <xTaskIncrementTick+0x200>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 80ec 	bne.w	8000e8c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000cb4:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <xTaskIncrementTick+0x204>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000cbc:	4a79      	ldr	r2, [pc, #484]	; (8000ea4 <xTaskIncrementTick+0x204>)
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d120      	bne.n	8000d0a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000cc8:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <xTaskIncrementTick+0x208>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <xTaskIncrementTick+0x48>
        __asm volatile
 8000cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	607b      	str	r3, [r7, #4]
    }
 8000ce4:	bf00      	nop
 8000ce6:	e7fe      	b.n	8000ce6 <xTaskIncrementTick+0x46>
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <xTaskIncrementTick+0x208>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <xTaskIncrementTick+0x20c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a6d      	ldr	r2, [pc, #436]	; (8000ea8 <xTaskIncrementTick+0x208>)
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4a6d      	ldr	r2, [pc, #436]	; (8000eac <xTaskIncrementTick+0x20c>)
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b6c      	ldr	r3, [pc, #432]	; (8000eb0 <xTaskIncrementTick+0x210>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a6b      	ldr	r2, [pc, #428]	; (8000eb0 <xTaskIncrementTick+0x210>)
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	f000 f9d3 	bl	80010b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d0a:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <xTaskIncrementTick+0x214>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6a3a      	ldr	r2, [r7, #32]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f0c0 80a6 	bcc.w	8000e62 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d16:	4b64      	ldr	r3, [pc, #400]	; (8000ea8 <xTaskIncrementTick+0x208>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d20:	4b64      	ldr	r3, [pc, #400]	; (8000eb4 <xTaskIncrementTick+0x214>)
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	601a      	str	r2, [r3, #0]
                    break;
 8000d28:	e09b      	b.n	8000e62 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <xTaskIncrementTick+0x208>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000d3a:	6a3a      	ldr	r2, [r7, #32]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d203      	bcs.n	8000d4a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000d42:	4a5c      	ldr	r2, [pc, #368]	; (8000eb4 <xTaskIncrementTick+0x214>)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000d48:	e08b      	b.n	8000e62 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	68d2      	ldr	r2, [r2, #12]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	6892      	ldr	r2, [r2, #8]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d103      	bne.n	8000d78 <xTaskIncrementTick+0xd8>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d01e      	beq.n	8000dce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	6a12      	ldr	r2, [r2, #32]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	69d2      	ldr	r2, [r2, #28]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	3318      	adds	r3, #24
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d103      	bne.n	8000dbe <xTaskIncrementTick+0x11e>
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	6a1a      	ldr	r2, [r3, #32]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <xTaskIncrementTick+0x218>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	4a36      	ldr	r2, [pc, #216]	; (8000eb8 <xTaskIncrementTick+0x218>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <xTaskIncrementTick+0x21c>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	3304      	adds	r3, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	3204      	adds	r2, #4
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	1d1a      	adds	r2, r3, #4
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <xTaskIncrementTick+0x21c>)
 8000e24:	441a      	add	r2, r3
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2e:	4923      	ldr	r1, [pc, #140]	; (8000ebc <xTaskIncrementTick+0x21c>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1c59      	adds	r1, r3, #1
 8000e3e:	481f      	ldr	r0, [pc, #124]	; (8000ebc <xTaskIncrementTick+0x21c>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4403      	add	r3, r0
 8000e4a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <xTaskIncrementTick+0x220>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	429a      	cmp	r2, r3
 8000e58:	f67f af5d 	bls.w	8000d16 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e60:	e759      	b.n	8000d16 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <xTaskIncrementTick+0x220>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e68:	4914      	ldr	r1, [pc, #80]	; (8000ebc <xTaskIncrementTick+0x21c>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d901      	bls.n	8000e7e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <xTaskIncrementTick+0x224>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	e004      	b.n	8000e96 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <xTaskIncrementTick+0x228>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <xTaskIncrementTick+0x228>)
 8000e94:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000158 	.word	0x20000158
 8000ea4:	20000134 	.word	0x20000134
 8000ea8:	200000e8 	.word	0x200000e8
 8000eac:	200000ec 	.word	0x200000ec
 8000eb0:	20000148 	.word	0x20000148
 8000eb4:	20000150 	.word	0x20000150
 8000eb8:	20000138 	.word	0x20000138
 8000ebc:	20000034 	.word	0x20000034
 8000ec0:	20000030 	.word	0x20000030
 8000ec4:	20000144 	.word	0x20000144
 8000ec8:	20000140 	.word	0x20000140

08000ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <vTaskSwitchContext+0xa4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <vTaskSwitchContext+0xa8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000ee0:	e03f      	b.n	8000f62 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <vTaskSwitchContext+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <vTaskSwitchContext+0xac>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000ef6:	7afb      	ldrb	r3, [r7, #11]
 8000ef8:	f1c3 031f 	rsb	r3, r3, #31
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	491f      	ldr	r1, [pc, #124]	; (8000f7c <vTaskSwitchContext+0xb0>)
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f16:	f383 8811 	msr	BASEPRI, r3
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	607b      	str	r3, [r7, #4]
    }
 8000f24:	bf00      	nop
 8000f26:	e7fe      	b.n	8000f26 <vTaskSwitchContext+0x5a>
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <vTaskSwitchContext+0xb0>)
 8000f34:	4413      	add	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3308      	adds	r3, #8
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d104      	bne.n	8000f58 <vTaskSwitchContext+0x8c>
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <vTaskSwitchContext+0xb4>)
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000158 	.word	0x20000158
 8000f74:	20000144 	.word	0x20000144
 8000f78:	20000138 	.word	0x20000138
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	20000030 	.word	0x20000030

08000f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f8c:	f000 f852 	bl	8001034 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <prvIdleTask+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d9f9      	bls.n	8000f8c <prvIdleTask+0x8>
            {
                taskYIELD();
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <prvIdleTask+0x2c>)
 8000f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	f3bf 8f4f 	dsb	sy
 8000fa4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000fa8:	e7f0      	b.n	8000f8c <prvIdleTask+0x8>
 8000faa:	bf00      	nop
 8000fac:	20000034 	.word	0x20000034
 8000fb0:	e000ed04 	.word	0xe000ed04

08000fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	e00c      	b.n	8000fda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <prvInitialiseTaskLists+0x60>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa94 	bl	80004fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	d9ef      	bls.n	8000fc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <prvInitialiseTaskLists+0x64>)
 8000fe2:	f7ff fa8b 	bl	80004fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <prvInitialiseTaskLists+0x68>)
 8000fe8:	f7ff fa88 	bl	80004fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <prvInitialiseTaskLists+0x6c>)
 8000fee:	f7ff fa85 	bl	80004fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <prvInitialiseTaskLists+0x70>)
 8000ff4:	f7ff fa82 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <prvInitialiseTaskLists+0x74>)
 8000ffa:	f7ff fa7f 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <prvInitialiseTaskLists+0x78>)
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <prvInitialiseTaskLists+0x64>)
 8001002:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <prvInitialiseTaskLists+0x7c>)
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <prvInitialiseTaskLists+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000034 	.word	0x20000034
 8001018:	200000c0 	.word	0x200000c0
 800101c:	200000d4 	.word	0x200000d4
 8001020:	200000f0 	.word	0x200000f0
 8001024:	20000104 	.word	0x20000104
 8001028:	2000011c 	.word	0x2000011c
 800102c:	200000e8 	.word	0x200000e8
 8001030:	200000ec 	.word	0x200000ec

08001034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800103a:	e019      	b.n	8001070 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800103c:	f000 fa04 	bl	8001448 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <prvCheckTasksWaitingTermination+0x50>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3304      	adds	r3, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fabb 	bl	80005c8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <prvCheckTasksWaitingTermination+0x54>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <prvCheckTasksWaitingTermination+0x54>)
 800105a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <prvCheckTasksWaitingTermination+0x58>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3b01      	subs	r3, #1
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <prvCheckTasksWaitingTermination+0x58>)
 8001064:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001066:	f000 fa1f 	bl	80014a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f810 	bl	8001090 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <prvCheckTasksWaitingTermination+0x58>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e1      	bne.n	800103c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000104 	.word	0x20000104
 8001088:	20000130 	.word	0x20000130
 800108c:	20000118 	.word	0x20000118

08001090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fb6f 	bl	8001780 <vPortFree>
            vPortFree( pxTCB );
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fb6c 	bl	8001780 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <prvResetNextTaskUnblockTime+0x30>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <prvResetNextTaskUnblockTime+0x34>)
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80010c6:	e005      	b.n	80010d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <prvResetNextTaskUnblockTime+0x30>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <prvResetNextTaskUnblockTime+0x34>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200000e8 	.word	0x200000e8
 80010e4:	20000150 	.word	0x20000150

080010e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <prvAddCurrentTaskToDelayedList+0xe4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3304      	adds	r3, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa62 	bl	80005c8 <uxListRemove>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10b      	bne.n	8001122 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <prvAddCurrentTaskToDelayedList+0xec>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4013      	ands	r3, r2
 800111e:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001120:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d124      	bne.n	8001174 <prvAddCurrentTaskToDelayedList+0x8c>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	3204      	adds	r2, #4
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1d1a      	adds	r2, r3, #4
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001172:	e026      	b.n	80011c2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	d209      	bcs.n	80011a0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3304      	adds	r3, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7ff f9dc 	bl	8000556 <vListInsert>
}
 800119e:	e010      	b.n	80011c2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3304      	adds	r3, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f7ff f9d2 	bl	8000556 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d202      	bcs.n	80011c2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000134 	.word	0x20000134
 80011d0:	20000030 	.word	0x20000030
 80011d4:	20000138 	.word	0x20000138
 80011d8:	2000011c 	.word	0x2000011c
 80011dc:	200000ec 	.word	0x200000ec
 80011e0:	200000e8 	.word	0x200000e8
 80011e4:	20000150 	.word	0x20000150

080011e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b04      	subs	r3, #4
 80011f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b04      	subs	r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f023 0201 	bic.w	r2, r3, #1
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3b04      	subs	r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <pxPortInitialiseStack+0x64>)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3b14      	subs	r3, #20
 8001222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3b04      	subs	r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f06f 0202 	mvn.w	r2, #2
 8001236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b20      	subs	r3, #32
 800123c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	08001251 	.word	0x08001251

08001250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <prvTaskExitError+0x54>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d00a      	beq.n	800127a <prvTaskExitError+0x2a>
        __asm volatile
 8001264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	f3bf 8f6f 	isb	sy
 8001270:	f3bf 8f4f 	dsb	sy
 8001274:	60fb      	str	r3, [r7, #12]
    }
 8001276:	bf00      	nop
 8001278:	e7fe      	b.n	8001278 <prvTaskExitError+0x28>
        __asm volatile
 800127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127e:	f383 8811 	msr	BASEPRI, r3
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	60bb      	str	r3, [r7, #8]
    }
 800128c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800128e:	bf00      	nop
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0fc      	beq.n	8001290 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000004 	.word	0x20000004
	...

080012b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <pxCurrentTCBConst2>)
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	6808      	ldr	r0, [r1, #0]
 80012b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ba:	f380 8809 	msr	PSP, r0
 80012be:	f3bf 8f6f 	isb	sy
 80012c2:	f04f 0000 	mov.w	r0, #0
 80012c6:	f380 8811 	msr	BASEPRI, r0
 80012ca:	4770      	bx	lr
 80012cc:	f3af 8000 	nop.w

080012d0 <pxCurrentTCBConst2>:
 80012d0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop

080012d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <prvPortStartFirstTask+0x24>)
 80012da:	6800      	ldr	r0, [r0, #0]
 80012dc:	6800      	ldr	r0, [r0, #0]
 80012de:	f380 8808 	msr	MSP, r0
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	f380 8814 	msr	CONTROL, r0
 80012ea:	b662      	cpsie	i
 80012ec:	b661      	cpsie	f
 80012ee:	f3bf 8f4f 	dsb	sy
 80012f2:	f3bf 8f6f 	isb	sy
 80012f6:	df00      	svc	0
 80012f8:	bf00      	nop
 80012fa:	0000      	.short	0x0000
 80012fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop

08001304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <xPortStartScheduler+0x120>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a46      	ldr	r2, [pc, #280]	; (8001428 <xPortStartScheduler+0x124>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d10a      	bne.n	800132a <xPortStartScheduler+0x26>
        __asm volatile
 8001314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	613b      	str	r3, [r7, #16]
    }
 8001326:	bf00      	nop
 8001328:	e7fe      	b.n	8001328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <xPortStartScheduler+0x120>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a3f      	ldr	r2, [pc, #252]	; (800142c <xPortStartScheduler+0x128>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d10a      	bne.n	800134a <xPortStartScheduler+0x46>
        __asm volatile
 8001334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001338:	f383 8811 	msr	BASEPRI, r3
 800133c:	f3bf 8f6f 	isb	sy
 8001340:	f3bf 8f4f 	dsb	sy
 8001344:	60fb      	str	r3, [r7, #12]
    }
 8001346:	bf00      	nop
 8001348:	e7fe      	b.n	8001348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <xPortStartScheduler+0x12c>)
 800134c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	22ff      	movs	r2, #255	; 0xff
 800135a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <xPortStartScheduler+0x130>)
 8001370:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <xPortStartScheduler+0x134>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001378:	e009      	b.n	800138e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <xPortStartScheduler+0x134>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <xPortStartScheduler+0x134>)
 8001382:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b80      	cmp	r3, #128	; 0x80
 8001398:	d0ef      	beq.n	800137a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <xPortStartScheduler+0x134>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d00a      	beq.n	80013bc <xPortStartScheduler+0xb8>
        __asm volatile
 80013a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013aa:	f383 8811 	msr	BASEPRI, r3
 80013ae:	f3bf 8f6f 	isb	sy
 80013b2:	f3bf 8f4f 	dsb	sy
 80013b6:	60bb      	str	r3, [r7, #8]
    }
 80013b8:	bf00      	nop
 80013ba:	e7fe      	b.n	80013ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <xPortStartScheduler+0x134>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <xPortStartScheduler+0x134>)
 80013c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <xPortStartScheduler+0x134>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013ce:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <xPortStartScheduler+0x134>)
 80013d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <xPortStartScheduler+0x138>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <xPortStartScheduler+0x138>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <xPortStartScheduler+0x138>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <xPortStartScheduler+0x138>)
 80013ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80013f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80013f2:	f000 f8db 	bl	80015ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <xPortStartScheduler+0x13c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80013fc:	f000 f8fa 	bl	80015f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <xPortStartScheduler+0x140>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <xPortStartScheduler+0x140>)
 8001406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800140a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800140c:	f7ff ff64 	bl	80012d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001410:	f7ff fd5c 	bl	8000ecc <vTaskSwitchContext>
    prvTaskExitError();
 8001414:	f7ff ff1c 	bl	8001250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	410fc271 	.word	0x410fc271
 800142c:	410fc270 	.word	0x410fc270
 8001430:	e000e400 	.word	0xe000e400
 8001434:	2000015c 	.word	0x2000015c
 8001438:	20000160 	.word	0x20000160
 800143c:	e000ed20 	.word	0xe000ed20
 8001440:	20000004 	.word	0x20000004
 8001444:	e000ef34 	.word	0xe000ef34

08001448 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
        __asm volatile
 800144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	607b      	str	r3, [r7, #4]
    }
 8001460:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <vPortEnterCritical+0x58>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <vPortEnterCritical+0x58>)
 800146a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <vPortEnterCritical+0x58>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d10f      	bne.n	8001494 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <vPortEnterCritical+0x5c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <vPortEnterCritical+0x4c>
        __asm volatile
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	603b      	str	r3, [r7, #0]
    }
 8001490:	bf00      	nop
 8001492:	e7fe      	b.n	8001492 <vPortEnterCritical+0x4a>
    }
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20000004 	.word	0x20000004
 80014a4:	e000ed04 	.word	0xe000ed04

080014a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <vPortExitCritical+0x50>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10a      	bne.n	80014cc <vPortExitCritical+0x24>
        __asm volatile
 80014b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ba:	f383 8811 	msr	BASEPRI, r3
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f3bf 8f4f 	dsb	sy
 80014c6:	607b      	str	r3, [r7, #4]
    }
 80014c8:	bf00      	nop
 80014ca:	e7fe      	b.n	80014ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <vPortExitCritical+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <vPortExitCritical+0x50>)
 80014d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <vPortExitCritical+0x50>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <vPortExitCritical+0x42>
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80014e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000004 	.word	0x20000004
 80014fc:	00000000 	.word	0x00000000

08001500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001500:	f3ef 8009 	mrs	r0, PSP
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <pxCurrentTCBConst>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f01e 0f10 	tst.w	lr, #16
 8001510:	bf08      	it	eq
 8001512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800151a:	6010      	str	r0, [r2, #0]
 800151c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001524:	f380 8811 	msr	BASEPRI, r0
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
 8001530:	f7ff fccc 	bl	8000ecc <vTaskSwitchContext>
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f380 8811 	msr	BASEPRI, r0
 800153c:	bc09      	pop	{r0, r3}
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	6808      	ldr	r0, [r1, #0]
 8001542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001546:	f01e 0f10 	tst.w	lr, #16
 800154a:	bf08      	it	eq
 800154c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001550:	f380 8809 	msr	PSP, r0
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w

08001560 <pxCurrentTCBConst>:
 8001560:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop

08001568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
        __asm volatile
 800156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001572:	f383 8811 	msr	BASEPRI, r3
 8001576:	f3bf 8f6f 	isb	sy
 800157a:	f3bf 8f4f 	dsb	sy
 800157e:	607b      	str	r3, [r7, #4]
    }
 8001580:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001582:	f7ff fb8d 	bl	8000ca0 <xTaskIncrementTick>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SysTick_Handler+0x40>)
 800158e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f383 8811 	msr	BASEPRI, r3
    }
 800159e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	e000ed04 	.word	0xe000ed04

080015ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <vPortSetupTimerInterrupt+0x34>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <vPortSetupTimerInterrupt+0x38>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <vPortSetupTimerInterrupt+0x3c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <vPortSetupTimerInterrupt+0x40>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <vPortSetupTimerInterrupt+0x44>)
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <vPortSetupTimerInterrupt+0x34>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010
 80015e4:	e000e018 	.word	0xe000e018
 80015e8:	20000008 	.word	0x20000008
 80015ec:	10624dd3 	.word	0x10624dd3
 80015f0:	e000e014 	.word	0xe000e014

080015f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80015f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001604 <vPortEnableVFP+0x10>
 80015f8:	6801      	ldr	r1, [r0, #0]
 80015fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015fe:	6001      	str	r1, [r0, #0]
 8001600:	4770      	bx	lr
 8001602:	0000      	.short	0x0000
 8001604:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop

0800160c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001618:	f7ff fa28 	bl	8000a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <pvPortMalloc+0x160>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001624:	f000 f908 	bl	8001838 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800162e:	2208      	movs	r2, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	3308      	adds	r3, #8
 800163a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d804      	bhi.n	8001650 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4413      	add	r3, r2
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e001      	b.n	8001654 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db70      	blt.n	800173c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06d      	beq.n	800173c <pvPortMalloc+0x130>
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <pvPortMalloc+0x164>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d868      	bhi.n	800173c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <pvPortMalloc+0x168>)
 800166c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <pvPortMalloc+0x168>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001674:	e004      	b.n	8001680 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	d903      	bls.n	8001692 <pvPortMalloc+0x86>
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f1      	bne.n	8001676 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <pvPortMalloc+0x160>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	429a      	cmp	r2, r3
 800169a:	d04f      	beq.n	800173c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2208      	movs	r2, #8
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1ad2      	subs	r2, r2, r3
 80016b6:	2308      	movs	r3, #8
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d91f      	bls.n	80016fe <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00a      	beq.n	80016e6 <pvPortMalloc+0xda>
        __asm volatile
 80016d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d4:	f383 8811 	msr	BASEPRI, r3
 80016d8:	f3bf 8f6f 	isb	sy
 80016dc:	f3bf 8f4f 	dsb	sy
 80016e0:	613b      	str	r3, [r7, #16]
    }
 80016e2:	bf00      	nop
 80016e4:	e7fe      	b.n	80016e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f000 f8f9 	bl	80018f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <pvPortMalloc+0x164>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <pvPortMalloc+0x164>)
 800170a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <pvPortMalloc+0x164>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <pvPortMalloc+0x16c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d203      	bcs.n	8001720 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <pvPortMalloc+0x164>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <pvPortMalloc+0x16c>)
 800171e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <pvPortMalloc+0x170>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a10      	ldr	r2, [pc, #64]	; (800177c <pvPortMalloc+0x170>)
 800173a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800173c:	f7ff f9a4 	bl	8000a88 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <pvPortMalloc+0x154>
        __asm volatile
 800174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174e:	f383 8811 	msr	BASEPRI, r3
 8001752:	f3bf 8f6f 	isb	sy
 8001756:	f3bf 8f4f 	dsb	sy
 800175a:	60fb      	str	r3, [r7, #12]
    }
 800175c:	bf00      	nop
 800175e:	e7fe      	b.n	800175e <pvPortMalloc+0x152>
    return pvReturn;
 8001760:	69fb      	ldr	r3, [r7, #28]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000d24 	.word	0x20000d24
 8001770:	20000d28 	.word	0x20000d28
 8001774:	20000d1c 	.word	0x20000d1c
 8001778:	20000d2c 	.word	0x20000d2c
 800177c:	20000d30 	.word	0x20000d30

08001780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d049      	beq.n	8001826 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001792:	2308      	movs	r3, #8
 8001794:	425b      	negs	r3, r3
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <vPortFree+0x3e>
        __asm volatile
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	60fb      	str	r3, [r7, #12]
    }
 80017ba:	bf00      	nop
 80017bc:	e7fe      	b.n	80017bc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <vPortFree+0x5c>
        __asm volatile
 80017c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ca:	f383 8811 	msr	BASEPRI, r3
 80017ce:	f3bf 8f6f 	isb	sy
 80017d2:	f3bf 8f4f 	dsb	sy
 80017d6:	60bb      	str	r3, [r7, #8]
    }
 80017d8:	bf00      	nop
 80017da:	e7fe      	b.n	80017da <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0fdb      	lsrs	r3, r3, #31
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d118      	bne.n	8001826 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001800:	f7ff f934 	bl	8000a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <vPortFree+0xb0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4413      	add	r3, r2
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <vPortFree+0xb0>)
 8001810:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001812:	6938      	ldr	r0, [r7, #16]
 8001814:	f000 f86c 	bl	80018f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <vPortFree+0xb4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <vPortFree+0xb4>)
 8001820:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001822:	f7ff f931 	bl	8000a88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000d28 	.word	0x20000d28
 8001834:	20000d34 	.word	0x20000d34

08001838 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800183e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001842:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <prvHeapInit+0xa4>)
 8001846:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3307      	adds	r3, #7
 8001856:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 0307 	bic.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <prvHeapInit+0xa4>)
 8001868:	4413      	add	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <prvHeapInit+0xa8>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <prvHeapInit+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001884:	2208      	movs	r2, #8
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <prvHeapInit+0xac>)
 8001898:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <prvHeapInit+0xac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <prvHeapInit+0xac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <prvHeapInit+0xac>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <prvHeapInit+0xb0>)
 80018c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <prvHeapInit+0xb4>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	20000164 	.word	0x20000164
 80018e0:	20000d1c 	.word	0x20000d1c
 80018e4:	20000d24 	.word	0x20000d24
 80018e8:	20000d2c 	.word	0x20000d2c
 80018ec:	20000d28 	.word	0x20000d28

080018f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <prvInsertBlockIntoFreeList+0xac>)
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e002      	b.n	8001904 <prvInsertBlockIntoFreeList+0x14>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8f7      	bhi.n	80018fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4413      	add	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d108      	bne.n	8001932 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	441a      	add	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	441a      	add	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d118      	bne.n	8001978 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <prvInsertBlockIntoFreeList+0xb0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d00d      	beq.n	800196e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	441a      	add	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e008      	b.n	8001980 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <prvInsertBlockIntoFreeList+0xb0>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e003      	b.n	8001980 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d002      	beq.n	800198e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000d1c 	.word	0x20000d1c
 80019a0:	20000d24 	.word	0x20000d24

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f001 fade 	bl	8002f6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f841 	bl	8001a34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019b2:	f000 f89d 	bl	8001af0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fbef 	bl	8002198 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019ba:	f000 f8c9 	bl	8001b50 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80019be:	f000 f92b 	bl	8001c18 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80019c2:	f000 f961 	bl	8001c88 <MX_I2C1_Init>
  MX_I2C2_Init();
 80019c6:	f000 f99d 	bl	8001d04 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80019ca:	f000 f9d9 	bl	8001d80 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80019ce:	f000 fa2d 	bl	8001e2c <MX_SPI1_Init>
  MX_SPI3_Init();
 80019d2:	f000 fa69 	bl	8001ea8 <MX_SPI3_Init>
  MX_UART4_Init();
 80019d6:	f000 faa5 	bl	8001f24 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80019da:	f000 faef 	bl	8001fbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019de:	f000 fb39 	bl	8002054 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019e2:	f000 fb85 	bl	80020f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80019e6:	f000 fbcf 	bl	8002188 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 80019ea:	f000 fd27 	bl	800243c <MyLED2_init>
 MyButton_init();
 80019ee:	f000 fd57 	bl	80024a0 <MyButton_init>
 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <main+0x80>)
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2303      	movs	r3, #3
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019fe:	22c8      	movs	r2, #200	; 0xc8
 8001a00:	4909      	ldr	r1, [pc, #36]	; (8001a28 <main+0x84>)
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <main+0x88>)
 8001a04:	f7fe fe0a 	bl	800061c <xTaskCreate>
 8001a08:	6078      	str	r0, [r7, #4]
 if(flag!=pdPASS)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d001      	beq.n	8001a14 <main+0x70>
 {
	 Error_Handler();
 8001a10:	f000 fe2c 	bl	800266c <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8001a14:	f7ff f934 	bl	8000c80 <xTaskGetTickCount>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <main+0x8c>)
 8001a1c:	6013      	str	r3, [r2, #0]
 //start Scheduler
 vTaskStartScheduler();
 8001a1e:	f7fe ffd9 	bl	80009d4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <main+0x7e>
 8001a24:	20000d38 	.word	0x20000d38
 8001a28:	08007f58 	.word	0x08007f58
 8001a2c:	0800254d 	.word	0x0800254d
 8001a30:	20000d3c 	.word	0x20000d3c

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b096      	sub	sp, #88	; 0x58
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2244      	movs	r2, #68	; 0x44
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f006 fa4c 	bl	8007ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a5a:	f003 fbad 	bl	80051b8 <HAL_PWREx_ControlVoltageScaling>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a64:	f000 fe02 	bl	800266c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a68:	f003 fb76 	bl	8005158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <SystemClock_Config+0xb8>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <SystemClock_Config+0xb8>)
 8001a74:	f023 0318 	bic.w	r3, r3, #24
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001a7c:	2316      	movs	r3, #22
 8001a7e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a8a:	2340      	movs	r3, #64	; 0x40
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a96:	2360      	movs	r3, #96	; 0x60
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fc2c 	bl	8005300 <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001aae:	f000 fddd 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001abe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001ac4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ac8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 f830 	bl	8005b34 <HAL_RCC_ClockConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001ada:	f000 fdc7 	bl	800266c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ade:	f004 fe49 	bl	8006774 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ae2:	bf00      	nop
 8001ae4:	3758      	adds	r7, #88	; 0x58
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0a6      	sub	sp, #152	; 0x98
 8001af4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2294      	movs	r2, #148	; 0x94
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 f9ef 	bl	8007ee0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001b02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b14:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b16:	2301      	movs	r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b1e:	2318      	movs	r3, #24
 8001b20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001b2e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001b32:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 faec 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b42:	f000 fd93 	bl	800266c <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3798      	adds	r7, #152	; 0x98
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bc8:	f001 fbcc 	bl	8003364 <HAL_ADC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001bd2:	f000 fd4b 	bl	800266c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_ADC1_Init+0xc4>)
 8001bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001be2:	237f      	movs	r3, #127	; 0x7f
 8001be4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001be6:	2304      	movs	r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <MX_ADC1_Init+0xbc>)
 8001bf4:	f001 fcfc 	bl	80035f0 <HAL_ADC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001bfe:	f000 fd35 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000d40 	.word	0x20000d40
 8001c10:	50040000 	.word	0x50040000
 8001c14:	04300002 	.word	0x04300002

08001c18 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <MX_DFSDM1_Init+0x6c>)
 8001c20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c30:	2202      	movs	r2, #2
 8001c32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c6c:	f002 f99e 	bl	8003fac <HAL_DFSDM_ChannelInit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001c76:	f000 fcf9 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000da8 	.word	0x20000da8
 8001c84:	40016040 	.word	0x40016040

08001c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <MX_I2C1_Init+0x78>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001c94:	f640 6214 	movw	r2, #3604	; 0xe14
 8001c98:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cc6:	f002 fc3f 	bl	8004548 <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 fccc 	bl	800266c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cd8:	f002 fcd1 	bl	800467e <HAL_I2CEx_ConfigAnalogFilter>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001ce2:	f000 fcc3 	bl	800266c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_I2C1_Init+0x74>)
 8001cea:	f002 fd13 	bl	8004714 <HAL_I2CEx_ConfigDigitalFilter>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001cf4:	f000 fcba 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000de0 	.word	0x20000de0
 8001d00:	40005400 	.word	0x40005400

08001d04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <MX_I2C2_Init+0x78>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d10:	f640 6214 	movw	r2, #3604	; 0xe14
 8001d14:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d42:	f002 fc01 	bl	8004548 <HAL_I2C_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d4c:	f000 fc8e 	bl	800266c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d54:	f002 fc93 	bl	800467e <HAL_I2CEx_ConfigAnalogFilter>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001d5e:	f000 fc85 	bl	800266c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <MX_I2C2_Init+0x74>)
 8001d66:	f002 fcd5 	bl	8004714 <HAL_I2CEx_ConfigDigitalFilter>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001d70:	f000 fc7c 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000e34 	.word	0x20000e34
 8001d7c:	40005800 	.word	0x40005800

08001d80 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001d96:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <MX_OCTOSPI1_Init+0xa8>)
 8001d98:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dac:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001db0:	2220      	movs	r2, #32
 8001db2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001de0:	2208      	movs	r2, #8
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001de6:	f002 fce1 	bl	80047ac <HAL_OSPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001df0:	f000 fc3c 	bl	800266c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001dfc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001e00:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_OCTOSPI1_Init+0xa4>)
 8001e0c:	f002 fd88 	bl	8004920 <HAL_OSPIM_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001e16:	f000 fc29 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000e88 	.word	0x20000e88
 8001e28:	a0001000 	.word	0xa0001000

08001e2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_SPI1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e62:	2208      	movs	r2, #8
 8001e64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e86:	2208      	movs	r2, #8
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e8c:	f004 fe6a 	bl	8006b64 <HAL_SPI_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f000 fbe9 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000ed8 	.word	0x20000ed8
 8001ea4:	40013000 	.word	0x40013000

08001ea8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_SPI3_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ec2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ec6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ede:	2208      	movs	r2, #8
 8001ee0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001f02:	2208      	movs	r2, #8
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_SPI3_Init+0x74>)
 8001f08:	f004 fe2c 	bl	8006b64 <HAL_SPI_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f000 fbab 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000f3c 	.word	0x20000f3c
 8001f20:	40003c00 	.word	0x40003c00

08001f24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f2a:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <MX_UART4_Init+0x94>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f6e:	f005 f94f 	bl	8007210 <HAL_UART_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f78:	f000 fb78 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f80:	f005 fee4 	bl	8007d4c <HAL_UARTEx_SetTxFifoThreshold>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f8a:	f000 fb6f 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001f92:	f005 ff19 	bl	8007dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f9c:	f000 fb66 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_UART4_Init+0x90>)
 8001fa2:	f005 fe9a 	bl	8007cda <HAL_UARTEx_DisableFifoMode>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001fac:	f000 fb5e 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000fa0 	.word	0x20000fa0
 8001fb8:	40004c00 	.word	0x40004c00

08001fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <MX_USART1_UART_Init+0x94>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002004:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002006:	f005 f903 	bl	8007210 <HAL_UART_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002010:	f000 fb2c 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002018:	f005 fe98 	bl	8007d4c <HAL_UARTEx_SetTxFifoThreshold>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002022:	f000 fb23 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_USART1_UART_Init+0x90>)
 800202a:	f005 fecd 	bl	8007dc8 <HAL_UARTEx_SetRxFifoThreshold>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002034:	f000 fb1a 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_USART1_UART_Init+0x90>)
 800203a:	f005 fe4e 	bl	8007cda <HAL_UARTEx_DisableFifoMode>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002044:	f000 fb12 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20001034 	.word	0x20001034
 8002050:	40013800 	.word	0x40013800

08002054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800205c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002080:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002084:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800209e:	4812      	ldr	r0, [pc, #72]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 80020a0:	f005 f8b6 	bl	8007210 <HAL_UART_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80020aa:	f000 fadf 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ae:	2100      	movs	r1, #0
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 80020b2:	f005 fe4b 	bl	8007d4c <HAL_UARTEx_SetTxFifoThreshold>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80020bc:	f000 fad6 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c0:	2100      	movs	r1, #0
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 80020c4:	f005 fe80 	bl	8007dc8 <HAL_UARTEx_SetRxFifoThreshold>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80020ce:	f000 facd 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_USART2_UART_Init+0x94>)
 80020d4:	f005 fe01 	bl	8007cda <HAL_UARTEx_DisableFifoMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80020de:	f000 fac5 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200010c8 	.word	0x200010c8
 80020ec:	40004400 	.word	0x40004400

080020f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_USART3_UART_Init+0x90>)
 80020f6:	4a23      	ldr	r2, [pc, #140]	; (8002184 <MX_USART3_UART_Init+0x94>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <MX_USART3_UART_Init+0x90>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800213a:	f005 f869 	bl	8007210 <HAL_UART_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002144:	f000 fa92 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002148:	2100      	movs	r1, #0
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800214c:	f005 fdfe 	bl	8007d4c <HAL_UARTEx_SetTxFifoThreshold>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002156:	f000 fa89 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215a:	2100      	movs	r1, #0
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800215e:	f005 fe33 	bl	8007dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002168:	f000 fa80 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_USART3_UART_Init+0x90>)
 800216e:	f005 fdb4 	bl	8007cda <HAL_UARTEx_DisableFifoMode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002178:	f000 fa78 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000115c 	.word	0x2000115c
 8002184:	40004800 	.word	0x40004800

08002188 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <MX_GPIO_Init+0x290>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	4a9d      	ldr	r2, [pc, #628]	; (8002428 <MX_GPIO_Init+0x290>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ba:	4b9b      	ldr	r3, [pc, #620]	; (8002428 <MX_GPIO_Init+0x290>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b98      	ldr	r3, [pc, #608]	; (8002428 <MX_GPIO_Init+0x290>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a97      	ldr	r2, [pc, #604]	; (8002428 <MX_GPIO_Init+0x290>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b95      	ldr	r3, [pc, #596]	; (8002428 <MX_GPIO_Init+0x290>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	4b92      	ldr	r3, [pc, #584]	; (8002428 <MX_GPIO_Init+0x290>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a91      	ldr	r2, [pc, #580]	; (8002428 <MX_GPIO_Init+0x290>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <MX_GPIO_Init+0x290>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <MX_GPIO_Init+0x290>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a8b      	ldr	r2, [pc, #556]	; (8002428 <MX_GPIO_Init+0x290>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <MX_GPIO_Init+0x290>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b86      	ldr	r3, [pc, #536]	; (8002428 <MX_GPIO_Init+0x290>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a85      	ldr	r2, [pc, #532]	; (8002428 <MX_GPIO_Init+0x290>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b83      	ldr	r3, [pc, #524]	; (8002428 <MX_GPIO_Init+0x290>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002226:	4b80      	ldr	r3, [pc, #512]	; (8002428 <MX_GPIO_Init+0x290>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <MX_GPIO_Init+0x290>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <MX_GPIO_Init+0x290>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f240 1105 	movw	r1, #261	; 0x105
 8002244:	4879      	ldr	r0, [pc, #484]	; (800242c <MX_GPIO_Init+0x294>)
 8002246:	f002 f94f 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800224a:	2200      	movs	r2, #0
 800224c:	f248 111c 	movw	r1, #33052	; 0x811c
 8002250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002254:	f002 f948 	bl	80044e8 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002258:	2200      	movs	r2, #0
 800225a:	f24f 0134 	movw	r1, #61492	; 0xf034
 800225e:	4874      	ldr	r0, [pc, #464]	; (8002430 <MX_GPIO_Init+0x298>)
 8002260:	f002 f942 	bl	80044e8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f242 0183 	movw	r1, #8323	; 0x2083
 800226a:	4872      	ldr	r0, [pc, #456]	; (8002434 <MX_GPIO_Init+0x29c>)
 800226c:	f002 f93c 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002276:	4870      	ldr	r0, [pc, #448]	; (8002438 <MX_GPIO_Init+0x2a0>)
 8002278:	f002 f936 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800227c:	f240 1305 	movw	r3, #261	; 0x105
 8002280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4865      	ldr	r0, [pc, #404]	; (800242c <MX_GPIO_Init+0x294>)
 8002296:	f001 ff95 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800229a:	237a      	movs	r3, #122	; 0x7a
 800229c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	485f      	ldr	r0, [pc, #380]	; (800242c <MX_GPIO_Init+0x294>)
 80022b0:	f001 ff88 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80022b4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	485b      	ldr	r0, [pc, #364]	; (8002438 <MX_GPIO_Init+0x2a0>)
 80022cc:	f001 ff7a 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80022d0:	f248 131c 	movw	r3, #33052	; 0x811c
 80022d4:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ec:	f001 ff6a 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	484a      	ldr	r0, [pc, #296]	; (8002430 <MX_GPIO_Init+0x298>)
 8002306:	f001 ff5d 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800231a:	2302      	movs	r3, #2
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4842      	ldr	r0, [pc, #264]	; (8002430 <MX_GPIO_Init+0x298>)
 8002326:	f001 ff4d 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800232a:	f24b 0334 	movw	r3, #45108	; 0xb034
 800232e:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	483b      	ldr	r0, [pc, #236]	; (8002430 <MX_GPIO_Init+0x298>)
 8002344:	f001 ff3e 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4833      	ldr	r0, [pc, #204]	; (8002430 <MX_GPIO_Init+0x298>)
 8002362:	f001 ff2f 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002366:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800236a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	482d      	ldr	r0, [pc, #180]	; (8002434 <MX_GPIO_Init+0x29c>)
 800237e:	f001 ff21 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002382:	f242 0383 	movw	r3, #8323	; 0x2083
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4826      	ldr	r0, [pc, #152]	; (8002434 <MX_GPIO_Init+0x29c>)
 800239c:	f001 ff12 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80023a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	481f      	ldr	r0, [pc, #124]	; (8002438 <MX_GPIO_Init+0x2a0>)
 80023ba:	f001 ff03 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f001 fef5 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ec:	230a      	movs	r3, #10
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fa:	f001 fee3 	bl	80041c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2017      	movs	r0, #23
 8002404:	f001 fda8 	bl	8003f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002408:	2017      	movs	r0, #23
 800240a:	f001 fdc1 	bl	8003f90 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2028      	movs	r0, #40	; 0x28
 8002414:	f001 fda0 	bl	8003f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002418:	2028      	movs	r0, #40	; 0x28
 800241a:	f001 fdb9 	bl	8003f90 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800241e:	bf00      	nop
 8002420:	3730      	adds	r7, #48	; 0x30
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	48001000 	.word	0x48001000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000c00 	.word	0x48000c00
 8002438:	48000800 	.word	0x48000800

0800243c <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <MyLED2_init+0x60>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <MyLED2_init+0x60>)
 8002446:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800244a:	6013      	str	r3, [r2, #0]
  //Set the values
	GPIOB->MODER |=(0x1 <<28);
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <MyLED2_init+0x60>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <MyLED2_init+0x60>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14
	GPIOB->OTYPER &=~(1<<14);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <MyLED2_init+0x60>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <MyLED2_init+0x60>)
 800245e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002462:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MyLED2_init+0x60>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <MyLED2_init+0x60>)
 800246a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800246e:	6093      	str	r3, [r2, #8]
  //Set the values
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MyLED2_init+0x60>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <MyLED2_init+0x60>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MyLED2_init+0x60>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <MyLED2_init+0x60>)
 8002482:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002486:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOB->PUPDR |=(0x0 <<28);
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <MyLED2_init+0x60>)
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <MyLED2_init+0x60>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	60d3      	str	r3, [r2, #12]

}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	48000400 	.word	0x48000400

080024a0 <MyButton_init>:

static void MyButton_init(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <MyButton_init+0x80>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <MyButton_init+0x80>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MyButton_init+0x80>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <MyButton_init+0x84>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <MyButton_init+0x84>)
 80024c4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024c8:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MyButton_init+0x84>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <MyButton_init+0x84>)
 80024d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024d4:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOC->PUPDR |=(0x3 <<26);
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <MyButton_init+0x84>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <MyButton_init+0x84>)
 80024dc:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80024e0:	60d3      	str	r3, [r2, #12]
  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	//SYSCFG->EXTICR[3]|=(0x1<<4);
	SYSCFG->EXTICR[3]|=(0x1<<5);
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MyButton_init+0x88>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <MyButton_init+0x88>)
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	6153      	str	r3, [r2, #20]
	//SYSCFG->EXTICR[3]|=(0x1<<7);


  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MyButton_init+0x8c>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <MyButton_init+0x8c>)
 80024f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024f8:	60d3      	str	r3, [r2, #12]


  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MyButton_init+0x8c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <MyButton_init+0x8c>)
 8002500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002504:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <MyButton_init+0x90>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <MyButton_init+0x90>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6053      	str	r3, [r2, #4]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	48000800 	.word	0x48000800
 8002528:	40010000 	.word	0x40010000
 800252c:	40010400 	.word	0x40010400
 8002530:	e000e100 	.word	0xe000e100

08002534 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
	//set a flag to initialize SOS transmission
//	SOS_transmission=1;
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  while(1)
	  {
		  for(int j=0; j<3; j++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e06d      	b.n	8002636 <SOS_Transmit+0xea>
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e017      	b.n	8002590 <SOS_Transmit+0x44>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <SOS_Transmit+0xf4>)
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	4a36      	ldr	r2, [pc, #216]	; (8002640 <SOS_Transmit+0xf4>)
 8002566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256a:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelayUntil(&LastWakeTime, 300);
 800256c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002570:	4834      	ldr	r0, [pc, #208]	; (8002644 <SOS_Transmit+0xf8>)
 8002572:	f7fe f9b1 	bl	80008d8 <xTaskDelayUntil>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <SOS_Transmit+0xf4>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <SOS_Transmit+0xf4>)
 800257c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002580:	6153      	str	r3, [r2, #20]
                 HAL_Delay(300);
 8002582:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002586:	f000 fd29 	bl	8002fdc <HAL_Delay>
	        for(int i=0; i<3; i++)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3301      	adds	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b02      	cmp	r3, #2
 8002594:	dde4      	ble.n	8002560 <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelayUntil(&LastWakeTime, 300*2);
 8002596:	f44f 7116 	mov.w	r1, #600	; 0x258
 800259a:	482a      	ldr	r0, [pc, #168]	; (8002644 <SOS_Transmit+0xf8>)
 800259c:	f7fe f99c 	bl	80008d8 <xTaskDelayUntil>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e018      	b.n	80025d8 <SOS_Transmit+0x8c>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <SOS_Transmit+0xf4>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <SOS_Transmit+0xf4>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelayUntil(&LastWakeTime, 300*3);
 80025b2:	f44f 7161 	mov.w	r1, #900	; 0x384
 80025b6:	4823      	ldr	r0, [pc, #140]	; (8002644 <SOS_Transmit+0xf8>)
 80025b8:	f7fe f98e 	bl	80008d8 <xTaskDelayUntil>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <SOS_Transmit+0xf4>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <SOS_Transmit+0xf4>)
 80025c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c6:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		   vTaskDelayUntil(&LastWakeTime, 300);
 80025c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025cc:	481d      	ldr	r0, [pc, #116]	; (8002644 <SOS_Transmit+0xf8>)
 80025ce:	f7fe f983 	bl	80008d8 <xTaskDelayUntil>
	         for(int i=0; i<3; i++)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3301      	adds	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	dde3      	ble.n	80025a6 <SOS_Transmit+0x5a>
	 	       }
	 	     //3 time units between characters
	     //HAL_Delay(300*2);
	         vTaskDelayUntil(&LastWakeTime, 300*2);
 80025de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80025e2:	4818      	ldr	r0, [pc, #96]	; (8002644 <SOS_Transmit+0xf8>)
 80025e4:	f7fe f978 	bl	80008d8 <xTaskDelayUntil>
	         //sending 's'
	         for(int i=0; i<3; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	e018      	b.n	8002620 <SOS_Transmit+0xd4>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <SOS_Transmit+0xf4>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <SOS_Transmit+0xf4>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelayUntil(&LastWakeTime, 300);
 80025fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025fe:	4811      	ldr	r0, [pc, #68]	; (8002644 <SOS_Transmit+0xf8>)
 8002600:	f7fe f96a 	bl	80008d8 <xTaskDelayUntil>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <SOS_Transmit+0xf4>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <SOS_Transmit+0xf4>)
 800260a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260e:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelayUntil(&LastWakeTime, 300);
 8002610:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002614:	480b      	ldr	r0, [pc, #44]	; (8002644 <SOS_Transmit+0xf8>)
 8002616:	f7fe f95f 	bl	80008d8 <xTaskDelayUntil>
	         for(int i=0; i<3; i++)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b02      	cmp	r3, #2
 8002624:	dde3      	ble.n	80025ee <SOS_Transmit+0xa2>
	 		  }
	         //7 time units between words
	 	  // HAL_Delay(300*6);
	         vTaskDelayUntil(&LastWakeTime, 300*6);
 8002626:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800262a:	4806      	ldr	r0, [pc, #24]	; (8002644 <SOS_Transmit+0xf8>)
 800262c:	f7fe f954 	bl	80008d8 <xTaskDelayUntil>
		  for(int j=0; j<3; j++)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b02      	cmp	r3, #2
 800263a:	dd8e      	ble.n	800255a <SOS_Transmit+0xe>
 800263c:	e78a      	b.n	8002554 <SOS_Transmit+0x8>
 800263e:	bf00      	nop
 8002640:	48000400 	.word	0x48000400
 8002644:	20000d3c 	.word	0x20000d3c

08002648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800265a:	f000 fc9f 	bl	8002f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40001000 	.word	0x40001000

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_MspInit+0x44>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_MspInit+0x44>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6613      	str	r3, [r2, #96]	; 0x60
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_MspInit+0x44>)
 800268c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_MspInit+0x44>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_MspInit+0x44>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_MspInit+0x44>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <HAL_ADC_MspInit+0x74>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d123      	bne.n	800272a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_ADC_MspInit+0x78>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_ADC_MspInit+0x78>)
 80026e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_ADC_MspInit+0x78>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_ADC_MspInit+0x78>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_ADC_MspInit+0x78>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_ADC_MspInit+0x78>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002712:	233f      	movs	r3, #63	; 0x3f
 8002714:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002716:	230b      	movs	r3, #11
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_ADC_MspInit+0x7c>)
 8002726:	f001 fd4d 	bl	80041c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	; 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	50040000 	.word	0x50040000
 8002738:	40021000 	.word	0x40021000
 800273c:	48000800 	.word	0x48000800

08002740 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0ae      	sub	sp, #184	; 0xb8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2294      	movs	r2, #148	; 0x94
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f005 fbbd 	bl	8007ee0 <memset>
  if(DFSDM1_Init == 0)
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d142      	bne.n	80027f4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800276e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002772:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fcc8 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800278a:	f7ff ff6f 	bl	800266c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002798:	6613      	str	r3, [r2, #96]	; 0x60
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80027be:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027d8:	2306      	movs	r3, #6
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4807      	ldr	r0, [pc, #28]	; (8002804 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80027e6:	f001 fced 	bl	80041c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a02      	ldr	r2, [pc, #8]	; (80027fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80027f2:	6013      	str	r3, [r2, #0]
  }

}
 80027f4:	bf00      	nop
 80027f6:	37b8      	adds	r7, #184	; 0xb8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200011f0 	.word	0x200011f0
 8002800:	40021000 	.word	0x40021000
 8002804:	48001000 	.word	0x48001000

08002808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0b0      	sub	sp, #192	; 0xc0
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	2294      	movs	r2, #148	; 0x94
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f005 fb59 	bl	8007ee0 <memset>
  if(hi2c->Instance==I2C1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a42      	ldr	r2, [pc, #264]	; (800293c <HAL_I2C_MspInit+0x134>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d13c      	bne.n	80028b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002838:	2340      	movs	r3, #64	; 0x40
 800283a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fc65 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002850:	f7ff ff0c 	bl	800266c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002854:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_I2C_MspInit+0x138>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002858:	4a39      	ldr	r2, [pc, #228]	; (8002940 <HAL_I2C_MspInit+0x138>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_I2C_MspInit+0x138>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800286c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002874:	2312      	movs	r3, #18
 8002876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	2301      	movs	r3, #1
 800287c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002886:	2304      	movs	r3, #4
 8002888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002890:	4619      	mov	r1, r3
 8002892:	482c      	ldr	r0, [pc, #176]	; (8002944 <HAL_I2C_MspInit+0x13c>)
 8002894:	f001 fc96 	bl	80041c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_I2C_MspInit+0x138>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_I2C_MspInit+0x138>)
 800289e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_I2C_MspInit+0x138>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028b0:	e040      	b.n	8002934 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a24      	ldr	r2, [pc, #144]	; (8002948 <HAL_I2C_MspInit+0x140>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d13b      	bne.n	8002934 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fc23 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80028d4:	f7ff feca 	bl	800266c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_I2C_MspInit+0x138>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	4a18      	ldr	r2, [pc, #96]	; (8002940 <HAL_I2C_MspInit+0x138>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_I2C_MspInit+0x138>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80028f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f8:	2312      	movs	r3, #18
 80028fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fe:	2301      	movs	r3, #1
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800290a:	2304      	movs	r3, #4
 800290c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002914:	4619      	mov	r1, r3
 8002916:	480b      	ldr	r0, [pc, #44]	; (8002944 <HAL_I2C_MspInit+0x13c>)
 8002918:	f001 fc54 	bl	80041c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_I2C_MspInit+0x138>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_I2C_MspInit+0x138>)
 8002922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_I2C_MspInit+0x138>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
}
 8002934:	bf00      	nop
 8002936:	37c0      	adds	r7, #192	; 0xc0
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40005400 	.word	0x40005400
 8002940:	40021000 	.word	0x40021000
 8002944:	48000400 	.word	0x48000400
 8002948:	40005800 	.word	0x40005800

0800294c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0b0      	sub	sp, #192	; 0xc0
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	2294      	movs	r2, #148	; 0x94
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f005 fab7 	bl	8007ee0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_OSPI_MspInit+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d149      	bne.n	8002a10 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800297c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002980:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fbc1 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002998:	f7ff fe68 	bl	800266c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6513      	str	r3, [r2, #80]	; 0x50
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029d2:	f043 0310 	orr.w	r3, r3, #16
 80029d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_OSPI_MspInit+0xd0>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80029e4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80029e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80029fe:	230a      	movs	r3, #10
 8002a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <HAL_OSPI_MspInit+0xd4>)
 8002a0c:	f001 fbda 	bl	80041c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002a10:	bf00      	nop
 8002a12:	37c0      	adds	r7, #192	; 0xc0
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	a0001000 	.word	0xa0001000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	48001000 	.word	0x48001000

08002a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <HAL_SPI_MspInit+0xdc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d129      	bne.n	8002a9a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a50:	6613      	str	r3, [r2, #96]	; 0x60
 8002a52:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002a76:	23e0      	movs	r3, #224	; 0xe0
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a86:	2305      	movs	r3, #5
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a94:	f001 fb96 	bl	80041c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a98:	e02d      	b.n	8002af6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_SPI_MspInit+0xe4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d128      	bne.n	8002af6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_SPI_MspInit+0xe0>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002ad4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aea:	f107 031c 	add.w	r3, r7, #28
 8002aee:	4619      	mov	r1, r3
 8002af0:	4806      	ldr	r0, [pc, #24]	; (8002b0c <HAL_SPI_MspInit+0xe8>)
 8002af2:	f001 fb67 	bl	80041c4 <HAL_GPIO_Init>
}
 8002af6:	bf00      	nop
 8002af8:	3730      	adds	r7, #48	; 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40013000 	.word	0x40013000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40003c00 	.word	0x40003c00
 8002b0c:	48000800 	.word	0x48000800

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0b4      	sub	sp, #208	; 0xd0
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2c:	2294      	movs	r2, #148	; 0x94
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 f9d5 	bl	8007ee0 <memset>
  if(huart->Instance==UART4)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_UART_MspInit+0x238>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d13c      	bne.n	8002bba <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b40:	2308      	movs	r3, #8
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 fae1 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b58:	f7ff fd88 	bl	800266c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a7a      	ldr	r2, [pc, #488]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
 8002b68:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	4a74      	ldr	r2, [pc, #464]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b80:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb4:	f001 fb06 	bl	80041c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bb8:	e0c2      	b.n	8002d40 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a64      	ldr	r2, [pc, #400]	; (8002d50 <HAL_UART_MspInit+0x240>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d13b      	bne.n	8002c3c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fa9f 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002bdc:	f7ff fd46 	bl	800266c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be0:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	4a59      	ldr	r2, [pc, #356]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bea:	6613      	str	r3, [r2, #96]	; 0x60
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf8:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	4a53      	ldr	r2, [pc, #332]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c04:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002c10:	23c0      	movs	r3, #192	; 0xc0
 8002c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c32:	4619      	mov	r1, r3
 8002c34:	4847      	ldr	r0, [pc, #284]	; (8002d54 <HAL_UART_MspInit+0x244>)
 8002c36:	f001 fac5 	bl	80041c4 <HAL_GPIO_Init>
}
 8002c3a:	e081      	b.n	8002d40 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a45      	ldr	r2, [pc, #276]	; (8002d58 <HAL_UART_MspInit+0x248>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d13b      	bne.n	8002cbe <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fa5e 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002c5e:	f7ff fd05 	bl	800266c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002c92:	2378      	movs	r3, #120	; 0x78
 8002c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002caa:	2307      	movs	r3, #7
 8002cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4829      	ldr	r0, [pc, #164]	; (8002d5c <HAL_UART_MspInit+0x24c>)
 8002cb8:	f001 fa84 	bl	80041c4 <HAL_GPIO_Init>
}
 8002cbc:	e040      	b.n	8002d40 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_UART_MspInit+0x250>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d13b      	bne.n	8002d40 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fa1d 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002ce0:	f7ff fcc4 	bl	800266c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cee:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_UART_MspInit+0x23c>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002d14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4808      	ldr	r0, [pc, #32]	; (8002d5c <HAL_UART_MspInit+0x24c>)
 8002d3c:	f001 fa42 	bl	80041c4 <HAL_GPIO_Init>
}
 8002d40:	bf00      	nop
 8002d42:	37d0      	adds	r7, #208	; 0xd0
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40004c00 	.word	0x40004c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40013800 	.word	0x40013800
 8002d54:	48000400 	.word	0x48000400
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	48000c00 	.word	0x48000c00
 8002d60:	40004800 	.word	0x40004800

08002d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08e      	sub	sp, #56	; 0x38
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_InitTick+0xe0>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <HAL_InitTick+0xe0>)
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_InitTick+0xe0>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d8a:	f107 0210 	add.w	r2, r7, #16
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 f8cb 	bl	8005f30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002da4:	f003 f898 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8002da8:	6378      	str	r0, [r7, #52]	; 0x34
 8002daa:	e004      	b.n	8002db6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dac:	f003 f894 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8002db0:	4603      	mov	r3, r0
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_InitTick+0xe4>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_InitTick+0xe8>)
 8002dc6:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_InitTick+0xec>)
 8002dc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_InitTick+0xe8>)
 8002dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_InitTick+0xe8>)
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_InitTick+0xe8>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_InitTick+0xe8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_InitTick+0xe8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002dea:	4818      	ldr	r0, [pc, #96]	; (8002e4c <HAL_InitTick+0xe8>)
 8002dec:	f003 ff5d 	bl	8006caa <HAL_TIM_Base_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11b      	bne.n	8002e36 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002dfe:	4813      	ldr	r0, [pc, #76]	; (8002e4c <HAL_InitTick+0xe8>)
 8002e00:	f003 ffb4 	bl	8006d6c <HAL_TIM_Base_Start_IT>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d111      	bne.n	8002e36 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e12:	2036      	movs	r0, #54	; 0x36
 8002e14:	f001 f8bc 	bl	8003f90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d808      	bhi.n	8002e30 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	2036      	movs	r0, #54	; 0x36
 8002e24:	f001 f898 	bl	8003f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_InitTick+0xf0>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e002      	b.n	8002e36 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3738      	adds	r7, #56	; 0x38
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	200011f4 	.word	0x200011f4
 8002e50:	40001000 	.word	0x40001000
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <NMI_Handler+0x4>

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler+0x4>

08002e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <UsageFault_Handler+0x4>

08002e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002e88:	2020      	movs	r0, #32
 8002e8a:	f001 fb45 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002e8e:	2040      	movs	r0, #64	; 0x40
 8002e90:	f001 fb42 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002e94:	2080      	movs	r0, #128	; 0x80
 8002e96:	f001 fb3f 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002e9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e9e:	f001 fb3b 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002eaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002eae:	f001 fb33 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002eb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002eb6:	f001 fb2f 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002eba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ebe:	f001 fb2b 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ec6:	f001 fb27 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002eca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ece:	f001 fb23 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002ed2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ed6:	f001 fb1f 	bl	8004518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <TIM6_DAC_IRQHandler+0x10>)
 8002ee6:	f003 ffb1 	bl	8006e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200011f4 	.word	0x200011f4

08002ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <SystemInit+0x20>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <SystemInit+0x20>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f1c:	f7ff ffea 	bl	8002ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	; (8002f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <LoopForever+0xe>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	; (8002f64 <LoopForever+0x16>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f46:	f004 ffd3 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f4a:	f7fe fd2b 	bl	80019a4 <main>

08002f4e <LoopForever>:

LoopForever:
    b LoopForever
 8002f4e:	e7fe      	b.n	8002f4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f50:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002f5c:	08007fe8 	.word	0x08007fe8
  ldr r2, =_sbss
 8002f60:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002f64:	20001268 	.word	0x20001268

08002f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC1_IRQHandler>

08002f6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f74:	2003      	movs	r0, #3
 8002f76:	f000 ffe4 	bl	8003f42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7a:	200f      	movs	r0, #15
 8002f7c:	f7ff fef2 	bl	8002d64 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	71fb      	strb	r3, [r7, #7]
 8002f8a:	e001      	b.n	8002f90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f8c:	f7ff fb74 	bl	8002678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f90:	79fb      	ldrb	r3, [r7, #7]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000010 	.word	0x20000010
 8002fc0:	20001240 	.word	0x20001240

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20001240 	.word	0x20001240

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_Delay+0x44>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000010 	.word	0x20000010

08003024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3360      	adds	r3, #96	; 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <LL_ADC_SetOffset+0x44>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	03fff000 	.word	0x03fff000

080030d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3360      	adds	r3, #96	; 0x60
 80030e2:	461a      	mov	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	615a      	str	r2, [r3, #20]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3330      	adds	r3, #48	; 0x30
 800316c:	461a      	mov	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	211f      	movs	r1, #31
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	f003 011f 	and.w	r1, r3, #31
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	431a      	orrs	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3314      	adds	r3, #20
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0e5b      	lsrs	r3, r3, #25
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	0d1b      	lsrs	r3, r3, #20
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2107      	movs	r1, #7
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	401a      	ands	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0d1b      	lsrs	r3, r3, #20
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0318 	and.w	r3, r3, #24
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003230:	40d9      	lsrs	r1, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	400b      	ands	r3, r1
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	0007ffff 	.word	0x0007ffff

08003254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6093      	str	r3, [r2, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800328c:	d101      	bne.n	8003292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <LL_ADC_IsEnabled+0x18>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_ADC_IsEnabled+0x1a>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d101      	bne.n	800332e <LL_ADC_REG_IsConversionOngoing+0x18>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d101      	bne.n	8003354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e129      	b.n	80035d2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff f997 	bl	80026c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff67 	bl	8003278 <LL_ADC_IsDeepPowerDownEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff4d 	bl	8003254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff82 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d115      	bne.n	80033f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff66 	bl	80032a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_ADC_Init+0x278>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	4a81      	ldr	r2, [pc, #516]	; (80035e0 <HAL_ADC_Init+0x27c>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ff64 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10d      	bne.n	8003422 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f043 0210 	orr.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff75 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 800342c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 80c2 	bne.w	80035c0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 80be 	bne.w	80035c0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800344c:	f043 0202 	orr.w	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff49 	bl	80032f0 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003464:	485f      	ldr	r0, [pc, #380]	; (80035e4 <HAL_ADC_Init+0x280>)
 8003466:	f7ff ff43 	bl	80032f0 <LL_ADC_IsEnabled>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	485c      	ldr	r0, [pc, #368]	; (80035e8 <HAL_ADC_Init+0x284>)
 8003478:	f7ff fdd4 	bl	8003024 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7e5b      	ldrb	r3, [r3, #25]
 8003480:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003486:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800348c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003492:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d106      	bne.n	80034b8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	3b01      	subs	r3, #1
 80034b0:	045b      	lsls	r3, r3, #17
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_ADC_Init+0x288>)
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff25 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80034f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d140      	bne.n	800357c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d13d      	bne.n	800357c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800350a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003512:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003522:	f023 0306 	bic.w	r3, r3, #6
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003536:	2b01      	cmp	r3, #1
 8003538:	d118      	bne.n	800356c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800355c:	430a      	orrs	r2, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	e007      	b.n	800357c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10c      	bne.n	800359e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f023 010f 	bic.w	r1, r3, #15
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	1e5a      	subs	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
 800359c:	e007      	b.n	80035ae <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 020f 	bic.w	r2, r2, #15
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58
 80035be:	e007      	b.n	80035d0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f043 0210 	orr.w	r2, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000008 	.word	0x20000008
 80035e0:	053e2d63 	.word	0x053e2d63
 80035e4:	50040000 	.word	0x50040000
 80035e8:	50040300 	.word	0x50040300
 80035ec:	fff0c007 	.word	0xfff0c007

080035f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b0b6      	sub	sp, #216	; 0xd8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x22>
 800360e:	2302      	movs	r3, #2
 8003610:	e3d5      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x7ce>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fe79 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 83ba 	bne.w	8003da0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d824      	bhi.n	8003686 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	3b02      	subs	r3, #2
 8003642:	2b03      	cmp	r3, #3
 8003644:	d81b      	bhi.n	800367e <HAL_ADC_ConfigChannel+0x8e>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_ADC_ConfigChannel+0x5c>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003665 	.word	0x08003665
 8003654:	0800366d 	.word	0x0800366d
 8003658:	08003675 	.word	0x08003675
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800365c:	230c      	movs	r3, #12
 800365e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003662:	e010      	b.n	8003686 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003664:	2312      	movs	r3, #18
 8003666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800366a:	e00c      	b.n	8003686 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800366c:	2318      	movs	r3, #24
 800366e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003672:	e008      	b.n	8003686 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800367c:	e003      	b.n	8003686 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800367e:	2306      	movs	r3, #6
 8003680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003684:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003694:	f7ff fd62 	bl	800315c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fe3a 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 80036a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fe46 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80036b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 81bf 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 81ba 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d0:	d10f      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	f7ff fd69 	bl	80031b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fd23 	bl	8003136 <LL_ADC_SetSamplingTimeCommonConfig>
 80036f0:	e00e      	b.n	8003710 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7ff fd58 	bl	80031b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fd13 	bl	8003136 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d00a      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6919      	ldr	r1, [r3, #16]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003742:	f7ff fca3 	bl	800308c <LL_ADC_SetOffset>
 8003746:	e179      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fcc0 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x184>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fcb5 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800376a:	4603      	mov	r3, r0
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	e01e      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1c2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fcaa 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800379a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80037a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x1da>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	e018      	b.n	80037fc <HAL_ADC_ConfigChannel+0x20c>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80037de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80037e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e004      	b.n	80037fc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80037f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fc79 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fc5d 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800381a:	4603      	mov	r3, r0
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_ADC_ConfigChannel+0x24a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fc52 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003830:	4603      	mov	r3, r0
 8003832:	0e9b      	lsrs	r3, r3, #26
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	e01e      	b.n	8003878 <HAL_ADC_ConfigChannel+0x288>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fc47 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800385c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e004      	b.n	8003876 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800386c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x2a0>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	e018      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x2d2>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80038a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80038ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e004      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80038b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d106      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fc16 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2102      	movs	r1, #2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fbfa 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x310>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2102      	movs	r1, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fbef 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	f003 021f 	and.w	r2, r3, #31
 80038fe:	e01e      	b.n	800393e <HAL_ADC_ConfigChannel+0x34e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2102      	movs	r1, #2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fbe4 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800391e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e004      	b.n	800393c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x366>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	e014      	b.n	8003980 <HAL_ADC_ConfigChannel+0x390>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800396a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003972:	2320      	movs	r3, #32
 8003974:	e004      	b.n	8003980 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003980:	429a      	cmp	r2, r3
 8003982:	d106      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fbb7 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2103      	movs	r1, #3
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb9b 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_ADC_ConfigChannel+0x3ce>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2103      	movs	r1, #3
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fb90 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	0e9b      	lsrs	r3, r3, #26
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	e017      	b.n	80039ee <HAL_ADC_ConfigChannel+0x3fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2103      	movs	r1, #3
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fb85 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80039e0:	2320      	movs	r3, #32
 80039e2:	e003      	b.n	80039ec <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80039e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x416>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	0e9b      	lsrs	r3, r3, #26
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	e011      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x43a>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a16:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d106      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2103      	movs	r1, #3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fb62 	bl	8003100 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fc55 	bl	80032f0 <LL_ADC_IsEnabled>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f040 813f 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f7ff fbd6 	bl	800320c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a8e      	ldr	r2, [pc, #568]	; (8003ca0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f040 8130 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x4a4>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	3301      	adds	r3, #1
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e019      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x4d8>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003aac:	2320      	movs	r3, #32
 8003aae:	e003      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	bf94      	ite	ls
 8003ac2:	2301      	movls	r3, #1
 8003ac4:	2300      	movhi	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d079      	beq.n	8003bc0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x4f8>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	3301      	adds	r3, #1
 8003ae0:	069b      	lsls	r3, r3, #26
 8003ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae6:	e015      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x524>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003b00:	2320      	movs	r3, #32
 8003b02:	e003      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	069b      	lsls	r3, r3, #26
 8003b10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x544>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	3301      	adds	r3, #1
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	e017      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x574>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e003      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	ea42 0103 	orr.w	r1, r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x59a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	051b      	lsls	r3, r3, #20
 8003b88:	e018      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x5cc>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e003      	b.n	8003bae <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	e080      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x5ec>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	e015      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x618>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e003      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	069b      	lsls	r3, r3, #26
 8003c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x638>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e9b      	lsrs	r3, r3, #26
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	e017      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x668>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	61bb      	str	r3, [r7, #24]
  return result;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10d      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x694>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f003 021f 	and.w	r2, r3, #31
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	3b1e      	subs	r3, #30
 8003c7c:	051b      	lsls	r3, r3, #20
 8003c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c82:	e01d      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x6d0>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	60fb      	str	r3, [r7, #12]
  return result;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003c9c:	2320      	movs	r3, #32
 8003c9e:	e005      	b.n	8003cac <HAL_ADC_ConfigChannel+0x6bc>
 8003ca0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3b1e      	subs	r3, #30
 8003cba:	051b      	lsls	r3, r3, #20
 8003cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7ff fa74 	bl	80031b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d06c      	beq.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cd8:	483c      	ldr	r0, [pc, #240]	; (8003dcc <HAL_ADC_ConfigChannel+0x7dc>)
 8003cda:	f7ff f9c9 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 8003cde:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d127      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d121      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d157      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	482f      	ldr	r0, [pc, #188]	; (8003dcc <HAL_ADC_ConfigChannel+0x7dc>)
 8003d0e:	f7ff f99c 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_ADC_ConfigChannel+0x7ec>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d2c:	e002      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f9      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d3a:	e03a      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d113      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d12a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d64:	4619      	mov	r1, r3
 8003d66:	4819      	ldr	r0, [pc, #100]	; (8003dcc <HAL_ADC_ConfigChannel+0x7dc>)
 8003d68:	f7ff f96f 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d6c:	e021      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d11c      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d96:	4619      	mov	r1, r3
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <HAL_ADC_ConfigChannel+0x7dc>)
 8003d9a:	f7ff f956 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
 8003d9e:	e008      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003dba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	37d8      	adds	r7, #216	; 0xd8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	80080000 	.word	0x80080000
 8003dcc:	50040300 	.word	0x50040300
 8003dd0:	c7520000 	.word	0xc7520000
 8003dd4:	50040000 	.word	0x50040000
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	053e2d63 	.word	0x053e2d63
 8003de0:	cb840000 	.word	0xcb840000
 8003de4:	80000001 	.word	0x80000001

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	; (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	; (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	; (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf28      	it	cs
 8003efa:	2304      	movcs	r3, #4
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b03      	subs	r3, #3
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
         );
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff4c 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6a:	f7ff ff61 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003f6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	6978      	ldr	r0, [r7, #20]
 8003f76:	f7ff ffb1 	bl	8003edc <NVIC_EncodePriority>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff80 	bl	8003e88 <__NVIC_SetPriority>
}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff54 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0ac      	b.n	8004118 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f8b2 	bl	800412c <DFSDM_GetChannelFromInstance>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_DFSDM_ChannelInit+0x174>)
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e09f      	b.n	8004118 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fbb1 	bl	8002740 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003fde:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_DFSDM_ChannelInit+0x178>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a4f      	ldr	r2, [pc, #316]	; (8004124 <HAL_DFSDM_ChannelInit+0x178>)
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003fe8:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_DFSDM_ChannelInit+0x178>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d125      	bne.n	800403c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4948      	ldr	r1, [pc, #288]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800400a:	4b47      	ldr	r3, [pc, #284]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8004010:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004014:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	791b      	ldrb	r3, [r3, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d108      	bne.n	8004030 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	493f      	ldr	r1, [pc, #252]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004030:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_DFSDM_ChannelInit+0x17c>)
 8004036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800403a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800404a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800405a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004060:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 020f 	bic.w	r2, r2, #15
 8004078:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80040a0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6899      	ldr	r1, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f002 0207 	and.w	r2, r2, #7
 80040cc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f810 	bl	800412c <DFSDM_GetChannelFromInstance>
 800410c:	4602      	mov	r2, r0
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_DFSDM_ChannelInit+0x174>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20001248 	.word	0x20001248
 8004124:	20001244 	.word	0x20001244
 8004128:	40016000 	.word	0x40016000

0800412c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d102      	bne.n	8004142 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e02b      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <DFSDM_GetChannelFromInstance+0x80>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d102      	bne.n	8004150 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e024      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <DFSDM_GetChannelFromInstance+0x84>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d102      	bne.n	800415e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004158:	2302      	movs	r3, #2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e01d      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <DFSDM_GetChannelFromInstance+0x88>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d102      	bne.n	800416c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004166:	2304      	movs	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e016      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d102      	bne.n	800417a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004174:	2305      	movs	r3, #5
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00f      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <DFSDM_GetChannelFromInstance+0x90>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d102      	bne.n	8004188 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004182:	2306      	movs	r3, #6
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e008      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <DFSDM_GetChannelFromInstance+0x94>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d102      	bne.n	8004196 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004190:	2307      	movs	r3, #7
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004196:	2303      	movs	r3, #3
 8004198:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40016000 	.word	0x40016000
 80041ac:	40016020 	.word	0x40016020
 80041b0:	40016040 	.word	0x40016040
 80041b4:	40016080 	.word	0x40016080
 80041b8:	400160a0 	.word	0x400160a0
 80041bc:	400160c0 	.word	0x400160c0
 80041c0:	400160e0 	.word	0x400160e0

080041c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041d2:	e166      	b.n	80044a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8158 	beq.w	800449c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d005      	beq.n	8004204 <HAL_GPIO_Init+0x40>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d130      	bne.n	8004266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800423a:	2201      	movs	r2, #1
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 0201 	and.w	r2, r3, #1
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b03      	cmp	r3, #3
 8004270:	d017      	beq.n	80042a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d123      	bne.n	80042f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	08da      	lsrs	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3208      	adds	r2, #8
 80042b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	6939      	ldr	r1, [r7, #16]
 80042f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	2203      	movs	r2, #3
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0203 	and.w	r2, r3, #3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80b2 	beq.w	800449c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_GPIO_Init+0x2fc>)
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	4a60      	ldr	r2, [pc, #384]	; (80044c0 <HAL_GPIO_Init+0x2fc>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6613      	str	r3, [r2, #96]	; 0x60
 8004344:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <HAL_GPIO_Init+0x2fc>)
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004350:	4a5c      	ldr	r2, [pc, #368]	; (80044c4 <HAL_GPIO_Init+0x300>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800437a:	d02b      	beq.n	80043d4 <HAL_GPIO_Init+0x210>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a52      	ldr	r2, [pc, #328]	; (80044c8 <HAL_GPIO_Init+0x304>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d025      	beq.n	80043d0 <HAL_GPIO_Init+0x20c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a51      	ldr	r2, [pc, #324]	; (80044cc <HAL_GPIO_Init+0x308>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01f      	beq.n	80043cc <HAL_GPIO_Init+0x208>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a50      	ldr	r2, [pc, #320]	; (80044d0 <HAL_GPIO_Init+0x30c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d019      	beq.n	80043c8 <HAL_GPIO_Init+0x204>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_GPIO_Init+0x310>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_GPIO_Init+0x200>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_GPIO_Init+0x314>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00d      	beq.n	80043c0 <HAL_GPIO_Init+0x1fc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_GPIO_Init+0x318>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <HAL_GPIO_Init+0x1f8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_GPIO_Init+0x31c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_GPIO_Init+0x1f4>
 80043b4:	2307      	movs	r3, #7
 80043b6:	e00e      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043b8:	2308      	movs	r3, #8
 80043ba:	e00c      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043bc:	2306      	movs	r3, #6
 80043be:	e00a      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043c0:	2305      	movs	r3, #5
 80043c2:	e008      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043c4:	2304      	movs	r3, #4
 80043c6:	e006      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043c8:	2303      	movs	r3, #3
 80043ca:	e004      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e002      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_GPIO_Init+0x212>
 80043d4:	2300      	movs	r3, #0
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	f002 0203 	and.w	r2, r2, #3
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	4093      	lsls	r3, r2
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043e6:	4937      	ldr	r1, [pc, #220]	; (80044c4 <HAL_GPIO_Init+0x300>)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_GPIO_Init+0x320>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004418:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <HAL_GPIO_Init+0x320>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_GPIO_Init+0x320>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	43db      	mvns	r3, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004442:	4a28      	ldr	r2, [pc, #160]	; (80044e4 <HAL_GPIO_Init+0x320>)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_GPIO_Init+0x320>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <HAL_GPIO_Init+0x320>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_GPIO_Init+0x320>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004496:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <HAL_GPIO_Init+0x320>)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3301      	adds	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f47f ae91 	bne.w	80041d4 <HAL_GPIO_Init+0x10>
  }
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40010000 	.word	0x40010000
 80044c8:	48000400 	.word	0x48000400
 80044cc:	48000800 	.word	0x48000800
 80044d0:	48000c00 	.word	0x48000c00
 80044d4:	48001000 	.word	0x48001000
 80044d8:	48001400 	.word	0x48001400
 80044dc:	48001800 	.word	0x48001800
 80044e0:	48001c00 	.word	0x48001c00
 80044e4:	40010400 	.word	0x40010400

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004504:	e002      	b.n	800450c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fffc 	bl	8002534 <HAL_GPIO_EXTI_Callback>
  }
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40010400 	.word	0x40010400

08004548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e08d      	b.n	8004676 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe f94a 	bl	8002808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e006      	b.n	80045d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d108      	bne.n	80045ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	e007      	b.n	80045fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800461c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69d9      	ldr	r1, [r3, #28]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	d138      	bne.n	8004706 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800469e:	2302      	movs	r3, #2
 80046a0:	e032      	b.n	8004708 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	d139      	bne.n	800479e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004734:	2302      	movs	r3, #2
 8004736:	e033      	b.n	80047a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2224      	movs	r2, #36	; 0x24
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004766:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fe fc04 	bl	8002fc4 <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e092      	b.n	80048f0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 808b 	bne.w	80048f0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe f8b6 	bl	800294c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80047e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f88b 	bl	8004900 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <HAL_OSPI_Init+0x150>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68d1      	ldr	r1, [r2, #12]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6912      	ldr	r2, [r2, #16]
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0412      	lsls	r2, r2, #16
 8004800:	4311      	orrs	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6952      	ldr	r2, [r2, #20]
 8004806:	3a01      	subs	r2, #1
 8004808:	0212      	lsls	r2, r2, #8
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	69d2      	ldr	r2, [r2, #28]
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0412      	lsls	r2, r2, #16
 800482a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	021a      	lsls	r2, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2200      	movs	r2, #0
 8004850:	2120      	movs	r1, #32
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fb98 	bl	8004f88 <OSPI_WaitFlagStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d146      	bne.n	80048f0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004898:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d107      	bne.n	80048d8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0202 	orr.w	r2, r2, #2
 80048d6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e0:	d103      	bne.n	80048ea <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
 80048e8:	e002      	b.n	80048f0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	f8e0f8f4 	.word	0xf8e0f8f4

08004900 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b092      	sub	sp, #72	; 0x48
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <HAL_OSPIM_Config+0x40>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d105      	bne.n	800494e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800494c:	e004      	b.n	8004958 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800494e:	2301      	movs	r3, #1
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004958:	2300      	movs	r3, #0
 800495a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800495e:	e01f      	b.n	80049a0 <HAL_OSPIM_Config+0x80>
 8004960:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004968:	3301      	adds	r3, #1
 800496a:	b2d8      	uxtb	r0, r3
 800496c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004970:	f107 0114 	add.w	r1, r7, #20
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	4619      	mov	r1, r3
 8004980:	f000 fb3a 	bl	8004ff8 <OSPIM_GetConfig>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2208      	movs	r2, #8
 8004994:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004996:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800499a:	3301      	adds	r3, #1
 800499c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d9dd      	bls.n	8004964 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80049a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f040 82de 	bne.w	8004f6e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80049b2:	4bc6      	ldr	r3, [pc, #792]	; (8004ccc <HAL_OSPIM_Config+0x3ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80049be:	4bc3      	ldr	r3, [pc, #780]	; (8004ccc <HAL_OSPIM_Config+0x3ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4ac2      	ldr	r2, [pc, #776]	; (8004ccc <HAL_OSPIM_Config+0x3ac>)
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80049ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80049d6:	4bbe      	ldr	r3, [pc, #760]	; (8004cd0 <HAL_OSPIM_Config+0x3b0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80049e2:	4bbb      	ldr	r3, [pc, #748]	; (8004cd0 <HAL_OSPIM_Config+0x3b0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4aba      	ldr	r2, [pc, #744]	; (8004cd0 <HAL_OSPIM_Config+0x3b0>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80049ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80049fa:	49b6      	ldr	r1, [pc, #728]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 80049fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	3348      	adds	r3, #72	; 0x48
 8004a08:	443b      	add	r3, r7
 8004a0a:	3b2c      	subs	r3, #44	; 0x2c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	48af      	ldr	r0, [pc, #700]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	3348      	adds	r3, #72	; 0x48
 8004a24:	443b      	add	r3, r7
 8004a26:	3b2c      	subs	r3, #44	; 0x2c
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3348      	adds	r3, #72	; 0x48
 8004a42:	443b      	add	r3, r7
 8004a44:	3b34      	subs	r3, #52	; 0x34
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a1 	beq.w	8004b90 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004a4e:	49a1      	ldr	r1, [pc, #644]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	3348      	adds	r3, #72	; 0x48
 8004a5c:	443b      	add	r3, r7
 8004a5e:	3b34      	subs	r3, #52	; 0x34
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	489a      	ldr	r0, [pc, #616]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	3348      	adds	r3, #72	; 0x48
 8004a78:	443b      	add	r3, r7
 8004a7a:	3b34      	subs	r3, #52	; 0x34
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f021 0201 	bic.w	r2, r1, #1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4403      	add	r3, r0
 8004a88:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3348      	adds	r3, #72	; 0x48
 8004a96:	443b      	add	r3, r7
 8004a98:	3b30      	subs	r3, #48	; 0x30
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01d      	beq.n	8004adc <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004aa0:	498c      	ldr	r1, [pc, #560]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3348      	adds	r3, #72	; 0x48
 8004aae:	443b      	add	r3, r7
 8004ab0:	3b30      	subs	r3, #48	; 0x30
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	4885      	ldr	r0, [pc, #532]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3348      	adds	r3, #72	; 0x48
 8004aca:	443b      	add	r3, r7
 8004acc:	3b30      	subs	r3, #48	; 0x30
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	f021 0210 	bic.w	r2, r1, #16
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4403      	add	r3, r0
 8004ada:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	3348      	adds	r3, #72	; 0x48
 8004ae8:	443b      	add	r3, r7
 8004aea:	3b28      	subs	r3, #40	; 0x28
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d021      	beq.n	8004b36 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004af2:	4978      	ldr	r1, [pc, #480]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3348      	adds	r3, #72	; 0x48
 8004b00:	443b      	add	r3, r7
 8004b02:	3b28      	subs	r3, #40	; 0x28
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	4870      	ldr	r0, [pc, #448]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	3348      	adds	r3, #72	; 0x48
 8004b20:	443b      	add	r3, r7
 8004b22:	3b28      	subs	r3, #40	; 0x28
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4403      	add	r3, r0
 8004b34:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3348      	adds	r3, #72	; 0x48
 8004b42:	443b      	add	r3, r7
 8004b44:	3b24      	subs	r3, #36	; 0x24
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d021      	beq.n	8004b90 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004b4c:	4961      	ldr	r1, [pc, #388]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3348      	adds	r3, #72	; 0x48
 8004b5a:	443b      	add	r3, r7
 8004b5c:	3b24      	subs	r3, #36	; 0x24
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	4859      	ldr	r0, [pc, #356]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	3b24      	subs	r3, #36	; 0x24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4403      	add	r3, r0
 8004b8e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	3348      	adds	r3, #72	; 0x48
 8004ba2:	443b      	add	r3, r7
 8004ba4:	3b34      	subs	r3, #52	; 0x34
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	d038      	beq.n	8004c1e <HAL_OSPIM_Config+0x2fe>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3348      	adds	r3, #72	; 0x48
 8004bbe:	443b      	add	r3, r7
 8004bc0:	3b30      	subs	r3, #48	; 0x30
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4299      	cmp	r1, r3
 8004bc6:	d02a      	beq.n	8004c1e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	3348      	adds	r3, #72	; 0x48
 8004bda:	443b      	add	r3, r7
 8004bdc:	3b2c      	subs	r3, #44	; 0x2c
 8004bde:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d01c      	beq.n	8004c1e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68d9      	ldr	r1, [r3, #12]
 8004be8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	3348      	adds	r3, #72	; 0x48
 8004bf6:	443b      	add	r3, r7
 8004bf8:	3b28      	subs	r3, #40	; 0x28
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d00e      	beq.n	8004c1e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6919      	ldr	r1, [r3, #16]
 8004c04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3348      	adds	r3, #72	; 0x48
 8004c12:	443b      	add	r3, r7
 8004c14:	3b24      	subs	r3, #36	; 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	f040 80d3 	bne.w	8004dc4 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c1e:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004c20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3348      	adds	r3, #72	; 0x48
 8004c2e:	443b      	add	r3, r7
 8004c30:	3b34      	subs	r3, #52	; 0x34
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	4825      	ldr	r0, [pc, #148]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004c3e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	3348      	adds	r3, #72	; 0x48
 8004c4c:	443b      	add	r3, r7
 8004c4e:	3b34      	subs	r3, #52	; 0x34
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f021 0201 	bic.w	r2, r1, #1
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4403      	add	r3, r0
 8004c5c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004c5e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	3348      	adds	r3, #72	; 0x48
 8004c6c:	443b      	add	r3, r7
 8004c6e:	3b30      	subs	r3, #48	; 0x30
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01f      	beq.n	8004cb6 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c76:	4917      	ldr	r1, [pc, #92]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004c78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	3348      	adds	r3, #72	; 0x48
 8004c86:	443b      	add	r3, r7
 8004c88:	3b30      	subs	r3, #48	; 0x30
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	480f      	ldr	r0, [pc, #60]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004c96:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	3348      	adds	r3, #72	; 0x48
 8004ca4:	443b      	add	r3, r7
 8004ca6:	3b30      	subs	r3, #48	; 0x30
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f021 0210 	bic.w	r2, r1, #16
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4403      	add	r3, r0
 8004cb4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004cb6:	4907      	ldr	r1, [pc, #28]	; (8004cd4 <HAL_OSPIM_Config+0x3b4>)
 8004cb8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3348      	adds	r3, #72	; 0x48
 8004cc6:	443b      	add	r3, r7
 8004cc8:	3b2c      	subs	r3, #44	; 0x2c
 8004cca:	e005      	b.n	8004cd8 <HAL_OSPIM_Config+0x3b8>
 8004ccc:	a0001000 	.word	0xa0001000
 8004cd0:	a0001400 	.word	0xa0001400
 8004cd4:	50061c00 	.word	0x50061c00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	48a6      	ldr	r0, [pc, #664]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004ce4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3348      	adds	r3, #72	; 0x48
 8004cf2:	443b      	add	r3, r7
 8004cf4:	3b2c      	subs	r3, #44	; 0x2c
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4403      	add	r3, r0
 8004d02:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	3348      	adds	r3, #72	; 0x48
 8004d12:	443b      	add	r3, r7
 8004d14:	3b28      	subs	r3, #40	; 0x28
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d023      	beq.n	8004d64 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d1c:	4997      	ldr	r1, [pc, #604]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004d1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	3348      	adds	r3, #72	; 0x48
 8004d2c:	443b      	add	r3, r7
 8004d2e:	3b28      	subs	r3, #40	; 0x28
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	488f      	ldr	r0, [pc, #572]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004d40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	3348      	adds	r3, #72	; 0x48
 8004d4e:	443b      	add	r3, r7
 8004d50:	3b28      	subs	r3, #40	; 0x28
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4403      	add	r3, r0
 8004d62:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3348      	adds	r3, #72	; 0x48
 8004d72:	443b      	add	r3, r7
 8004d74:	3b24      	subs	r3, #36	; 0x24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d7c:	497f      	ldr	r1, [pc, #508]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004d7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	3348      	adds	r3, #72	; 0x48
 8004d8c:	443b      	add	r3, r7
 8004d8e:	3b24      	subs	r3, #36	; 0x24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	4877      	ldr	r0, [pc, #476]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004da0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3348      	adds	r3, #72	; 0x48
 8004dae:	443b      	add	r3, r7
 8004db0:	3b24      	subs	r3, #36	; 0x24
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004dc4:	4a6d      	ldr	r2, [pc, #436]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	4967      	ldr	r1, [pc, #412]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004dee:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 0203 	bic.w	r2, r3, #3
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	431a      	orrs	r2, r3
 8004e06:	495d      	ldr	r1, [pc, #372]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d014      	beq.n	8004e4a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004e20:	4a56      	ldr	r2, [pc, #344]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e34:	015b      	lsls	r3, r3, #5
 8004e36:	431a      	orrs	r2, r3
 8004e38:	4950      	ldr	r1, [pc, #320]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f042 0210 	orr.w	r2, r2, #16
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e56:	4a49      	ldr	r2, [pc, #292]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	049b      	lsls	r3, r3, #18
 8004e70:	431a      	orrs	r2, r3
 8004e72:	4942      	ldr	r1, [pc, #264]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e01c      	b.n	8004ec4 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e92:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eaa:	069b      	lsls	r3, r3, #26
 8004eac:	431a      	orrs	r2, r3
 8004eae:	4933      	ldr	r1, [pc, #204]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d019      	beq.n	8004f04 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee8:	049b      	lsls	r3, r3, #18
 8004eea:	431a      	orrs	r2, r3
 8004eec:	4923      	ldr	r1, [pc, #140]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	e01c      	b.n	8004f3e <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d018      	beq.n	8004f3e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f24:	069b      	lsls	r3, r3, #26
 8004f26:	431a      	orrs	r2, r3
 8004f28:	4914      	ldr	r1, [pc, #80]	; (8004f7c <HAL_OSPIM_Config+0x65c>)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004f3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_OSPIM_Config+0x660>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <HAL_OSPIM_Config+0x660>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004f56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_OSPIM_Config+0x664>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_OSPIM_Config+0x664>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004f6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3748      	adds	r7, #72	; 0x48
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	50061c00 	.word	0x50061c00
 8004f80:	a0001000 	.word	0xa0001000
 8004f84:	a0001400 	.word	0xa0001400

08004f88 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f98:	e01a      	b.n	8004fd0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d016      	beq.n	8004fd0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fe f80f 	bl	8002fc4 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e00e      	b.n	8004fee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1d6      	bne.n	8004f9a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <OSPIM_GetConfig+0x26>
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d802      	bhi.n	800501e <OSPIM_GetConfig+0x26>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
 8005022:	e08e      	b.n	8005142 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2200      	movs	r2, #0
 800503a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d101      	bne.n	800504c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005048:	4b41      	ldr	r3, [pc, #260]	; (8005150 <OSPIM_GetConfig+0x158>)
 800504a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e074      	b.n	800513c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005052:	4a40      	ldr	r2, [pc, #256]	; (8005154 <OSPIM_GetConfig+0x15c>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4053      	eors	r3, r2
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4053      	eors	r3, r2
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4053      	eors	r3, r2
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d018      	beq.n	80050fa <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4053      	eors	r3, r2
 80050ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d111      	bne.n	80050fa <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	60da      	str	r2, [r3, #12]
 80050ec:	e005      	b.n	80050fa <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d018      	beq.n	8005136 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4053      	eors	r3, r2
 800510a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d111      	bne.n	8005136 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	611a      	str	r2, [r3, #16]
 8005128:	e005      	b.n	8005136 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d987      	bls.n	8005052 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	04040222 	.word	0x04040222
 8005154:	50061c00 	.word	0x50061c00

08005158 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a04      	ldr	r2, [pc, #16]	; (8005174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40007000 	.word	0x40007000

08005178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005188:	d102      	bne.n	8005190 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800518a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518e:	e00b      	b.n	80051a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519e:	d102      	bne.n	80051a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80051a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a4:	e000      	b.n	80051a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80051a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40007000 	.word	0x40007000

080051b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d141      	bne.n	800524a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051c6:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d2:	d131      	bne.n	8005238 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d4:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051da:	4a46      	ldr	r2, [pc, #280]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051e4:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051ec:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80051f4:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2232      	movs	r2, #50	; 0x32
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	4a3f      	ldr	r2, [pc, #252]	; (80052fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0c9b      	lsrs	r3, r3, #18
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520a:	e002      	b.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005212:	4b38      	ldr	r3, [pc, #224]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d102      	bne.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f2      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005226:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d158      	bne.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e057      	b.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005238:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800523e:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005248:	e04d      	b.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d141      	bne.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005252:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800525a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525e:	d131      	bne.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005266:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005280:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2232      	movs	r2, #50	; 0x32
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	0c9b      	lsrs	r3, r3, #18
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005296:	e002      	b.n	800529e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3b01      	subs	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052aa:	d102      	bne.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d112      	bne.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e011      	b.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052d4:	e007      	b.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40007000 	.word	0x40007000
 80052f8:	20000008 	.word	0x20000008
 80052fc:	431bde83 	.word	0x431bde83

08005300 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f000 bc08 	b.w	8005b24 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005314:	4b96      	ldr	r3, [pc, #600]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800531e:	4b94      	ldr	r3, [pc, #592]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80e4 	beq.w	80054fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_RCC_OscConfig+0x4c>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	f040 808b 	bne.w	800545a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2b01      	cmp	r3, #1
 8005348:	f040 8087 	bne.w	800545a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800534c:	4b88      	ldr	r3, [pc, #544]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCC_OscConfig+0x64>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e3df      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	4b81      	ldr	r3, [pc, #516]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <HAL_RCC_OscConfig+0x7e>
 8005374:	4b7e      	ldr	r3, [pc, #504]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537c:	e005      	b.n	800538a <HAL_RCC_OscConfig+0x8a>
 800537e:	4b7c      	ldr	r3, [pc, #496]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538a:	4293      	cmp	r3, r2
 800538c:	d223      	bcs.n	80053d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fdfe 	bl	8005f94 <RCC_SetFlashLatencyFromMSIRange>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e3c0      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a2:	4b73      	ldr	r3, [pc, #460]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a72      	ldr	r2, [pc, #456]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053a8:	f043 0308 	orr.w	r3, r3, #8
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b70      	ldr	r3, [pc, #448]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	496d      	ldr	r1, [pc, #436]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c0:	4b6b      	ldr	r3, [pc, #428]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	4968      	ldr	r1, [pc, #416]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	e025      	b.n	8005422 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053d6:	4b66      	ldr	r3, [pc, #408]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a65      	ldr	r2, [pc, #404]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b63      	ldr	r3, [pc, #396]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	4960      	ldr	r1, [pc, #384]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053f4:	4b5e      	ldr	r3, [pc, #376]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	495b      	ldr	r1, [pc, #364]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fdbe 	bl	8005f94 <RCC_SetFlashLatencyFromMSIRange>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e380      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005422:	f000 fcc1 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005426:	4602      	mov	r2, r0
 8005428:	4b51      	ldr	r3, [pc, #324]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	4950      	ldr	r1, [pc, #320]	; (8005574 <HAL_RCC_OscConfig+0x274>)
 8005434:	5ccb      	ldrb	r3, [r1, r3]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	fa22 f303 	lsr.w	r3, r2, r3
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <HAL_RCC_OscConfig+0x278>)
 8005440:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005442:	4b4e      	ldr	r3, [pc, #312]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fc8c 	bl	8002d64 <HAL_InitTick>
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d052      	beq.n	80054fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	e364      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d032      	beq.n	80054c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005462:	4b43      	ldr	r3, [pc, #268]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a42      	ldr	r2, [pc, #264]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800546e:	f7fd fda9 	bl	8002fc4 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005476:	f7fd fda5 	bl	8002fc4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e34d      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005488:	4b39      	ldr	r3, [pc, #228]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005494:	4b36      	ldr	r3, [pc, #216]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a35      	ldr	r2, [pc, #212]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800549a:	f043 0308 	orr.w	r3, r3, #8
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b33      	ldr	r3, [pc, #204]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	4930      	ldr	r1, [pc, #192]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	492b      	ldr	r1, [pc, #172]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
 80054c6:	e01a      	b.n	80054fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054c8:	4b29      	ldr	r3, [pc, #164]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054d4:	f7fd fd76 	bl	8002fc4 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054dc:	f7fd fd72 	bl	8002fc4 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e31a      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054ee:	4b20      	ldr	r3, [pc, #128]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x1dc>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d073      	beq.n	80055f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x21c>
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d10e      	bne.n	8005534 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d10b      	bne.n	8005534 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d063      	beq.n	80055f0 <HAL_RCC_OscConfig+0x2f0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d15f      	bne.n	80055f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e2f7      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d106      	bne.n	800554c <HAL_RCC_OscConfig+0x24c>
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a0b      	ldr	r2, [pc, #44]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e025      	b.n	8005598 <HAL_RCC_OscConfig+0x298>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005554:	d114      	bne.n	8005580 <HAL_RCC_OscConfig+0x280>
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b03      	ldr	r3, [pc, #12]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a02      	ldr	r2, [pc, #8]	; (8005570 <HAL_RCC_OscConfig+0x270>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e013      	b.n	8005598 <HAL_RCC_OscConfig+0x298>
 8005570:	40021000 	.word	0x40021000
 8005574:	08007f68 	.word	0x08007f68
 8005578:	20000008 	.word	0x20000008
 800557c:	2000000c 	.word	0x2000000c
 8005580:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a9f      	ldr	r2, [pc, #636]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b9d      	ldr	r3, [pc, #628]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a9c      	ldr	r2, [pc, #624]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fd10 	bl	8002fc4 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fd fd0c 	bl	8002fc4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e2b4      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ba:	4b92      	ldr	r3, [pc, #584]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2a8>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fd fcfc 	bl	8002fc4 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fd fcf8 	bl	8002fc4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e2a0      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055e2:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x2d0>
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d060      	beq.n	80056c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d005      	beq.n	8005610 <HAL_RCC_OscConfig+0x310>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d119      	bne.n	800563e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d116      	bne.n	800563e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005610:	4b7c      	ldr	r3, [pc, #496]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_OscConfig+0x328>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e27d      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	4973      	ldr	r1, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800563c:	e040      	b.n	80056c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d023      	beq.n	800568e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005646:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fd fcb7 	bl	8002fc4 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565a:	f7fd fcb3 	bl	8002fc4 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e25b      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566c:	4b65      	ldr	r3, [pc, #404]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b62      	ldr	r3, [pc, #392]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	495f      	ldr	r1, [pc, #380]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	e018      	b.n	80056c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568e:	4b5d      	ldr	r3, [pc, #372]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a5c      	ldr	r2, [pc, #368]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fd fc93 	bl	8002fc4 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a2:	f7fd fc8f 	bl	8002fc4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e237      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b4:	4b53      	ldr	r3, [pc, #332]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d03c      	beq.n	8005746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01c      	beq.n	800570e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d4:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80056d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056da:	4a4a      	ldr	r2, [pc, #296]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fd fc6e 	bl	8002fc4 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ec:	f7fd fc6a 	bl	8002fc4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e212      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056fe:	4b41      	ldr	r3, [pc, #260]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ef      	beq.n	80056ec <HAL_RCC_OscConfig+0x3ec>
 800570c:	e01b      	b.n	8005746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800570e:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	4a3b      	ldr	r2, [pc, #236]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fd fc51 	bl	8002fc4 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005726:	f7fd fc4d 	bl	8002fc4 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1f5      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005738:	4b32      	ldr	r3, [pc, #200]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ef      	bne.n	8005726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80a6 	beq.w	80058a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005754:	2300      	movs	r3, #0
 8005756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800575a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 800576a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576e:	6593      	str	r3, [r2, #88]	; 0x58
 8005770:	4b24      	ldr	r3, [pc, #144]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005780:	4b21      	ldr	r3, [pc, #132]	; (8005808 <HAL_RCC_OscConfig+0x508>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d118      	bne.n	80057be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCC_OscConfig+0x508>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_RCC_OscConfig+0x508>)
 8005792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005798:	f7fd fc14 	bl	8002fc4 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a0:	f7fd fc10 	bl	8002fc4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1b8      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_RCC_OscConfig+0x508>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d108      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4d8>
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d6:	e029      	b.n	800582c <HAL_RCC_OscConfig+0x52c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b05      	cmp	r3, #5
 80057de:	d115      	bne.n	800580c <HAL_RCC_OscConfig+0x50c>
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	4a03      	ldr	r2, [pc, #12]	; (8005804 <HAL_RCC_OscConfig+0x504>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005800:	e014      	b.n	800582c <HAL_RCC_OscConfig+0x52c>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	40007000 	.word	0x40007000
 800580c:	4b9d      	ldr	r3, [pc, #628]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	4a9c      	ldr	r2, [pc, #624]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800581c:	4b99      	ldr	r3, [pc, #612]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	4a98      	ldr	r2, [pc, #608]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005824:	f023 0304 	bic.w	r3, r3, #4
 8005828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fd fbc6 	bl	8002fc4 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583a:	e00a      	b.n	8005852 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583c:	f7fd fbc2 	bl	8002fc4 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e168      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005852:	4b8c      	ldr	r3, [pc, #560]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ed      	beq.n	800583c <HAL_RCC_OscConfig+0x53c>
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fd fbaf 	bl	8002fc4 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fd fbab 	bl	8002fc4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	; 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e151      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005880:	4b80      	ldr	r3, [pc, #512]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ed      	bne.n	800586a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d105      	bne.n	80058a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005894:	4b7b      	ldr	r3, [pc, #492]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	4a7a      	ldr	r2, [pc, #488]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 800589a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d03c      	beq.n	8005926 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01c      	beq.n	80058ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058b4:	4b73      	ldr	r3, [pc, #460]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80058b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ba:	4a72      	ldr	r2, [pc, #456]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fd fb7e 	bl	8002fc4 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058cc:	f7fd fb7a 	bl	8002fc4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e122      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058de:	4b69      	ldr	r3, [pc, #420]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80058e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ef      	beq.n	80058cc <HAL_RCC_OscConfig+0x5cc>
 80058ec:	e01b      	b.n	8005926 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80058f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f4:	4a63      	ldr	r2, [pc, #396]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fd fb61 	bl	8002fc4 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005906:	f7fd fb5d 	bl	8002fc4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e105      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005918:	4b5a      	ldr	r3, [pc, #360]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 800591a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1ef      	bne.n	8005906 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80f9 	beq.w	8005b22 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	2b02      	cmp	r3, #2
 8005936:	f040 80cf 	bne.w	8005ad8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800593a:	4b52      	ldr	r3, [pc, #328]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	429a      	cmp	r2, r3
 800594c:	d12c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	3b01      	subs	r3, #1
 800595a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d123      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d11b      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d113      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	3b01      	subs	r3, #1
 800598e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d109      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	3b01      	subs	r3, #1
 80059a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d071      	beq.n	8005a8c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d068      	beq.n	8005a80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059ae:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80059ba:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0ac      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059ca:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2d      	ldr	r2, [pc, #180]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059d6:	f7fd faf5 	bl	8002fc4 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059de:	f7fd faf1 	bl	8002fc4 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e099      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f0:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_RCC_OscConfig+0x788>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0112      	lsls	r2, r2, #4
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a16:	0212      	lsls	r2, r2, #8
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a1e:	0852      	lsrs	r2, r2, #1
 8005a20:	3a01      	subs	r2, #1
 8005a22:	0552      	lsls	r2, r2, #21
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a2a:	0852      	lsrs	r2, r2, #1
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	0652      	lsls	r2, r2, #25
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a36:	06d2      	lsls	r2, r2, #27
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	4912      	ldr	r1, [pc, #72]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a0f      	ldr	r2, [pc, #60]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a58:	f7fd fab4 	bl	8002fc4 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a60:	f7fd fab0 	bl	8002fc4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e058      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <HAL_RCC_OscConfig+0x784>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a7e:	e050      	b.n	8005b22 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e04f      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
 8005a84:	40021000 	.word	0x40021000
 8005a88:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8c:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d144      	bne.n	8005b22 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aa4:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ab0:	f7fd fa88 	bl	8002fc4 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fd fa84 	bl	8002fc4 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e02c      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x7b8>
 8005ad6:	e024      	b.n	8005b22 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d01f      	beq.n	8005b1e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aea:	f7fd fa6b 	bl	8002fc4 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af2:	f7fd fa67 	bl	8002fc4 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e00f      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b04:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f0      	bne.n	8005af2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	4905      	ldr	r1, [pc, #20]	; (8005b2c <HAL_RCC_OscConfig+0x82c>)
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_OscConfig+0x830>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60cb      	str	r3, [r1, #12]
 8005b1c:	e001      	b.n	8005b22 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	feeefffc 	.word	0xfeeefffc

08005b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e11d      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b90      	ldr	r3, [pc, #576]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d910      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f023 020f 	bic.w	r2, r3, #15
 8005b62:	498b      	ldr	r1, [pc, #556]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b89      	ldr	r3, [pc, #548]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e105      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	4b81      	ldr	r3, [pc, #516]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d908      	bls.n	8005baa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b7e      	ldr	r3, [pc, #504]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	497b      	ldr	r1, [pc, #492]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d079      	beq.n	8005caa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d11e      	bne.n	8005bfc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b75      	ldr	r3, [pc, #468]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0dc      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005bce:	f000 fa3b 	bl	8006048 <RCC_GetSysClockFreqFromPLLSource>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4a70      	ldr	r2, [pc, #448]	; (8005d98 <HAL_RCC_ClockConfig+0x264>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d946      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bda:	4b6e      	ldr	r3, [pc, #440]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d140      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005be6:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bee:	4a69      	ldr	r2, [pc, #420]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e035      	b.n	8005c68 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d107      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c04:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d115      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0b9      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c1c:	4b5d      	ldr	r3, [pc, #372]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0ad      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c2c:	4b59      	ldr	r3, [pc, #356]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a5      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005c3c:	f000 f8b4 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4a55      	ldr	r2, [pc, #340]	; (8005d98 <HAL_RCC_ClockConfig+0x264>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d90f      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c48:	4b52      	ldr	r3, [pc, #328]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c54:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	4a4d      	ldr	r2, [pc, #308]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c68:	4b4a      	ldr	r3, [pc, #296]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 0203 	bic.w	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4947      	ldr	r1, [pc, #284]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7a:	f7fd f9a3 	bl	8002fc4 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fd f99f 	bl	8002fc4 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e077      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c98:	4b3e      	ldr	r3, [pc, #248]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 020c 	and.w	r2, r3, #12
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d1eb      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d105      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cb0:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4a37      	ldr	r2, [pc, #220]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d208      	bcs.n	8005cea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd8:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	492b      	ldr	r1, [pc, #172]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cea:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d210      	bcs.n	8005d1a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 020f 	bic.w	r2, r3, #15
 8005d00:	4923      	ldr	r1, [pc, #140]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d08:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <HAL_RCC_ClockConfig+0x25c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e036      	b.n	8005d88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4918      	ldr	r1, [pc, #96]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	4910      	ldr	r1, [pc, #64]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d58:	f000 f826 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_RCC_ClockConfig+0x260>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	490c      	ldr	r1, [pc, #48]	; (8005d9c <HAL_RCC_ClockConfig+0x268>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <HAL_RCC_ClockConfig+0x26c>)
 8005d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <HAL_RCC_ClockConfig+0x270>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fc fff1 	bl	8002d64 <HAL_InitTick>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40022000 	.word	0x40022000
 8005d94:	40021000 	.word	0x40021000
 8005d98:	04c4b400 	.word	0x04c4b400
 8005d9c:	08007f68 	.word	0x08007f68
 8005da0:	20000008 	.word	0x20000008
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b089      	sub	sp, #36	; 0x24
 8005dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db6:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x34>
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d121      	bne.n	8005e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d11e      	bne.n	8005e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ddc:	4b34      	ldr	r3, [pc, #208]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d107      	bne.n	8005df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	e005      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005df8:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d102      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e004      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d134      	bne.n	8005ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0xac>
 8005e4c:	e005      	b.n	8005e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e50:	617b      	str	r3, [r7, #20]
      break;
 8005e52:	e005      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e56:	617b      	str	r3, [r7, #20]
      break;
 8005e58:	e002      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	617b      	str	r3, [r7, #20]
      break;
 8005e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	fb03 f202 	mul.w	r2, r3, r2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	0e5b      	lsrs	r3, r3, #25
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	3301      	adds	r3, #1
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3724      	adds	r7, #36	; 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	08007f80 	.word	0x08007f80
 8005eb8:	00f42400 	.word	0x00f42400
 8005ebc:	007a1200 	.word	0x007a1200

08005ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000008 	.word	0x20000008

08005ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005edc:	f7ff fff0 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	4904      	ldr	r1, [pc, #16]	; (8005f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eee:	5ccb      	ldrb	r3, [r1, r3]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40021000 	.word	0x40021000
 8005f00:	08007f78 	.word	0x08007f78

08005f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f08:	f7ff ffda 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0adb      	lsrs	r3, r3, #11
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4904      	ldr	r1, [pc, #16]	; (8005f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	08007f78 	.word	0x08007f78

08005f30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	220f      	movs	r2, #15
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_RCC_GetClockConfig+0x5c>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0203 	and.w	r2, r3, #3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <HAL_RCC_GetClockConfig+0x5c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <HAL_RCC_GetClockConfig+0x5c>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_GetClockConfig+0x5c>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <HAL_RCC_GetClockConfig+0x60>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40022000 	.word	0x40022000

08005f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fac:	f7ff f8e4 	bl	8005178 <HAL_PWREx_GetVoltageRange>
 8005fb0:	6178      	str	r0, [r7, #20]
 8005fb2:	e014      	b.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb4:	4b22      	ldr	r3, [pc, #136]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb8:	4a21      	ldr	r2, [pc, #132]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fcc:	f7ff f8d4 	bl	8005178 <HAL_PWREx_GetVoltageRange>
 8005fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d10b      	bne.n	8005ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d913      	bls.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2ba0      	cmp	r3, #160	; 0xa0
 8005ff0:	d902      	bls.n	8005ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e00d      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e00a      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b7f      	cmp	r3, #127	; 0x7f
 8006002:	d902      	bls.n	800600a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006004:	2302      	movs	r3, #2
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	e004      	b.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d101      	bne.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006010:	2301      	movs	r3, #1
 8006012:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 020f 	bic.w	r2, r3, #15
 800601c:	4909      	ldr	r1, [pc, #36]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d001      	beq.n	8006036 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	40022000 	.word	0x40022000

08006048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d00b      	beq.n	8006076 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d825      	bhi.n	80060b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d008      	beq.n	800607c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d11f      	bne.n	80060b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006072:	613b      	str	r3, [r7, #16]
    break;
 8006074:	e01f      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006076:	4b25      	ldr	r3, [pc, #148]	; (800610c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006078:	613b      	str	r3, [r7, #16]
    break;
 800607a:	e01c      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e005      	b.n	80060a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006098:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ac:	613b      	str	r3, [r7, #16]
    break;
 80060ae:	e002      	b.n	80060b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
    break;
 80060b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	3301      	adds	r3, #1
 80060c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	fb03 f202 	mul.w	r2, r3, r2
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	0e5b      	lsrs	r3, r3, #25
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	3301      	adds	r3, #1
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80060f6:	683b      	ldr	r3, [r7, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40021000 	.word	0x40021000
 8006108:	00f42400 	.word	0x00f42400
 800610c:	007a1200 	.word	0x007a1200
 8006110:	08007f80 	.word	0x08007f80

08006114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800611c:	2300      	movs	r3, #0
 800611e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006120:	2300      	movs	r3, #0
 8006122:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612c:	2b00      	cmp	r3, #0
 800612e:	d040      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d02a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d825      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d026      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006140:	2b60      	cmp	r3, #96	; 0x60
 8006142:	d821      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d006      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d81d      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d010      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006154:	e018      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	4a88      	ldr	r2, [pc, #544]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006160:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006162:	e015      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fb12 	bl	8006794 <RCCEx_PLLSAI1_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006174:	e00c      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3320      	adds	r3, #32
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fbfd 	bl	800697c <RCCEx_PLLSAI2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006186:	e003      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	74fb      	strb	r3, [r7, #19]
      break;
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800618e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006196:	4b79      	ldr	r3, [pc, #484]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a4:	4975      	ldr	r1, [pc, #468]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061ac:	e001      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d047      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c6:	d030      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d82a      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d2:	d02a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d8:	d824      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	d008      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e4:	d81e      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ee:	d010      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061f0:	e018      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061f2:	4b62      	ldr	r3, [pc, #392]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4a61      	ldr	r2, [pc, #388]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061fe:	e015      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fac4 	bl	8006794 <RCCEx_PLLSAI1_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006210:	e00c      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3320      	adds	r3, #32
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fbaf 	bl	800697c <RCCEx_PLLSAI2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	74fb      	strb	r3, [r7, #19]
      break;
 8006228:	e000      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800622a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006232:	4b52      	ldr	r3, [pc, #328]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	494e      	ldr	r1, [pc, #312]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006248:	e001      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 809f 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625c:	2300      	movs	r3, #0
 800625e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006260:	4b46      	ldr	r3, [pc, #280]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	4b41      	ldr	r3, [pc, #260]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	4a40      	ldr	r2, [pc, #256]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006280:	6593      	str	r3, [r2, #88]	; 0x58
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628e:	2301      	movs	r3, #1
 8006290:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006292:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800629e:	f7fc fe91 	bl	8002fc4 <HAL_GetTick>
 80062a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062a4:	e009      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a6:	f7fc fe8d 	bl	8002fc4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d902      	bls.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	74fb      	strb	r3, [r7, #19]
        break;
 80062b8:	e005      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ef      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80062c6:	7cfb      	ldrb	r3, [r7, #19]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d15b      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01f      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d019      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	4a1f      	ldr	r2, [pc, #124]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	4a1b      	ldr	r2, [pc, #108]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800630e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006316:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d016      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fc fe4c 	bl	8002fc4 <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632e:	e00b      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006330:	f7fc fe48 	bl	8002fc4 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	4293      	cmp	r3, r2
 8006340:	d902      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	74fb      	strb	r3, [r7, #19]
            break;
 8006346:	e006      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0ec      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10c      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	4903      	ldr	r1, [pc, #12]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	74bb      	strb	r3, [r7, #18]
 800637a:	e005      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800637c:	40021000 	.word	0x40021000
 8006380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006388:	7c7b      	ldrb	r3, [r7, #17]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4ba0      	ldr	r3, [pc, #640]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	4a9f      	ldr	r2, [pc, #636]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063a6:	4b9a      	ldr	r3, [pc, #616]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f023 0203 	bic.w	r2, r3, #3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	4996      	ldr	r1, [pc, #600]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063c8:	4b91      	ldr	r3, [pc, #580]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f023 020c 	bic.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	498e      	ldr	r1, [pc, #568]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ea:	4b89      	ldr	r3, [pc, #548]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	4985      	ldr	r1, [pc, #532]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800640c:	4b80      	ldr	r3, [pc, #512]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	497d      	ldr	r1, [pc, #500]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800642e:	4b78      	ldr	r3, [pc, #480]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643c:	4974      	ldr	r1, [pc, #464]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006450:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	496c      	ldr	r1, [pc, #432]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006472:	4b67      	ldr	r3, [pc, #412]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	4963      	ldr	r1, [pc, #396]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a2:	495b      	ldr	r1, [pc, #364]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064b6:	4b56      	ldr	r3, [pc, #344]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	4952      	ldr	r1, [pc, #328]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064d8:	4b4d      	ldr	r3, [pc, #308]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	494a      	ldr	r1, [pc, #296]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	4941      	ldr	r1, [pc, #260]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800651c:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800651e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	4939      	ldr	r1, [pc, #228]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d028      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	4930      	ldr	r1, [pc, #192]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655c:	d106      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800655e:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006568:	60d3      	str	r3, [r2, #12]
 800656a:	e011      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006574:	d10c      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f909 	bl	8006794 <RCCEx_PLLSAI1_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d04d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a4:	d108      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065b6:	e012      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065be:	4a14      	ldr	r2, [pc, #80]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d6:	490e      	ldr	r1, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
 80065f4:	e020      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a02      	ldr	r2, [pc, #8]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660a:	60d3      	str	r3, [r2, #12]
 800660c:	e014      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800661c:	d10c      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3304      	adds	r3, #4
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8b5 	bl	8006794 <RCCEx_PLLSAI1_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d028      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006644:	4b4a      	ldr	r3, [pc, #296]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006652:	4947      	ldr	r1, [pc, #284]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006662:	d106      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006664:	4b42      	ldr	r3, [pc, #264]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a41      	ldr	r2, [pc, #260]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666e:	60d3      	str	r3, [r2, #12]
 8006670:	e011      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800667a:	d10c      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	2101      	movs	r1, #1
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f886 	bl	8006794 <RCCEx_PLLSAI1_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800668c:	7cfb      	ldrb	r3, [r7, #19]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006692:	7cfb      	ldrb	r3, [r7, #19]
 8006694:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01e      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066a2:	4b33      	ldr	r3, [pc, #204]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	492f      	ldr	r1, [pc, #188]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c4:	d10c      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f861 	bl	8006794 <RCCEx_PLLSAI1_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066f2:	f023 0204 	bic.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fc:	491c      	ldr	r1, [pc, #112]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006716:	f023 0218 	bic.w	r2, r3, #24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	4913      	ldr	r1, [pc, #76]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800673a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006744:	490a      	ldr	r1, [pc, #40]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a04      	ldr	r2, [pc, #16]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006764:	7cbb      	ldrb	r3, [r7, #18]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000

08006774 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a04      	ldr	r2, [pc, #16]	; (8006790 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800677e:	f043 0304 	orr.w	r3, r3, #4
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000

08006794 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067a2:	4b72      	ldr	r3, [pc, #456]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ae:	4b6f      	ldr	r3, [pc, #444]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0203 	and.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d103      	bne.n	80067c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
       ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d142      	bne.n	800684c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	e03f      	b.n	800684c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d018      	beq.n	8006806 <RCCEx_PLLSAI1_Config+0x72>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d825      	bhi.n	8006824 <RCCEx_PLLSAI1_Config+0x90>
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d002      	beq.n	80067e2 <RCCEx_PLLSAI1_Config+0x4e>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d009      	beq.n	80067f4 <RCCEx_PLLSAI1_Config+0x60>
 80067e0:	e020      	b.n	8006824 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067e2:	4b62      	ldr	r3, [pc, #392]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11d      	bne.n	800682a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f2:	e01a      	b.n	800682a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067f4:	4b5d      	ldr	r3, [pc, #372]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d116      	bne.n	800682e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006804:	e013      	b.n	800682e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006806:	4b59      	ldr	r3, [pc, #356]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006812:	4b56      	ldr	r3, [pc, #344]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006822:	e006      	b.n	8006832 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	e004      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006832:	bf00      	nop
    }

    if(status == HAL_OK)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800683a:	4b4c      	ldr	r3, [pc, #304]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f023 0203 	bic.w	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4949      	ldr	r1, [pc, #292]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006848:	4313      	orrs	r3, r2
 800684a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 8086 	bne.w	8006960 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006854:	4b45      	ldr	r3, [pc, #276]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a44      	ldr	r2, [pc, #272]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800685a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800685e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006860:	f7fc fbb0 	bl	8002fc4 <HAL_GetTick>
 8006864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006866:	e009      	b.n	800687c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006868:	f7fc fbac 	bl	8002fc4 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d902      	bls.n	800687c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
        break;
 800687a:	e005      	b.n	8006888 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800687c:	4b3b      	ldr	r3, [pc, #236]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1ef      	bne.n	8006868 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d168      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d113      	bne.n	80068bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006894:	4b35      	ldr	r3, [pc, #212]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	4b35      	ldr	r3, [pc, #212]	; (8006970 <RCCEx_PLLSAI1_Config+0x1dc>)
 800689a:	4013      	ands	r3, r2
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6892      	ldr	r2, [r2, #8]
 80068a0:	0211      	lsls	r1, r2, #8
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68d2      	ldr	r2, [r2, #12]
 80068a6:	06d2      	lsls	r2, r2, #27
 80068a8:	4311      	orrs	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6852      	ldr	r2, [r2, #4]
 80068ae:	3a01      	subs	r2, #1
 80068b0:	0112      	lsls	r2, r2, #4
 80068b2:	430a      	orrs	r2, r1
 80068b4:	492d      	ldr	r1, [pc, #180]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	610b      	str	r3, [r1, #16]
 80068ba:	e02d      	b.n	8006918 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d115      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c2:	4b2a      	ldr	r3, [pc, #168]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	4b2b      	ldr	r3, [pc, #172]	; (8006974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6892      	ldr	r2, [r2, #8]
 80068ce:	0211      	lsls	r1, r2, #8
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6912      	ldr	r2, [r2, #16]
 80068d4:	0852      	lsrs	r2, r2, #1
 80068d6:	3a01      	subs	r2, #1
 80068d8:	0552      	lsls	r2, r2, #21
 80068da:	4311      	orrs	r1, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6852      	ldr	r2, [r2, #4]
 80068e0:	3a01      	subs	r2, #1
 80068e2:	0112      	lsls	r2, r2, #4
 80068e4:	430a      	orrs	r2, r1
 80068e6:	4921      	ldr	r1, [pc, #132]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	610b      	str	r3, [r1, #16]
 80068ec:	e014      	b.n	8006918 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ee:	4b1f      	ldr	r3, [pc, #124]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	0211      	lsls	r1, r2, #8
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6952      	ldr	r2, [r2, #20]
 8006900:	0852      	lsrs	r2, r2, #1
 8006902:	3a01      	subs	r2, #1
 8006904:	0652      	lsls	r2, r2, #25
 8006906:	4311      	orrs	r1, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6852      	ldr	r2, [r2, #4]
 800690c:	3a01      	subs	r2, #1
 800690e:	0112      	lsls	r2, r2, #4
 8006910:	430a      	orrs	r2, r1
 8006912:	4916      	ldr	r1, [pc, #88]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006918:	4b14      	ldr	r3, [pc, #80]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a13      	ldr	r2, [pc, #76]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800691e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fc fb4e 	bl	8002fc4 <HAL_GetTick>
 8006928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800692a:	e009      	b.n	8006940 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800692c:	f7fc fb4a 	bl	8002fc4 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d902      	bls.n	8006940 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	73fb      	strb	r3, [r7, #15]
          break;
 800693e:	e005      	b.n	800694c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ef      	beq.n	800692c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4904      	ldr	r1, [pc, #16]	; (800696c <RCCEx_PLLSAI1_Config+0x1d8>)
 800695c:	4313      	orrs	r3, r2
 800695e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	07ff800f 	.word	0x07ff800f
 8006974:	ff9f800f 	.word	0xff9f800f
 8006978:	f9ff800f 	.word	0xf9ff800f

0800697c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006996:	4b6f      	ldr	r3, [pc, #444]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f003 0203 	and.w	r2, r3, #3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d103      	bne.n	80069ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
       ||
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d142      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
 80069b2:	e03f      	b.n	8006a34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d018      	beq.n	80069ee <RCCEx_PLLSAI2_Config+0x72>
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d825      	bhi.n	8006a0c <RCCEx_PLLSAI2_Config+0x90>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d002      	beq.n	80069ca <RCCEx_PLLSAI2_Config+0x4e>
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d009      	beq.n	80069dc <RCCEx_PLLSAI2_Config+0x60>
 80069c8:	e020      	b.n	8006a0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ca:	4b62      	ldr	r3, [pc, #392]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11d      	bne.n	8006a12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069da:	e01a      	b.n	8006a12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069dc:	4b5d      	ldr	r3, [pc, #372]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d116      	bne.n	8006a16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ec:	e013      	b.n	8006a16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ee:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069fa:	4b56      	ldr	r3, [pc, #344]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a0a:	e006      	b.n	8006a1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e004      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d108      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a22:	4b4c      	ldr	r3, [pc, #304]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f023 0203 	bic.w	r2, r3, #3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4949      	ldr	r1, [pc, #292]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 8086 	bne.w	8006b48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a3c:	4b45      	ldr	r3, [pc, #276]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a44      	ldr	r2, [pc, #272]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a48:	f7fc fabc 	bl	8002fc4 <HAL_GetTick>
 8006a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a4e:	e009      	b.n	8006a64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a50:	f7fc fab8 	bl	8002fc4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d902      	bls.n	8006a64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	73fb      	strb	r3, [r7, #15]
        break;
 8006a62:	e005      	b.n	8006a70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a64:	4b3b      	ldr	r3, [pc, #236]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ef      	bne.n	8006a50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d168      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d113      	bne.n	8006aa4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	4b35      	ldr	r3, [pc, #212]	; (8006b58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6892      	ldr	r2, [r2, #8]
 8006a88:	0211      	lsls	r1, r2, #8
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68d2      	ldr	r2, [r2, #12]
 8006a8e:	06d2      	lsls	r2, r2, #27
 8006a90:	4311      	orrs	r1, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6852      	ldr	r2, [r2, #4]
 8006a96:	3a01      	subs	r2, #1
 8006a98:	0112      	lsls	r2, r2, #4
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	492d      	ldr	r1, [pc, #180]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	614b      	str	r3, [r1, #20]
 8006aa2:	e02d      	b.n	8006b00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d115      	bne.n	8006ad6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6892      	ldr	r2, [r2, #8]
 8006ab6:	0211      	lsls	r1, r2, #8
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6912      	ldr	r2, [r2, #16]
 8006abc:	0852      	lsrs	r2, r2, #1
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	0552      	lsls	r2, r2, #21
 8006ac2:	4311      	orrs	r1, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6852      	ldr	r2, [r2, #4]
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	0112      	lsls	r2, r2, #4
 8006acc:	430a      	orrs	r2, r1
 8006ace:	4921      	ldr	r1, [pc, #132]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	614b      	str	r3, [r1, #20]
 8006ad4:	e014      	b.n	8006b00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	4b21      	ldr	r3, [pc, #132]	; (8006b60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6892      	ldr	r2, [r2, #8]
 8006ae2:	0211      	lsls	r1, r2, #8
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6952      	ldr	r2, [r2, #20]
 8006ae8:	0852      	lsrs	r2, r2, #1
 8006aea:	3a01      	subs	r2, #1
 8006aec:	0652      	lsls	r2, r2, #25
 8006aee:	4311      	orrs	r1, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6852      	ldr	r2, [r2, #4]
 8006af4:	3a01      	subs	r2, #1
 8006af6:	0112      	lsls	r2, r2, #4
 8006af8:	430a      	orrs	r2, r1
 8006afa:	4916      	ldr	r1, [pc, #88]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b00:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fc fa5a 	bl	8002fc4 <HAL_GetTick>
 8006b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b12:	e009      	b.n	8006b28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b14:	f7fc fa56 	bl	8002fc4 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d902      	bls.n	8006b28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	73fb      	strb	r3, [r7, #15]
          break;
 8006b26:	e005      	b.n	8006b34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	4904      	ldr	r1, [pc, #16]	; (8006b54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	07ff800f 	.word	0x07ff800f
 8006b5c:	ff9f800f 	.word	0xff9f800f
 8006b60:	f9ff800f 	.word	0xf9ff800f

08006b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e095      	b.n	8006ca2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b86:	d009      	beq.n	8006b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	61da      	str	r2, [r3, #28]
 8006b8e:	e005      	b.n	8006b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fb ff34 	bl	8002a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bdc:	d902      	bls.n	8006be4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e002      	b.n	8006bea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006be8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bf2:	d007      	beq.n	8006c04 <HAL_SPI_Init+0xa0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bfc:	d002      	beq.n	8006c04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	ea42 0103 	orr.w	r1, r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f003 0204 	and.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c80:	ea42 0103 	orr.w	r1, r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e049      	b.n	8006d50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d106      	bne.n	8006cd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f841 	bl	8006d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f000 f9d9 	bl	80070a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d001      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e04f      	b.n	8006e24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a23      	ldr	r2, [pc, #140]	; (8006e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01d      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d018      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_Base_Start_IT+0x76>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d115      	bne.n	8006e0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d015      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0xb4>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfa:	d011      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	e008      	b.n	8006e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0201 	orr.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e000      	b.n	8006e22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40013400 	.word	0x40013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	00010007 	.word	0x00010007

08006e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d020      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01b      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0202 	mvn.w	r2, #2
 8006e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8e4 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8d6 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8e7 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0204 	mvn.w	r2, #4
 8006ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8be 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8b0 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8c1 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d020      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0208 	mvn.w	r2, #8
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f898 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f88a 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f89b 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0310 	and.w	r3, r3, #16
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d020      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0210 	mvn.w	r2, #16
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f872 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f864 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f875 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0201 	mvn.w	r2, #1
 8006fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fb fb48 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f906 	bl	80071e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f8fe 	bl	80071fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f834 	bl	800708c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00c      	beq.n	8007048 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0320 	and.w	r3, r3, #32
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0220 	mvn.w	r2, #32
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8c6 	bl	80071d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a40      	ldr	r2, [pc, #256]	; (80071b4 <TIM_Base_SetConfig+0x114>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070be:	d00f      	beq.n	80070e0 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3d      	ldr	r2, [pc, #244]	; (80071b8 <TIM_Base_SetConfig+0x118>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00b      	beq.n	80070e0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3c      	ldr	r2, [pc, #240]	; (80071bc <TIM_Base_SetConfig+0x11c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d007      	beq.n	80070e0 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a3b      	ldr	r2, [pc, #236]	; (80071c0 <TIM_Base_SetConfig+0x120>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3a      	ldr	r2, [pc, #232]	; (80071c4 <TIM_Base_SetConfig+0x124>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d108      	bne.n	80070f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <TIM_Base_SetConfig+0x114>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01f      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d01b      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <TIM_Base_SetConfig+0x118>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d017      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2b      	ldr	r2, [pc, #172]	; (80071bc <TIM_Base_SetConfig+0x11c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <TIM_Base_SetConfig+0x120>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00f      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a29      	ldr	r2, [pc, #164]	; (80071c4 <TIM_Base_SetConfig+0x124>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a28      	ldr	r2, [pc, #160]	; (80071c8 <TIM_Base_SetConfig+0x128>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a27      	ldr	r2, [pc, #156]	; (80071cc <TIM_Base_SetConfig+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_Base_SetConfig+0x9a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <TIM_Base_SetConfig+0x130>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d108      	bne.n	800714c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a10      	ldr	r2, [pc, #64]	; (80071b4 <TIM_Base_SetConfig+0x114>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00f      	beq.n	8007198 <TIM_Base_SetConfig+0xf8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a12      	ldr	r2, [pc, #72]	; (80071c4 <TIM_Base_SetConfig+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_Base_SetConfig+0xf8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <TIM_Base_SetConfig+0x128>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_Base_SetConfig+0xf8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a10      	ldr	r2, [pc, #64]	; (80071cc <TIM_Base_SetConfig+0x12c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_Base_SetConfig+0xf8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <TIM_Base_SetConfig+0x130>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d103      	bne.n	80071a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	615a      	str	r2, [r3, #20]
}
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	40014400 	.word	0x40014400
 80071d0:	40014800 	.word	0x40014800

080071d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e042      	b.n	80072a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fb fc6b 	bl	8002b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	; 0x24
 800723e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fb24 	bl	80078a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f825 	bl	80072b0 <UART_SetConfig>
 8007266:	4603      	mov	r3, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e01b      	b.n	80072a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fba3 	bl	80079ec <UART_CheckIdleState>
 80072a6:	4603      	mov	r3, r0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b08c      	sub	sp, #48	; 0x30
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4baa      	ldr	r3, [pc, #680]	; (8007588 <UART_SetConfig+0x2d8>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a9f      	ldr	r2, [pc, #636]	; (800758c <UART_SetConfig+0x2dc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007318:	4313      	orrs	r3, r2
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007326:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007330:	430b      	orrs	r3, r1
 8007332:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f023 010f 	bic.w	r1, r3, #15
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a90      	ldr	r2, [pc, #576]	; (8007590 <UART_SetConfig+0x2e0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d125      	bne.n	80073a0 <UART_SetConfig+0xf0>
 8007354:	4b8f      	ldr	r3, [pc, #572]	; (8007594 <UART_SetConfig+0x2e4>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b03      	cmp	r3, #3
 8007360:	d81a      	bhi.n	8007398 <UART_SetConfig+0xe8>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <UART_SetConfig+0xb8>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007379 	.word	0x08007379
 800736c:	08007389 	.word	0x08007389
 8007370:	08007381 	.word	0x08007381
 8007374:	08007391 	.word	0x08007391
 8007378:	2301      	movs	r3, #1
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737e:	e116      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007386:	e112      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e10e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e10a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e106      	b.n	80075ae <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a7c      	ldr	r2, [pc, #496]	; (8007598 <UART_SetConfig+0x2e8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d138      	bne.n	800741c <UART_SetConfig+0x16c>
 80073aa:	4b7a      	ldr	r3, [pc, #488]	; (8007594 <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f003 030c 	and.w	r3, r3, #12
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d82d      	bhi.n	8007414 <UART_SetConfig+0x164>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <UART_SetConfig+0x110>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073f5 	.word	0x080073f5
 80073c4:	08007415 	.word	0x08007415
 80073c8:	08007415 	.word	0x08007415
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007405 	.word	0x08007405
 80073d4:	08007415 	.word	0x08007415
 80073d8:	08007415 	.word	0x08007415
 80073dc:	08007415 	.word	0x08007415
 80073e0:	080073fd 	.word	0x080073fd
 80073e4:	08007415 	.word	0x08007415
 80073e8:	08007415 	.word	0x08007415
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fa:	e0d8      	b.n	80075ae <UART_SetConfig+0x2fe>
 80073fc:	2302      	movs	r3, #2
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007402:	e0d4      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007404:	2304      	movs	r3, #4
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740a:	e0d0      	b.n	80075ae <UART_SetConfig+0x2fe>
 800740c:	2308      	movs	r3, #8
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007412:	e0cc      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007414:	2310      	movs	r3, #16
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741a:	e0c8      	b.n	80075ae <UART_SetConfig+0x2fe>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a5e      	ldr	r2, [pc, #376]	; (800759c <UART_SetConfig+0x2ec>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d125      	bne.n	8007472 <UART_SetConfig+0x1c2>
 8007426:	4b5b      	ldr	r3, [pc, #364]	; (8007594 <UART_SetConfig+0x2e4>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007430:	2b30      	cmp	r3, #48	; 0x30
 8007432:	d016      	beq.n	8007462 <UART_SetConfig+0x1b2>
 8007434:	2b30      	cmp	r3, #48	; 0x30
 8007436:	d818      	bhi.n	800746a <UART_SetConfig+0x1ba>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d00a      	beq.n	8007452 <UART_SetConfig+0x1a2>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d814      	bhi.n	800746a <UART_SetConfig+0x1ba>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <UART_SetConfig+0x19a>
 8007444:	2b10      	cmp	r3, #16
 8007446:	d008      	beq.n	800745a <UART_SetConfig+0x1aa>
 8007448:	e00f      	b.n	800746a <UART_SetConfig+0x1ba>
 800744a:	2300      	movs	r3, #0
 800744c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007450:	e0ad      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007452:	2302      	movs	r3, #2
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007458:	e0a9      	b.n	80075ae <UART_SetConfig+0x2fe>
 800745a:	2304      	movs	r3, #4
 800745c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007460:	e0a5      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007462:	2308      	movs	r3, #8
 8007464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007468:	e0a1      	b.n	80075ae <UART_SetConfig+0x2fe>
 800746a:	2310      	movs	r3, #16
 800746c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007470:	e09d      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <UART_SetConfig+0x2f0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d125      	bne.n	80074c8 <UART_SetConfig+0x218>
 800747c:	4b45      	ldr	r3, [pc, #276]	; (8007594 <UART_SetConfig+0x2e4>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007486:	2bc0      	cmp	r3, #192	; 0xc0
 8007488:	d016      	beq.n	80074b8 <UART_SetConfig+0x208>
 800748a:	2bc0      	cmp	r3, #192	; 0xc0
 800748c:	d818      	bhi.n	80074c0 <UART_SetConfig+0x210>
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d00a      	beq.n	80074a8 <UART_SetConfig+0x1f8>
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d814      	bhi.n	80074c0 <UART_SetConfig+0x210>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UART_SetConfig+0x1f0>
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x200>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x210>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e082      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e07e      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e07a      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e076      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e072      	b.n	80075ae <UART_SetConfig+0x2fe>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a35      	ldr	r2, [pc, #212]	; (80075a4 <UART_SetConfig+0x2f4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d12a      	bne.n	8007528 <UART_SetConfig+0x278>
 80074d2:	4b30      	ldr	r3, [pc, #192]	; (8007594 <UART_SetConfig+0x2e4>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e0:	d01a      	beq.n	8007518 <UART_SetConfig+0x268>
 80074e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e6:	d81b      	bhi.n	8007520 <UART_SetConfig+0x270>
 80074e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ec:	d00c      	beq.n	8007508 <UART_SetConfig+0x258>
 80074ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f2:	d815      	bhi.n	8007520 <UART_SetConfig+0x270>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <UART_SetConfig+0x250>
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fc:	d008      	beq.n	8007510 <UART_SetConfig+0x260>
 80074fe:	e00f      	b.n	8007520 <UART_SetConfig+0x270>
 8007500:	2300      	movs	r3, #0
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007506:	e052      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007508:	2302      	movs	r3, #2
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750e:	e04e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007516:	e04a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751e:	e046      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007526:	e042      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a17      	ldr	r2, [pc, #92]	; (800758c <UART_SetConfig+0x2dc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d13a      	bne.n	80075a8 <UART_SetConfig+0x2f8>
 8007532:	4b18      	ldr	r3, [pc, #96]	; (8007594 <UART_SetConfig+0x2e4>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007540:	d01a      	beq.n	8007578 <UART_SetConfig+0x2c8>
 8007542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007546:	d81b      	bhi.n	8007580 <UART_SetConfig+0x2d0>
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754c:	d00c      	beq.n	8007568 <UART_SetConfig+0x2b8>
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007552:	d815      	bhi.n	8007580 <UART_SetConfig+0x2d0>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <UART_SetConfig+0x2b0>
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d008      	beq.n	8007570 <UART_SetConfig+0x2c0>
 800755e:	e00f      	b.n	8007580 <UART_SetConfig+0x2d0>
 8007560:	2300      	movs	r3, #0
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e022      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007568:	2302      	movs	r3, #2
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e01e      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007576:	e01a      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e016      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007586:	e012      	b.n	80075ae <UART_SetConfig+0x2fe>
 8007588:	cfff69f3 	.word	0xcfff69f3
 800758c:	40008000 	.word	0x40008000
 8007590:	40013800 	.word	0x40013800
 8007594:	40021000 	.word	0x40021000
 8007598:	40004400 	.word	0x40004400
 800759c:	40004800 	.word	0x40004800
 80075a0:	40004c00 	.word	0x40004c00
 80075a4:	40005000 	.word	0x40005000
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4aae      	ldr	r2, [pc, #696]	; (800786c <UART_SetConfig+0x5bc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	f040 8097 	bne.w	80076e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d823      	bhi.n	800760a <UART_SetConfig+0x35a>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x318>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	0800760b 	.word	0x0800760b
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	0800760b 	.word	0x0800760b
 80075d8:	080075fb 	.word	0x080075fb
 80075dc:	0800760b 	.word	0x0800760b
 80075e0:	0800760b 	.word	0x0800760b
 80075e4:	0800760b 	.word	0x0800760b
 80075e8:	08007603 	.word	0x08007603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ec:	f7fe fc74 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 80075f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075f2:	e010      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f4:	4b9e      	ldr	r3, [pc, #632]	; (8007870 <UART_SetConfig+0x5c0>)
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075f8:	e00d      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fa:	f7fe fbd5 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 80075fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007600:	e009      	b.n	8007616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007608:	e005      	b.n	8007616 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8130 	beq.w	800787e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	4a94      	ldr	r2, [pc, #592]	; (8007874 <UART_SetConfig+0x5c4>)
 8007624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007628:	461a      	mov	r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007630:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	429a      	cmp	r2, r3
 8007640:	d305      	bcc.n	800764e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	429a      	cmp	r2, r3
 800764c:	d903      	bls.n	8007656 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007654:	e113      	b.n	800787e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	2200      	movs	r2, #0
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	60fa      	str	r2, [r7, #12]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	4a84      	ldr	r2, [pc, #528]	; (8007874 <UART_SetConfig+0x5c4>)
 8007664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007668:	b29b      	uxth	r3, r3
 800766a:	2200      	movs	r2, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007678:	f7f8 fdc2 	bl	8000200 <__aeabi_uldivmod>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	020b      	lsls	r3, r1, #8
 800768e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007692:	0202      	lsls	r2, r0, #8
 8007694:	6979      	ldr	r1, [r7, #20]
 8007696:	6849      	ldr	r1, [r1, #4]
 8007698:	0849      	lsrs	r1, r1, #1
 800769a:	2000      	movs	r0, #0
 800769c:	460c      	mov	r4, r1
 800769e:	4605      	mov	r5, r0
 80076a0:	eb12 0804 	adds.w	r8, r2, r4
 80076a4:	eb43 0905 	adc.w	r9, r3, r5
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	469a      	mov	sl, r3
 80076b0:	4693      	mov	fp, r2
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f8 fda1 	bl	8000200 <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4613      	mov	r3, r2
 80076c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076cc:	d308      	bcc.n	80076e0 <UART_SetConfig+0x430>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d4:	d204      	bcs.n	80076e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	e0ce      	b.n	800787e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076e6:	e0ca      	b.n	800787e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f0:	d166      	bne.n	80077c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80076f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d827      	bhi.n	800774a <UART_SetConfig+0x49a>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x450>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	0800774b 	.word	0x0800774b
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800774b 	.word	0x0800774b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fe fbd8 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8007728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800772a:	e014      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fe fbea 	bl	8005f04 <HAL_RCC_GetPCLK2Freq>
 8007730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007732:	e010      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b4e      	ldr	r3, [pc, #312]	; (8007870 <UART_SetConfig+0x5c0>)
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007738:	e00d      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fe fb35 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 800773e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007748:	e005      	b.n	8007756 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8090 	beq.w	800787e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	4a44      	ldr	r2, [pc, #272]	; (8007874 <UART_SetConfig+0x5c4>)
 8007764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007768:	461a      	mov	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007770:	005a      	lsls	r2, r3, #1
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	441a      	add	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007782:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d916      	bls.n	80077b8 <UART_SetConfig+0x508>
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007790:	d212      	bcs.n	80077b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f023 030f 	bic.w	r3, r3, #15
 800779a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	8bfb      	ldrh	r3, [r7, #30]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	8bfa      	ldrh	r2, [r7, #30]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e062      	b.n	800787e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077be:	e05e      	b.n	800787e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d828      	bhi.n	800781a <UART_SetConfig+0x56a>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <UART_SetConfig+0x520>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fe fb70 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 80077f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077fa:	e014      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fe fb82 	bl	8005f04 <HAL_RCC_GetPCLK2Freq>
 8007800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007802:	e010      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <UART_SetConfig+0x5c0>)
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fe facd 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 800780e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007810:	e009      	b.n	8007826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007818:	e005      	b.n	8007826 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007824:	bf00      	nop
    }

    if (pclk != 0U)
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d028      	beq.n	800787e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	4a10      	ldr	r2, [pc, #64]	; (8007874 <UART_SetConfig+0x5c4>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	461a      	mov	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	fbb3 f2f2 	udiv	r2, r3, r2
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	441a      	add	r2, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d910      	bls.n	8007878 <UART_SetConfig+0x5c8>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785c:	d20c      	bcs.n	8007878 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	b29a      	uxth	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
 8007868:	e009      	b.n	800787e <UART_SetConfig+0x5ce>
 800786a:	bf00      	nop
 800786c:	40008000 	.word	0x40008000
 8007870:	00f42400 	.word	0x00f42400
 8007874:	08007fb0 	.word	0x08007fb0
      }
      else
      {
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2201      	movs	r2, #1
 8007882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2201      	movs	r2, #1
 800788a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2200      	movs	r2, #0
 8007898:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800789a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3730      	adds	r7, #48	; 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01a      	beq.n	80079be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a6:	d10a      	bne.n	80079be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	605a      	str	r2, [r3, #4]
  }
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b098      	sub	sp, #96	; 0x60
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079fc:	f7fb fae2 	bl	8002fc4 <HAL_GetTick>
 8007a00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d12f      	bne.n	8007a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f88e 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d022      	beq.n	8007a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a48:	647b      	str	r3, [r7, #68]	; 0x44
 8007a4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e6      	bne.n	8007a2a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e063      	b.n	8007b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d149      	bne.n	8007b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a86:	2200      	movs	r2, #0
 8007a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f857 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d03c      	beq.n	8007b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aea:	61fa      	str	r2, [r7, #28]
 8007aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	69b9      	ldr	r1, [r7, #24]
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	617b      	str	r3, [r7, #20]
   return(result);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e012      	b.n	8007b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3758      	adds	r7, #88	; 0x58
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e049      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d045      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fb fa33 	bl	8002fc4 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e048      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d031      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d110      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2208      	movs	r2, #8
 8007b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f838 	bl	8007c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e029      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc0:	d111      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f81e 	bl	8007c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e00f      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d0a6      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b095      	sub	sp, #84	; 0x54
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
 8007c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e6      	bne.n	8007c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e3      	bne.n	8007c48 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d118      	bne.n	8007cba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6979      	ldr	r1, [r7, #20]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007cce:	bf00      	nop
 8007cd0:	3754      	adds	r7, #84	; 0x54
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e027      	b.n	8007d40 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	; 0x24
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e02d      	b.n	8007dc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2224      	movs	r2, #36	; 0x24
 8007d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0201 	bic.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f84f 	bl	8007e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e02d      	b.n	8007e3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2224      	movs	r2, #36	; 0x24
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f811 	bl	8007e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e64:	e031      	b.n	8007eca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e66:	2308      	movs	r3, #8
 8007e68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	0e5b      	lsrs	r3, r3, #25
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	0f5b      	lsrs	r3, r3, #29
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	7b3a      	ldrb	r2, [r7, #12]
 8007e92:	4911      	ldr	r1, [pc, #68]	; (8007ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8007e94:	5c8a      	ldrb	r2, [r1, r2]
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e9a:	7b3a      	ldrb	r2, [r7, #12]
 8007e9c:	490f      	ldr	r1, [pc, #60]	; (8007edc <UARTEx_SetNbDataToProcess+0x98>)
 8007e9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	7b7a      	ldrb	r2, [r7, #13]
 8007eb0:	4909      	ldr	r1, [pc, #36]	; (8007ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8007eb2:	5c8a      	ldrb	r2, [r1, r2]
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007eb8:	7b7a      	ldrb	r2, [r7, #13]
 8007eba:	4908      	ldr	r1, [pc, #32]	; (8007edc <UARTEx_SetNbDataToProcess+0x98>)
 8007ebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	08007fc8 	.word	0x08007fc8
 8007edc:	08007fd0 	.word	0x08007fd0

08007ee0 <memset>:
 8007ee0:	4402      	add	r2, r0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d100      	bne.n	8007eea <memset+0xa>
 8007ee8:	4770      	bx	lr
 8007eea:	f803 1b01 	strb.w	r1, [r3], #1
 8007eee:	e7f9      	b.n	8007ee4 <memset+0x4>

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f000 f818 	bl	8007f38 <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	08007fe0 	.word	0x08007fe0
 8007f2c:	08007fe0 	.word	0x08007fe0
 8007f30:	08007fe0 	.word	0x08007fe0
 8007f34:	08007fe4 	.word	0x08007fe4

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

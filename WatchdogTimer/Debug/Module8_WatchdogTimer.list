
Module8_WatchdogTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009668  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009928  08009928  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  2000005c  0800998c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800998c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f2be  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000366f  00000000  00000000  0003f38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000161c  00000000  00000000  00044628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f2e5  00000000  00000000  00045c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f48  00000000  00000000  00074f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001286b9  00000000  00000000  00096e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080c8  00000000  00000000  001bf52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001c75f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009810 	.word	0x08009810

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08009810 	.word	0x08009810

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b0a0      	sub	sp, #128	; 0x80
 8000e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 fbaa 	bl	8002596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8d1 	bl	8000fe8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e46:	f000 f933 	bl	80010b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4a:	f000 fd7d 	bl	8001948 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4e:	f000 fd51 	bl	80018f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e52:	f000 f95d 	bl	8001110 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000e56:	f000 f9bf 	bl	80011d8 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000e5a:	f000 f9f5 	bl	8001248 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e5e:	f000 fa33 	bl	80012c8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000e62:	f000 fa8f 	bl	8001384 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000e66:	f000 fae3 	bl	8001430 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000e6a:	f000 fb1f 	bl	80014ac <MX_SPI3_Init>
  MX_UART4_Init();
 8000e6e:	f000 fc07 	bl	8001680 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fc51 	bl	8001718 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e76:	f000 fc9b 	bl	80017b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e7a:	f000 fce7 	bl	800184c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000e7e:	f000 fd31 	bl	80018e4 <MX_USB_OTG_FS_USB_Init>
  MX_TIM1_Init();
 8000e82:	f000 fb51 	bl	8001528 <MX_TIM1_Init>
  MX_IWDG_Init();
 8000e86:	f000 fa5f 	bl	8001348 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4849      	ldr	r0, [pc, #292]	; (8000fb4 <main+0x17c>)
 8000e8e:	f005 ffdd 	bl	8006e4c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e92:	2104      	movs	r1, #4
 8000e94:	4847      	ldr	r0, [pc, #284]	; (8000fb4 <main+0x17c>)
 8000e96:	f006 feed 	bl	8007c74 <HAL_TIMEx_PWMN_Start>

  HAL_UART_Transmit(&huart1, "System Reset\r\n", strlen("System Reset\r\n"), 1000);
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	220e      	movs	r2, #14
 8000ea0:	4945      	ldr	r1, [pc, #276]	; (8000fb8 <main+0x180>)
 8000ea2:	4846      	ldr	r0, [pc, #280]	; (8000fbc <main+0x184>)
 8000ea4:	f007 f91b 	bl	80080de <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCBuf, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4945      	ldr	r1, [pc, #276]	; (8000fc0 <main+0x188>)
 8000eac:	4845      	ldr	r0, [pc, #276]	; (8000fc4 <main+0x18c>)
 8000eae:	f001 ff2b 	bl	8002d08 <HAL_ADC_Start_DMA>
	  while(ADCComplete == 0);
 8000eb2:	bf00      	nop
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <main+0x190>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0fb      	beq.n	8000eb4 <main+0x7c>
	  ADCComplete = 0;
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <main+0x190>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

	  //Process internal temperature sensor data
     /* k = (*TS_CAL2 - *TS_CAL1)/(CAL2_TEMP - CAL1_TEMP);
      tempData = CAL1_TEMP + (ADCBuf - *TS_CAL1) / k;*/

	  tempData = ((uint16_t) (CAL2_TEMP - CAL1_TEMP))/(1.0 *(*TS_CAL2 - *TS_CAL1)*(ADCBuf - *TS_CAL1)) + ((uint16_t) CAL1_TEMP);
 8000ec2:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <main+0x194>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <main+0x198>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb40 	bl	8000554 <__aeabi_i2d>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x188>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <main+0x198>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb35 	bl	8000554 <__aeabi_i2d>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fb99 	bl	8000628 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	f04f 0000 	mov.w	r0, #0
 8000efe:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <main+0x19c>)
 8000f00:	f7ff fcbc 	bl	800087c <__aeabi_ddiv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <main+0x1a0>)
 8000f12:	f7ff f9d3 	bl	80002bc <__adddf3>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fdbd 	bl	8000a9c <__aeabi_d2f>
 8000f22:	4603      	mov	r3, r0
 8000f24:	677b      	str	r3, [r7, #116]	; 0x74

      int tempDataInt = tempData;
 8000f26:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
      float tempDataFrac;

      tempDataFrac = tempData - tempDataInt;
 8000f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f46:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

      int tempDataFrac2Digits;

      tempDataFrac2Digits = trunc(tempDataFrac * 100);
 8000f4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f4e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000fdc <main+0x1a4>
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	ee17 0a90 	vmov	r0, s15
 8000f5a:	f7ff fb0d 	bl	8000578 <__aeabi_f2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	ec43 2b10 	vmov	d0, r2, r3
 8000f66:	f008 fc19 	bl	800979c <trunc>
 8000f6a:	ec53 2b10 	vmov	r2, r3, d0
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fd6b 	bl	8000a4c <__aeabi_d2iz>
 8000f76:	4603      	mov	r3, r0
 8000f78:	66bb      	str	r3, [r7, #104]	; 0x68

      snprintf(tempReading, 100, "Internal temperature sensor reading from ADC: %1d.%02d degree C\r\n", tempDataInt, tempDataFrac2Digits);
 8000f7a:	1d38      	adds	r0, r7, #4
 8000f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <main+0x1a8>)
 8000f84:	2164      	movs	r1, #100	; 0x64
 8000f86:	f007 ff51 	bl	8008e2c <sniprintf>

      HAL_UART_Transmit(&huart1, (uint8_t *) tempReading, strlen(tempReading), 1000);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f937 	bl	8000200 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	1d39      	adds	r1, r7, #4
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <main+0x184>)
 8000f9e:	f007 f89e 	bl	80080de <HAL_UART_Transmit>

      HAL_Delay(7000);
 8000fa2:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000fa6:	f001 fb6b 	bl	8002680 <HAL_Delay>

      HAL_IWDG_Refresh(&hiwdg);
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <main+0x1ac>)
 8000fac:	f003 fc38 	bl	8004820 <HAL_IWDG_Refresh>
  {
 8000fb0:	e77a      	b.n	8000ea8 <main+0x70>
 8000fb2:	bf00      	nop
 8000fb4:	20000348 	.word	0x20000348
 8000fb8:	08009828 	.word	0x08009828
 8000fbc:	20000428 	.word	0x20000428
 8000fc0:	200005e4 	.word	0x200005e4
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	200005e8 	.word	0x200005e8
 8000fcc:	1fff75ca 	.word	0x1fff75ca
 8000fd0:	1fff75a8 	.word	0x1fff75a8
 8000fd4:	40590000 	.word	0x40590000
 8000fd8:	403e0000 	.word	0x403e0000
 8000fdc:	42c80000 	.word	0x42c80000
 8000fe0:	08009838 	.word	0x08009838
 8000fe4:	20000220 	.word	0x20000220

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b096      	sub	sp, #88	; 0x58
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2244      	movs	r2, #68	; 0x44
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 ff4c 	bl	8008e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f004 f91e 	bl	800524c <HAL_PWREx_ControlVoltageScaling>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001016:	f000 fde9 	bl	8001bec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800101a:	f004 f8e7 	bl	80051ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <SystemClock_Config+0xc4>)
 8001020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <SystemClock_Config+0xc4>)
 8001026:	f023 0318 	bic.w	r3, r3, #24
 800102a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800102e:	231c      	movs	r3, #28
 8001030:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001036:	2301      	movs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001042:	2360      	movs	r3, #96	; 0x60
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800104a:	2301      	movs	r3, #1
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001052:	233c      	movs	r3, #60	; 0x3c
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4618      	mov	r0, r3
 8001068:	f004 f994 	bl	8005394 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001072:	f000 fdbb 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2303      	movs	r3, #3
 800107c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	2105      	movs	r1, #5
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fd9a 	bl	8005bc8 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800109a:	f000 fda7 	bl	8001bec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800109e:	f005 fb81 	bl	80067a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010a2:	bf00      	nop
 80010a4:	3758      	adds	r7, #88	; 0x58
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a6      	sub	sp, #152	; 0x98
 80010b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2294      	movs	r2, #148	; 0x94
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fee9 	bl	8008e94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80010c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010d4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010de:	2318      	movs	r3, #24
 80010e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80010ee:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80010f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 f824 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001102:	f000 fd73 	bl	8001bec <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3798      	adds	r7, #152	; 0x98
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <MX_ADC1_Init+0xc0>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_ADC1_Init+0xbc>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_ADC1_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001146:	2204      	movs	r2, #4
 8001148:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_ADC1_Init+0xbc>)
 800114c:	2200      	movs	r2, #0
 800114e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001152:	2200      	movs	r2, #0
 8001154:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001158:	2201      	movs	r2, #1
 800115a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_ADC1_Init+0xbc>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_ADC1_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_ADC1_Init+0xbc>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_ADC1_Init+0xbc>)
 8001188:	f001 fc78 	bl	8002a7c <HAL_ADC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001192:	f000 fd2b 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_ADC1_Init+0xc4>)
 8001198:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119a:	2306      	movs	r3, #6
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a2:	237f      	movs	r3, #127	; 0x7f
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_ADC1_Init+0xbc>)
 80011b4:	f001 fe40 	bl	8002e38 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011be:	f000 fd15 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000078 	.word	0x20000078
 80011d0:	50040000 	.word	0x50040000
 80011d4:	04300002 	.word	0x04300002

080011d8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <MX_DFSDM1_Init+0x6c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011f0:	2202      	movs	r2, #2
 80011f2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_DFSDM1_Init+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_DFSDM1_Init+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_DFSDM1_Init+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DFSDM1_Init+0x68>)
 800120e:	2204      	movs	r2, #4
 8001210:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_DFSDM1_Init+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DFSDM1_Init+0x68>)
 800121a:	2201      	movs	r2, #1
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_DFSDM1_Init+0x68>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_DFSDM1_Init+0x68>)
 8001226:	2200      	movs	r2, #0
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_DFSDM1_Init+0x68>)
 800122c:	f002 fc2c 	bl	8003a88 <HAL_DFSDM_ChannelInit>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001236:	f000 fcd9 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000140 	.word	0x20000140
 8001244:	40016040 	.word	0x40016040

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_I2C1_Init+0x74>)
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <MX_I2C1_Init+0x78>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_I2C1_Init+0x74>)
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <MX_I2C1_Init+0x7c>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_I2C1_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <MX_I2C1_Init+0x74>)
 8001284:	f003 f94b 	bl	800451e <HAL_I2C_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800128e:	f000 fcad 	bl	8001bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_I2C1_Init+0x74>)
 8001296:	f003 f9dd 	bl	8004654 <HAL_I2CEx_ConfigAnalogFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 fca4 	bl	8001bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_I2C1_Init+0x74>)
 80012a8:	f003 fa1f 	bl	80046ea <HAL_I2CEx_ConfigDigitalFilter>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 fc9b 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000178 	.word	0x20000178
 80012c0:	40005400 	.word	0x40005400
 80012c4:	307075b1 	.word	0x307075b1

080012c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_I2C2_Init+0x74>)
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_I2C2_Init+0x78>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_I2C2_Init+0x74>)
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <MX_I2C2_Init+0x7c>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_I2C2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_I2C2_Init+0x74>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_I2C2_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_I2C2_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <MX_I2C2_Init+0x74>)
 8001304:	f003 f90b 	bl	800451e <HAL_I2C_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800130e:	f000 fc6d 	bl	8001bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001312:	2100      	movs	r1, #0
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <MX_I2C2_Init+0x74>)
 8001316:	f003 f99d 	bl	8004654 <HAL_I2CEx_ConfigAnalogFilter>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001320:	f000 fc64 	bl	8001bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_I2C2_Init+0x74>)
 8001328:	f003 f9df 	bl	80046ea <HAL_I2CEx_ConfigDigitalFilter>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 fc5b 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001cc 	.word	0x200001cc
 8001340:	40005800 	.word	0x40005800
 8001344:	307075b1 	.word	0x307075b1

08001348 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_IWDG_Init+0x34>)
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <MX_IWDG_Init+0x38>)
 8001350:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_IWDG_Init+0x34>)
 8001354:	2204      	movs	r2, #4
 8001356:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2999;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_IWDG_Init+0x34>)
 800135a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800135e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_IWDG_Init+0x34>)
 8001362:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001366:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_IWDG_Init+0x34>)
 800136a:	f003 fa0a 	bl	8004782 <HAL_IWDG_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001374:	f000 fc3a 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000220 	.word	0x20000220
 8001380:	40003000 	.word	0x40003000

08001384 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <MX_OCTOSPI1_Init+0xa8>)
 800139c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013b0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013e4:	2208      	movs	r2, #8
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 80013ea:	f003 fa29 	bl	8004840 <HAL_OSPI_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80013f4:	f000 fbfa 	bl	8001bec <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001400:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_OCTOSPI1_Init+0xa4>)
 8001410:	f003 fad0 	bl	80049b4 <HAL_OSPIM_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800141a:	f000 fbe7 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000230 	.word	0x20000230
 800142c:	a0001000 	.word	0xa0001000

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <MX_SPI1_Init+0x78>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_SPI1_Init+0x74>)
 800143c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_SPI1_Init+0x74>)
 800144a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800144e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_SPI1_Init+0x74>)
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001462:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001466:	2208      	movs	r2, #8
 8001468:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_SPI1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SPI1_Init+0x74>)
 800147e:	2207      	movs	r2, #7
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SPI1_Init+0x74>)
 800148a:	2208      	movs	r2, #8
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_SPI1_Init+0x74>)
 8001490:	f005 fb80 	bl	8006b94 <HAL_SPI_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800149a:	f000 fba7 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000280 	.word	0x20000280
 80014a8:	40013000 	.word	0x40013000

080014ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_SPI3_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_SPI3_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_SPI3_Init+0x74>)
 80014b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_SPI3_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_SPI3_Init+0x74>)
 80014c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_SPI3_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_SPI3_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_SPI3_Init+0x74>)
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_SPI3_Init+0x74>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_SPI3_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SPI3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_SPI3_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SPI3_Init+0x74>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_SPI3_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_SPI3_Init+0x74>)
 8001506:	2208      	movs	r2, #8
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_SPI3_Init+0x74>)
 800150c:	f005 fb42 	bl	8006b94 <HAL_SPI_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fb69 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002e4 	.word	0x200002e4
 8001524:	40003c00 	.word	0x40003c00

08001528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09a      	sub	sp, #104	; 0x68
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	222c      	movs	r2, #44	; 0x2c
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f007 fc96 	bl	8008e94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <MX_TIM1_Init+0x150>)
 800156a:	4a44      	ldr	r2, [pc, #272]	; (800167c <MX_TIM1_Init+0x154>)
 800156c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <MX_TIM1_Init+0x150>)
 8001570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001574:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b40      	ldr	r3, [pc, #256]	; (8001678 <MX_TIM1_Init+0x150>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800157c:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <MX_TIM1_Init+0x150>)
 800157e:	2263      	movs	r2, #99	; 0x63
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <MX_TIM1_Init+0x150>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001588:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <MX_TIM1_Init+0x150>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <MX_TIM1_Init+0x150>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001594:	4838      	ldr	r0, [pc, #224]	; (8001678 <MX_TIM1_Init+0x150>)
 8001596:	f005 fba0 	bl	8006cda <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015a0:	f000 fb24 	bl	8001bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ae:	4619      	mov	r1, r3
 80015b0:	4831      	ldr	r0, [pc, #196]	; (8001678 <MX_TIM1_Init+0x150>)
 80015b2:	f005 fe65 	bl	8007280 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015bc:	f000 fb16 	bl	8001bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015c0:	482d      	ldr	r0, [pc, #180]	; (8001678 <MX_TIM1_Init+0x150>)
 80015c2:	f005 fbe1 	bl	8006d88 <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015cc:	f000 fb0e 	bl	8001bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	4619      	mov	r1, r3
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <MX_TIM1_Init+0x150>)
 80015e4:	f006 fc00 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015ee:	f000 fafd 	bl	8001bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015f2:	2370      	movs	r3, #112	; 0x70
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 59;
 80015f6:	233b      	movs	r3, #59	; 0x3b
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fe:	2300      	movs	r3, #0
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800160e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001612:	2204      	movs	r2, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <MX_TIM1_Init+0x150>)
 8001618:	f005 fd1e 	bl	8007058 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001622:	f000 fae3 	bl	8001bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM1_Init+0x150>)
 800165c:	f006 fc4c 	bl	8007ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001666:	f000 fac1 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM1_Init+0x150>)
 800166c:	f000 fd5e 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001670:	bf00      	nop
 8001672:	3768      	adds	r7, #104	; 0x68
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000348 	.word	0x20000348
 800167c:	40012c00 	.word	0x40012c00

08001680 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_UART4_Init+0x90>)
 8001686:	4a23      	ldr	r2, [pc, #140]	; (8001714 <MX_UART4_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_UART4_Init+0x90>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <MX_UART4_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_UART4_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_UART4_Init+0x90>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_UART4_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_UART4_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_UART4_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_UART4_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_UART4_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <MX_UART4_Init+0x90>)
 80016ca:	f006 fcb8 	bl	800803e <HAL_UART_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 fa8a 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_UART4_Init+0x90>)
 80016dc:	f007 fadc 	bl	8008c98 <HAL_UARTEx_SetTxFifoThreshold>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016e6:	f000 fa81 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <MX_UART4_Init+0x90>)
 80016ee:	f007 fb11 	bl	8008d14 <HAL_UARTEx_SetRxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016f8:	f000 fa78 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_UART4_Init+0x90>)
 80016fe:	f007 fa92 	bl	8008c26 <HAL_UARTEx_DisableFifoMode>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001708:	f000 fa70 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000394 	.word	0x20000394
 8001714:	40004c00 	.word	0x40004c00

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MX_USART1_UART_Init+0x94>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001762:	f006 fc6c 	bl	800803e <HAL_UART_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 fa3e 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001774:	f007 fa90 	bl	8008c98 <HAL_UARTEx_SetTxFifoThreshold>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 fa35 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001786:	f007 fac5 	bl	8008d14 <HAL_UARTEx_SetRxFifoThreshold>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 fa2c 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001796:	f007 fa46 	bl	8008c26 <HAL_UARTEx_DisableFifoMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 fa24 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000428 	.word	0x20000428
 80017ac:	40013800 	.word	0x40013800

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <MX_USART2_UART_Init+0x98>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <MX_USART2_UART_Init+0x94>)
 80017fc:	f006 fc1f 	bl	800803e <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001806:	f000 f9f1 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_USART2_UART_Init+0x94>)
 800180e:	f007 fa43 	bl	8008c98 <HAL_UARTEx_SetTxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001818:	f000 f9e8 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_USART2_UART_Init+0x94>)
 8001820:	f007 fa78 	bl	8008d14 <HAL_UARTEx_SetRxFifoThreshold>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800182a:	f000 f9df 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART2_UART_Init+0x94>)
 8001830:	f007 f9f9 	bl	8008c26 <HAL_UARTEx_DisableFifoMode>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800183a:	f000 f9d7 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200004bc 	.word	0x200004bc
 8001848:	40004400 	.word	0x40004400

0800184c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <MX_USART3_UART_Init+0x94>)
 8001854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_USART3_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_USART3_UART_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_USART3_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001894:	4811      	ldr	r0, [pc, #68]	; (80018dc <MX_USART3_UART_Init+0x90>)
 8001896:	f006 fbd2 	bl	800803e <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018a0:	f000 f9a4 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_USART3_UART_Init+0x90>)
 80018a8:	f007 f9f6 	bl	8008c98 <HAL_UARTEx_SetTxFifoThreshold>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018b2:	f000 f99b 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <MX_USART3_UART_Init+0x90>)
 80018ba:	f007 fa2b 	bl	8008d14 <HAL_UARTEx_SetRxFifoThreshold>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018c4:	f000 f992 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_USART3_UART_Init+0x90>)
 80018ca:	f007 f9ac 	bl	8008c26 <HAL_UARTEx_DisableFifoMode>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018d4:	f000 f98a 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000550 	.word	0x20000550
 80018e0:	40004800 	.word	0x40004800

080018e4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_DMA_Init+0x50>)
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <MX_DMA_Init+0x50>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6493      	str	r3, [r2, #72]	; 0x48
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_DMA_Init+0x50>)
 8001908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_DMA_Init+0x50>)
 8001914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <MX_DMA_Init+0x50>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6493      	str	r3, [r2, #72]	; 0x48
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_DMA_Init+0x50>)
 8001920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	200b      	movs	r0, #11
 8001930:	f002 f873 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001934:	200b      	movs	r0, #11
 8001936:	f002 f88c 	bl	8003a52 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a95      	ldr	r2, [pc, #596]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b93      	ldr	r3, [pc, #588]	; (8001bb8 <MX_GPIO_Init+0x270>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b90      	ldr	r3, [pc, #576]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a8f      	ldr	r2, [pc, #572]	; (8001bb8 <MX_GPIO_Init+0x270>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b8d      	ldr	r3, [pc, #564]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198e:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a89      	ldr	r2, [pc, #548]	; (8001bb8 <MX_GPIO_Init+0x270>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <MX_GPIO_Init+0x270>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a83      	ldr	r2, [pc, #524]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a7d      	ldr	r2, [pc, #500]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a77      	ldr	r2, [pc, #476]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <MX_GPIO_Init+0x270>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f240 1105 	movw	r1, #261	; 0x105
 80019f4:	4871      	ldr	r0, [pc, #452]	; (8001bbc <MX_GPIO_Init+0x274>)
 80019f6:	f002 fd57 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80019fa:	2200      	movs	r2, #0
 80019fc:	f248 111c 	movw	r1, #33052	; 0x811c
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f002 fd50 	bl	80044a8 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f24b 0134 	movw	r1, #45108	; 0xb034
 8001a0e:	486c      	ldr	r0, [pc, #432]	; (8001bc0 <MX_GPIO_Init+0x278>)
 8001a10:	f002 fd4a 	bl	80044a8 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f242 0183 	movw	r1, #8323	; 0x2083
 8001a1a:	486a      	ldr	r0, [pc, #424]	; (8001bc4 <MX_GPIO_Init+0x27c>)
 8001a1c:	f002 fd44 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001a26:	4868      	ldr	r0, [pc, #416]	; (8001bc8 <MX_GPIO_Init+0x280>)
 8001a28:	f002 fd3e 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001a2c:	f240 1305 	movw	r3, #261	; 0x105
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	485d      	ldr	r0, [pc, #372]	; (8001bbc <MX_GPIO_Init+0x274>)
 8001a46:	f002 fb9d 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001a4a:	237a      	movs	r3, #122	; 0x7a
 8001a4c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4857      	ldr	r0, [pc, #348]	; (8001bbc <MX_GPIO_Init+0x274>)
 8001a60:	f002 fb90 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a64:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4853      	ldr	r0, [pc, #332]	; (8001bc8 <MX_GPIO_Init+0x280>)
 8001a7c:	f002 fb82 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001a80:	f248 131c 	movw	r3, #33052	; 0x811c
 8001a84:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f002 fb72 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4842      	ldr	r0, [pc, #264]	; (8001bc0 <MX_GPIO_Init+0x278>)
 8001ab6:	f002 fb65 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483a      	ldr	r0, [pc, #232]	; (8001bc0 <MX_GPIO_Init+0x278>)
 8001ad6:	f002 fb55 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001ada:	f24b 0334 	movw	r3, #45108	; 0xb034
 8001ade:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <MX_GPIO_Init+0x278>)
 8001af4:	f002 fb46 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001af8:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001afc:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <MX_GPIO_Init+0x27c>)
 8001b10:	f002 fb38 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001b14:	f242 0383 	movw	r3, #8323	; 0x2083
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4825      	ldr	r0, [pc, #148]	; (8001bc4 <MX_GPIO_Init+0x27c>)
 8001b2e:	f002 fb29 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <MX_GPIO_Init+0x280>)
 8001b4c:	f002 fb1a 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f002 fb0c 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b7e:	230a      	movs	r3, #10
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f002 fafa 	bl	8004184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2017      	movs	r0, #23
 8001b96:	f001 ff40 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9a:	2017      	movs	r0, #23
 8001b9c:	f001 ff59 	bl	8003a52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2028      	movs	r0, #40	; 0x28
 8001ba6:	f001 ff38 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001baa:	2028      	movs	r0, #40	; 0x28
 8001bac:	f001 ff51 	bl	8003a52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb0:	bf00      	nop
 8001bb2:	3730      	adds	r7, #48	; 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48001000 	.word	0x48001000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000c00 	.word	0x48000c00
 8001bc8:	48000800 	.word	0x48000800

08001bcc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  ADCComplete = 1;
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200005e8 	.word	0x200005e8

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <Error_Handler+0x8>
	...

08001bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x44>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x44>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_MspInit+0x44>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_MspInit+0x44>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_ADC_MspInit+0xc8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d14e      	bne.n	8001d00 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_ADC_MspInit+0xcc>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001c92:	233f      	movs	r3, #63	; 0x3f
 8001c94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c96:	230b      	movs	r3, #11
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481a      	ldr	r0, [pc, #104]	; (8001d10 <HAL_ADC_MspInit+0xd0>)
 8001ca6:	f002 fa6d 	bl	8004184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cac:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce4:	480b      	ldr	r0, [pc, #44]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001ce6:	f001 ffdb 	bl	8003ca0 <HAL_DMA_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8001cf0:	f7ff ff7c 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cf8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	50040000 	.word	0x50040000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000800 	.word	0x48000800
 8001d14:	200000e0 	.word	0x200000e0
 8001d18:	40020008 	.word	0x40020008

08001d1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0ae      	sub	sp, #184	; 0xb8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	2294      	movs	r2, #148	; 0x94
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 f8a9 	bl	8008e94 <memset>
  if(DFSDM1_Init == 0)
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d142      	bne.n	8001dd0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f9f2 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d66:	f7ff ff41 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6613      	str	r3, [r2, #96]	; 0x60
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d9a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001db4:	2306      	movs	r3, #6
 8001db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001dc2:	f002 f9df 	bl	8004184 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a02      	ldr	r2, [pc, #8]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001dce:	6013      	str	r3, [r2, #0]
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	37b8      	adds	r7, #184	; 0xb8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200005ec 	.word	0x200005ec
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48001000 	.word	0x48001000

08001de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0b0      	sub	sp, #192	; 0xc0
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0318 	add.w	r3, r7, #24
 8001e00:	2294      	movs	r2, #148	; 0x94
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f007 f845 	bl	8008e94 <memset>
  if(hi2c->Instance==I2C1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_I2C_MspInit+0x134>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d13c      	bne.n	8001e8e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e14:	2340      	movs	r3, #64	; 0x40
 8001e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 f98f 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e2c:	f7ff fede 	bl	8001bec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	4a39      	ldr	r2, [pc, #228]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3c:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e62:	2304      	movs	r3, #4
 8001e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482c      	ldr	r0, [pc, #176]	; (8001f20 <HAL_I2C_MspInit+0x13c>)
 8001e70:	f002 f988 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e8c:	e040      	b.n	8001f10 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_I2C_MspInit+0x140>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d13b      	bne.n	8001f10 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 f94d 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001eb0:	f7ff fe9c 	bl	8001bec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ecc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed4:	2312      	movs	r3, #18
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_I2C_MspInit+0x13c>)
 8001ef4:	f002 f946 	bl	8004184 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001efe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_I2C_MspInit+0x138>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
}
 8001f10:	bf00      	nop
 8001f12:	37c0      	adds	r7, #192	; 0xc0
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	40005800 	.word	0x40005800

08001f28 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b0      	sub	sp, #192	; 0xc0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	2294      	movs	r2, #148	; 0x94
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f006 ffa3 	bl	8008e94 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_OSPI_MspInit+0xcc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d149      	bne.n	8001fec <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f8eb 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001f74:	f7ff fe3a 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f84:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f94:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6513      	str	r3, [r2, #80]	; 0x50
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_OSPI_MspInit+0xd0>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001fc0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_OSPI_MspInit+0xd4>)
 8001fe8:	f002 f8cc 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	37c0      	adds	r7, #192	; 0xc0
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	a0001000 	.word	0xa0001000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	48001000 	.word	0x48001000

08002000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_SPI_MspInit+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d129      	bne.n	8002076 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202c:	6613      	str	r3, [r2, #96]	; 0x60
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002052:	23e0      	movs	r3, #224	; 0xe0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002062:	2305      	movs	r3, #5
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f002 f888 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002074:	e02d      	b.n	80020d2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_SPI_MspInit+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d128      	bne.n	80020d2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 8002086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_SPI_MspInit+0xe0>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80020b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c2:	2306      	movs	r3, #6
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_SPI_MspInit+0xe8>)
 80020ce:	f002 f859 	bl	8004184 <HAL_GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40013000 	.word	0x40013000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40003c00 	.word	0x40003c00
 80020e8:	48000800 	.word	0x48000800

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_TIM_Base_MspInit+0x38>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10b      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 8002104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002108:	6613      	str	r3, [r2, #96]	; 0x60
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_TIM_MspPostInit+0x64>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11c      	bne.n	8002188 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002184:	f001 fffe 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40021000 	.word	0x40021000
 8002198:	48000400 	.word	0x48000400

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0b4      	sub	sp, #208	; 0xd0
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b8:	2294      	movs	r2, #148	; 0x94
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 fe69 	bl	8008e94 <memset>
  if(huart->Instance==UART4)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a83      	ldr	r2, [pc, #524]	; (80023d4 <HAL_UART_MspInit+0x238>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d13c      	bne.n	8002246 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021cc:	2308      	movs	r3, #8
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 ffb3 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e4:	f7ff fd02 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a7a      	ldr	r2, [pc, #488]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80021ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b78      	ldr	r3, [pc, #480]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	4a74      	ldr	r2, [pc, #464]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220c:	4b72      	ldr	r3, [pc, #456]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002218:	2303      	movs	r3, #3
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002230:	2308      	movs	r3, #8
 8002232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002240:	f001 ffa0 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002244:	e0c2      	b.n	80023cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a64      	ldr	r2, [pc, #400]	; (80023dc <HAL_UART_MspInit+0x240>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d13b      	bne.n	80022c8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002250:	2301      	movs	r3, #1
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002254:	2300      	movs	r3, #0
 8002256:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225c:	4618      	mov	r0, r3
 800225e:	f003 ff71 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002268:	f7ff fcc0 	bl	8001bec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800226c:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	4a59      	ldr	r2, [pc, #356]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002276:	6613      	str	r3, [r2, #96]	; 0x60
 8002278:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	4b54      	ldr	r3, [pc, #336]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	4a53      	ldr	r2, [pc, #332]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800229c:	23c0      	movs	r3, #192	; 0xc0
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b4:	2307      	movs	r3, #7
 80022b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022be:	4619      	mov	r1, r3
 80022c0:	4847      	ldr	r0, [pc, #284]	; (80023e0 <HAL_UART_MspInit+0x244>)
 80022c2:	f001 ff5f 	bl	8004184 <HAL_GPIO_Init>
}
 80022c6:	e081      	b.n	80023cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <HAL_UART_MspInit+0x248>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d13b      	bne.n	800234a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 ff30 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_UART_MspInit+0x152>
      Error_Handler();
 80022ea:	f7ff fc7f 	bl	8001bec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4a39      	ldr	r2, [pc, #228]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800231e:	2378      	movs	r3, #120	; 0x78
 8002320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002336:	2307      	movs	r3, #7
 8002338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002340:	4619      	mov	r1, r3
 8002342:	4829      	ldr	r0, [pc, #164]	; (80023e8 <HAL_UART_MspInit+0x24c>)
 8002344:	f001 ff1e 	bl	8004184 <HAL_GPIO_Init>
}
 8002348:	e040      	b.n	80023cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	; (80023ec <HAL_UART_MspInit+0x250>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d13b      	bne.n	80023cc <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002354:	2304      	movs	r3, #4
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002358:	2300      	movs	r3, #0
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002360:	4618      	mov	r0, r3
 8002362:	f003 feef 	bl	8006144 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800236c:	f7ff fc3e 	bl	8001bec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_UART_MspInit+0x23c>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80023a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ba:	2307      	movs	r3, #7
 80023bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023c4:	4619      	mov	r1, r3
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <HAL_UART_MspInit+0x24c>)
 80023c8:	f001 fedc 	bl	8004184 <HAL_GPIO_Init>
}
 80023cc:	bf00      	nop
 80023ce:	37d0      	adds	r7, #208	; 0xd0
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40004c00 	.word	0x40004c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40013800 	.word	0x40013800
 80023e0:	48000400 	.word	0x48000400
 80023e4:	40004400 	.word	0x40004400
 80023e8:	48000c00 	.word	0x48000c00
 80023ec:	40004800 	.word	0x40004800

080023f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <NMI_Handler+0x4>

080023f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <MemManage_Handler+0x4>

08002402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243c:	f000 f900 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <DMA1_Channel1_IRQHandler+0x10>)
 800244a:	f001 fd4c 	bl	8003ee6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200000e0 	.word	0x200000e0

08002458 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800245c:	2020      	movs	r0, #32
 800245e:	f002 f83b 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002462:	2040      	movs	r0, #64	; 0x40
 8002464:	f002 f838 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002468:	2080      	movs	r0, #128	; 0x80
 800246a:	f002 f835 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800246e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002472:	f002 f831 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}

0800247a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800247e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002482:	f002 f829 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002486:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800248a:	f002 f825 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800248e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002492:	f002 f821 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002496:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800249a:	f002 f81d 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800249e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a2:	f002 f819 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80024a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024aa:	f002 f815 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f006 fcde 	bl	8008ea4 <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200a0000 	.word	0x200a0000
 8002514:	00000400 	.word	0x00000400
 8002518:	200005f0 	.word	0x200005f0
 800251c:	20000768 	.word	0x20000768

08002520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <SystemInit+0x20>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <SystemInit+0x20>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002548:	f7ff ffea 	bl	8002520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <LoopForever+0x6>)
  ldr r1, =_edata
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <LoopForever+0xe>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <LoopForever+0x16>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002572:	f006 fc9d 	bl	8008eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002576:	f7fe fc5f 	bl	8000e38 <main>

0800257a <LoopForever>:

LoopForever:
    b LoopForever
 800257a:	e7fe      	b.n	800257a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800257c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002588:	08009930 	.word	0x08009930
  ldr r2, =_sbss
 800258c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002590:	20000764 	.word	0x20000764

08002594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC1_IRQHandler>

08002596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f001 fa2f 	bl	8003a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 f80e 	bl	80025c8 <HAL_InitTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	e001      	b.n	80025bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025b8:	f7ff fb1e 	bl	8001bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025bc:	79fb      	ldrb	r3, [r7, #7]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_InitTick+0x6c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d023      	beq.n	8002624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_InitTick+0x70>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_InitTick+0x6c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 fa3b 	bl	8003a6e <HAL_SYSTICK_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d809      	bhi.n	8002618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f001 fa05 	bl	8003a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_InitTick+0x74>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e007      	b.n	8002628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e004      	b.n	8002628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e001      	b.n	8002628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008
 8002664:	200005f4 	.word	0x200005f4

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200005f4 	.word	0x200005f4

08002680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff ffee 	bl	8002668 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d005      	beq.n	80026a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_Delay+0x44>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026a6:	bf00      	nop
 80026a8:	f7ff ffde 	bl	8002668 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d8f7      	bhi.n	80026a8 <HAL_Delay+0x28>
  {
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000008 	.word	0x20000008

080026c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3360      	adds	r3, #96	; 0x60
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <LL_ADC_SetOffset+0x44>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	4313      	orrs	r3, r2
 8002760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	03fff000 	.word	0x03fff000

08002778 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3360      	adds	r3, #96	; 0x60
 8002786:	461a      	mov	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3360      	adds	r3, #96	; 0x60
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	615a      	str	r2, [r3, #20]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002826:	b480      	push	{r7}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3330      	adds	r3, #48	; 0x30
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	4413      	add	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	211f      	movs	r1, #31
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 011f 	and.w	r1, r3, #31
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	431a      	orrs	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3314      	adds	r3, #20
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0e5b      	lsrs	r3, r3, #25
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0d1b      	lsrs	r3, r3, #20
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2107      	movs	r1, #7
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	0d1b      	lsrs	r3, r3, #20
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	431a      	orrs	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0318 	and.w	r3, r3, #24
 80028f6:	4908      	ldr	r1, [pc, #32]	; (8002918 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028f8:	40d9      	lsrs	r1, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	400b      	ands	r3, r1
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	431a      	orrs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	0007ffff 	.word	0x0007ffff

0800291c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800292c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6093      	str	r3, [r2, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002954:	d101      	bne.n	800295a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a4:	d101      	bne.n	80029aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <LL_ADC_IsEnabled+0x18>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <LL_ADC_IsEnabled+0x1a>
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d101      	bne.n	8002a46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e129      	b.n	8002cea <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff f8cb 	bl	8001c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff3f 	bl	8002940 <LL_ADC_IsDeepPowerDownEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff25 	bl	800291c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff5a 	bl	8002990 <LL_ADC_IsInternalRegulatorEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff3e 	bl	8002968 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_ADC_Init+0x278>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	4a81      	ldr	r2, [pc, #516]	; (8002cf8 <HAL_ADC_Init+0x27c>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b00:	e002      	b.n	8002b08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f9      	bne.n	8002b02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff3c 	bl	8002990 <LL_ADC_IsInternalRegulatorEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff75 	bl	8002a2e <LL_ADC_REG_IsConversionOngoing>
 8002b44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80c2 	bne.w	8002cd8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80be 	bne.w	8002cd8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b64:	f043 0202 	orr.w	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff35 	bl	80029e0 <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b7c:	485f      	ldr	r0, [pc, #380]	; (8002cfc <HAL_ADC_Init+0x280>)
 8002b7e:	f7ff ff2f 	bl	80029e0 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	485c      	ldr	r0, [pc, #368]	; (8002d00 <HAL_ADC_Init+0x284>)
 8002b90:	f7ff fd9a 	bl	80026c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e5b      	ldrb	r3, [r3, #25]
 8002b98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ba4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002baa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d106      	bne.n	8002bd0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	045b      	lsls	r3, r3, #17
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <HAL_ADC_Init+0x288>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff25 	bl	8002a54 <LL_ADC_INJ_IsConversionOngoing>
 8002c0a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d140      	bne.n	8002c94 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d13d      	bne.n	8002c94 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c22:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3a:	f023 0306 	bic.w	r3, r3, #6
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d118      	bne.n	8002c84 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c74:	430a      	orrs	r2, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	e007      	b.n	8002c94 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f023 010f 	bic.w	r1, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb4:	e007      	b.n	8002cc6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 020f 	bic.w	r2, r2, #15
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cd6:	e007      	b.n	8002ce8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	053e2d63 	.word	0x053e2d63
 8002cfc:	50040000 	.word	0x50040000
 8002d00:	50040300 	.word	0x50040300
 8002d04:	fff0c007 	.word	0xfff0c007

08002d08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe88 	bl	8002a2e <LL_ADC_REG_IsConversionOngoing>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d167      	bne.n	8002df4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x2a>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e063      	b.n	8002dfa <HAL_ADC_Start_DMA+0xf2>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fc78 	bl	8003630 <ADC_Enable>
 8002d40:	4603      	mov	r3, r0
 8002d42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d14f      	bne.n	8002dea <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f023 0206 	bic.w	r2, r3, #6
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d76:	e002      	b.n	8002d7e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <HAL_ADC_Start_DMA+0xfc>)
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_ADC_Start_DMA+0x100>)
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_ADC_Start_DMA+0x104>)
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	221c      	movs	r2, #28
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0210 	orr.w	r2, r2, #16
 8002db4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3340      	adds	r3, #64	; 0x40
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f001 f80b 	bl	8003df0 <HAL_DMA_Start_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fe0f 	bl	8002a06 <LL_ADC_REG_StartConversion>
 8002de8:	e006      	b.n	8002df8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002df2:	e001      	b.n	8002df8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	0800373d 	.word	0x0800373d
 8002e08:	08003815 	.word	0x08003815
 8002e0c:	08003831 	.word	0x08003831

08002e10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0b6      	sub	sp, #216	; 0xd8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x22>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e3d5      	b.n	8003606 <HAL_ADC_ConfigChannel+0x7ce>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fde1 	bl	8002a2e <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 83ba 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d824      	bhi.n	8002ece <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	3b02      	subs	r3, #2
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d81b      	bhi.n	8002ec6 <HAL_ADC_ConfigChannel+0x8e>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_ADC_ConfigChannel+0x5c>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002ead 	.word	0x08002ead
 8002e9c:	08002eb5 	.word	0x08002eb5
 8002ea0:	08002ebd 	.word	0x08002ebd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eaa:	e010      	b.n	8002ece <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002eac:	2312      	movs	r3, #18
 8002eae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eb2:	e00c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002eb4:	2318      	movs	r3, #24
 8002eb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eba:	e008      	b.n	8002ece <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ecc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002edc:	f7ff fca3 	bl	8002826 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fda2 	bl	8002a2e <LL_ADC_REG_IsConversionOngoing>
 8002eea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fdae 	bl	8002a54 <LL_ADC_INJ_IsConversionOngoing>
 8002ef8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 81bf 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 81ba 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f18:	d10f      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7ff fcaa 	bl	800287e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fc51 	bl	80027da <LL_ADC_SetSamplingTimeCommonConfig>
 8002f38:	e00e      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7ff fc99 	bl	800287e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fc41 	bl	80027da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	08db      	lsrs	r3, r3, #3
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00a      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6919      	ldr	r1, [r3, #16]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8a:	f7ff fbd1 	bl	8002730 <LL_ADC_SetOffset>
 8002f8e:	e179      	b.n	8003284 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fbee 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x184>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fbe3 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	e01e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x1c2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fbd8 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002fee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x1da>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	e018      	b.n	8003044 <HAL_ADC_ConfigChannel+0x20c>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800302a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800302e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e004      	b.n	8003044 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800303a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fba7 	bl	80027a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb8b 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x24a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fb80 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	e01e      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x288>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fb75 	bl	8002778 <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80030a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80030a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80030b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x2a0>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	e018      	b.n	800310a <HAL_ADC_ConfigChannel+0x2d2>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80030ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e004      	b.n	800310a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fb44 	bl	80027a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fb28 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x310>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2102      	movs	r1, #2
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fb1d 	bl	8002778 <LL_ADC_GetOffsetChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	e01e      	b.n	8003186 <HAL_ADC_ConfigChannel+0x34e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fb12 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800316e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_ConfigChannel+0x366>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	e014      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x390>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80031ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80031b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e004      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80031be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fae5 	bl	80027a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2103      	movs	r1, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fac9 	bl	8002778 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x3ce>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2103      	movs	r1, #3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fabe 	bl	8002778 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	e017      	b.n	8003236 <HAL_ADC_ConfigChannel+0x3fe>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2103      	movs	r1, #3
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fab3 	bl	8002778 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_ADC_ConfigChannel+0x416>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	e011      	b.n	8003272 <HAL_ADC_ConfigChannel+0x43a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800325c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800325e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800326a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003272:	429a      	cmp	r2, r3
 8003274:	d106      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	2103      	movs	r1, #3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fa90 	bl	80027a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fba9 	bl	80029e0 <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 813f 	bne.w	8003514 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7ff fb16 	bl	80028d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a8e      	ldr	r2, [pc, #568]	; (80034e8 <HAL_ADC_ConfigChannel+0x6b0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f040 8130 	bne.w	8003514 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x4a4>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e019      	b.n	8003310 <HAL_ADC_ConfigChannel+0x4d8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80032f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2b09      	cmp	r3, #9
 8003308:	bf94      	ite	ls
 800330a:	2301      	movls	r3, #1
 800330c:	2300      	movhi	r3, #0
 800330e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003310:	2b00      	cmp	r3, #0
 8003312:	d079      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x4f8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	3301      	adds	r3, #1
 8003328:	069b      	lsls	r3, r3, #26
 800332a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800332e:	e015      	b.n	800335c <HAL_ADC_ConfigChannel+0x524>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e003      	b.n	8003354 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_ADC_ConfigChannel+0x544>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	e017      	b.n	80033ac <HAL_ADC_ConfigChannel+0x574>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800338a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	ea42 0103 	orr.w	r1, r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x59a>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	3301      	adds	r3, #1
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	051b      	lsls	r3, r3, #20
 80033d0:	e018      	b.n	8003404 <HAL_ADC_ConfigChannel+0x5cc>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	430b      	orrs	r3, r1
 8003406:	e080      	b.n	800350a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x5ec>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003422:	e015      	b.n	8003450 <HAL_ADC_ConfigChannel+0x618>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x638>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	e017      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x668>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	61bb      	str	r3, [r7, #24]
  return result;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x694>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	3b1e      	subs	r3, #30
 80034c4:	051b      	lsls	r3, r3, #20
 80034c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ca:	e01d      	b.n	8003508 <HAL_ADC_ConfigChannel+0x6d0>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	60fb      	str	r3, [r7, #12]
  return result;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e005      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x6bc>
 80034e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 021f 	and.w	r2, r3, #31
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	3b1e      	subs	r3, #30
 8003502:	051b      	lsls	r3, r3, #20
 8003504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003508:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350e:	4619      	mov	r1, r3
 8003510:	f7ff f9b5 	bl	800287e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_ADC_ConfigChannel+0x7d8>)
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d06c      	beq.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003520:	483c      	ldr	r0, [pc, #240]	; (8003614 <HAL_ADC_ConfigChannel+0x7dc>)
 8003522:	f7ff f8f7 	bl	8002714 <LL_ADC_GetCommonPathInternalCh>
 8003526:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <HAL_ADC_ConfigChannel+0x7e0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d127      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d121      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a35      	ldr	r2, [pc, #212]	; (800361c <HAL_ADC_ConfigChannel+0x7e4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d157      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800354e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003552:	4619      	mov	r1, r3
 8003554:	482f      	ldr	r0, [pc, #188]	; (8003614 <HAL_ADC_ConfigChannel+0x7dc>)
 8003556:	f7ff f8ca 	bl	80026ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_ADC_ConfigChannel+0x7e8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	4a30      	ldr	r2, [pc, #192]	; (8003624 <HAL_ADC_ConfigChannel+0x7ec>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3b01      	subs	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003582:	e03a      	b.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_ADC_ConfigChannel+0x7f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800358e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_ADC_ConfigChannel+0x7e4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12a      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ac:	4619      	mov	r1, r3
 80035ae:	4819      	ldr	r0, [pc, #100]	; (8003614 <HAL_ADC_ConfigChannel+0x7dc>)
 80035b0:	f7ff f89d 	bl	80026ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	e021      	b.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_ADC_ConfigChannel+0x7f4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d11c      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <HAL_ADC_ConfigChannel+0x7e4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d111      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035de:	4619      	mov	r1, r3
 80035e0:	480c      	ldr	r0, [pc, #48]	; (8003614 <HAL_ADC_ConfigChannel+0x7dc>)
 80035e2:	f7ff f884 	bl	80026ee <LL_ADC_SetCommonPathInternalCh>
 80035e6:	e008      	b.n	80035fa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003602:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003606:	4618      	mov	r0, r3
 8003608:	37d8      	adds	r7, #216	; 0xd8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	80080000 	.word	0x80080000
 8003614:	50040300 	.word	0x50040300
 8003618:	c7520000 	.word	0xc7520000
 800361c:	50040000 	.word	0x50040000
 8003620:	20000000 	.word	0x20000000
 8003624:	053e2d63 	.word	0x053e2d63
 8003628:	cb840000 	.word	0xcb840000
 800362c:	80000001 	.word	0x80000001

08003630 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f9cd 	bl	80029e0 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d169      	bne.n	8003720 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <ADC_Enable+0xfc>)
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e055      	b.n	8003722 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f99c 	bl	80029b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003680:	482b      	ldr	r0, [pc, #172]	; (8003730 <ADC_Enable+0x100>)
 8003682:	f7ff f847 	bl	8002714 <LL_ADC_GetCommonPathInternalCh>
 8003686:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <ADC_Enable+0x104>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <ADC_Enable+0x108>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036aa:	e002      	b.n	80036b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036b8:	f7fe ffd6 	bl	8002668 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036be:	e028      	b.n	8003712 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f98b 	bl	80029e0 <LL_ADC_IsEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f96f 	bl	80029b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036da:	f7fe ffc5 	bl	8002668 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d914      	bls.n	8003712 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e007      	b.n	8003722 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d1cf      	bne.n	80036c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	8000003f 	.word	0x8000003f
 8003730:	50040300 	.word	0x50040300
 8003734:	20000000 	.word	0x20000000
 8003738:	053e2d63 	.word	0x053e2d63

0800373c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003752:	2b00      	cmp	r3, #0
 8003754:	d14b      	bne.n	80037ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f843 	bl	8002800 <LL_ADC_REG_IsTriggerSourceSWStart>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d12b      	bne.n	80037e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11f      	bne.n	80037e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	659a      	str	r2, [r3, #88]	; 0x58
 80037b2:	e018      	b.n	80037e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d111      	bne.n	80037e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7fe f9f0 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037ec:	e00e      	b.n	800380c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fb12 	bl	8002e24 <HAL_ADC_ErrorCallback>
}
 8003800:	e004      	b.n	800380c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff faf4 	bl	8002e10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fae4 	bl	8002e24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800388c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <__NVIC_EnableIRQ+0x38>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d0:	d301      	bcc.n	80039d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <SysTick_Config+0x40>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039de:	210f      	movs	r1, #15
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	f7ff ff8e 	bl	8003904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <SysTick_Config+0x40>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <SysTick_Config+0x40>)
 80039f0:	2207      	movs	r2, #7
 80039f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000e010 	.word	0xe000e010

08003a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff29 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a2c:	f7ff ff3e 	bl	80038ac <__NVIC_GetPriorityGrouping>
 8003a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f7ff ff8e 	bl	8003958 <NVIC_EncodePriority>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff5d 	bl	8003904 <__NVIC_SetPriority>
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff31 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffa2 	bl	80039c0 <SysTick_Config>
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0ac      	b.n	8003bf4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f8b2 	bl	8003c08 <DFSDM_GetChannelFromInstance>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a55      	ldr	r2, [pc, #340]	; (8003bfc <HAL_DFSDM_ChannelInit+0x174>)
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e09f      	b.n	8003bf4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fe f931 	bl	8001d1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003aba:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <HAL_DFSDM_ChannelInit+0x178>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <HAL_DFSDM_ChannelInit+0x178>)
 8003ac2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003ac4:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <HAL_DFSDM_ChannelInit+0x178>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d125      	bne.n	8003b18 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003acc:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ad2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ad6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4948      	ldr	r1, [pc, #288]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a46      	ldr	r2, [pc, #280]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003af0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	791b      	ldrb	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003afa:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	493f      	ldr	r1, [pc, #252]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b16:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b26:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b36:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b3c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 020f 	bic.w	r2, r2, #15
 8003b54:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b7c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 0207 	and.w	r2, r2, #7
 8003ba8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f810 	bl	8003c08 <DFSDM_GetChannelFromInstance>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_DFSDM_ChannelInit+0x174>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200005fc 	.word	0x200005fc
 8003c00:	200005f8 	.word	0x200005f8
 8003c04:	40016000 	.word	0x40016000

08003c08 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <DFSDM_GetChannelFromInstance+0x7c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d102      	bne.n	8003c1e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e02b      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <DFSDM_GetChannelFromInstance+0x80>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d102      	bne.n	8003c2c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e024      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <DFSDM_GetChannelFromInstance+0x84>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d102      	bne.n	8003c3a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003c34:	2302      	movs	r3, #2
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e01d      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <DFSDM_GetChannelFromInstance+0x88>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d102      	bne.n	8003c48 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003c42:	2304      	movs	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e016      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <DFSDM_GetChannelFromInstance+0x8c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d102      	bne.n	8003c56 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003c50:	2305      	movs	r3, #5
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e00f      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <DFSDM_GetChannelFromInstance+0x90>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d102      	bne.n	8003c64 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003c5e:	2306      	movs	r3, #6
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e008      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <DFSDM_GetChannelFromInstance+0x94>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003c6c:	2307      	movs	r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e001      	b.n	8003c76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003c72:	2303      	movs	r3, #3
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40016000 	.word	0x40016000
 8003c88:	40016020 	.word	0x40016020
 8003c8c:	40016040 	.word	0x40016040
 8003c90:	40016080 	.word	0x40016080
 8003c94:	400160a0 	.word	0x400160a0
 8003c98:	400160c0 	.word	0x400160c0
 8003c9c:	400160e0 	.word	0x400160e0

08003ca0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e08d      	b.n	8003dce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_DMA_Init+0x138>)
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d80f      	bhi.n	8003cde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_DMA_Init+0x13c>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a45      	ldr	r2, [pc, #276]	; (8003de0 <HAL_DMA_Init+0x140>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	009a      	lsls	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a42      	ldr	r2, [pc, #264]	; (8003de4 <HAL_DMA_Init+0x144>)
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
 8003cdc:	e00e      	b.n	8003cfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_DMA_Init+0x148>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a3d      	ldr	r2, [pc, #244]	; (8003de0 <HAL_DMA_Init+0x140>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	009a      	lsls	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <HAL_DMA_Init+0x14c>)
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9b6 	bl	80040c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d5c:	d102      	bne.n	8003d64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <HAL_DMA_Init+0x104>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d80c      	bhi.n	8003da4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9d6 	bl	800413c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	e008      	b.n	8003db6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020407 	.word	0x40020407
 8003ddc:	bffdfff8 	.word	0xbffdfff8
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	40020000 	.word	0x40020000
 8003de8:	bffdfbf8 	.word	0xbffdfbf8
 8003dec:	40020400 	.word	0x40020400

08003df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_DMA_Start_IT+0x20>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e066      	b.n	8003ede <HAL_DMA_Start_IT+0xee>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d155      	bne.n	8003ed0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f8fb 	bl	8004044 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 020e 	orr.w	r2, r2, #14
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e00f      	b.n	8003e88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 020a 	orr.w	r2, r2, #10
 8003e86:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e005      	b.n	8003edc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 031c 	and.w	r3, r3, #28
 8003f06:	2204      	movs	r2, #4
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d026      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x7a>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0204 	bic.w	r2, r2, #4
 8003f38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f003 021c 	and.w	r2, r3, #28
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2104      	movs	r1, #4
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d071      	beq.n	800403a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f5e:	e06c      	b.n	800403a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f003 031c 	and.w	r3, r3, #28
 8003f68:	2202      	movs	r2, #2
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xec>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d029      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 020a 	bic.w	r2, r2, #10
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f003 021c 	and.w	r2, r3, #28
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d038      	beq.n	800403a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fd0:	e033      	b.n	800403a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f003 031c 	and.w	r3, r3, #28
 8003fda:	2208      	movs	r2, #8
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02a      	beq.n	800403c <HAL_DMA_IRQHandler+0x156>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d025      	beq.n	800403c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 020e 	bic.w	r2, r2, #14
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	f003 021c 	and.w	r2, r3, #28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f202 	lsl.w	r2, r1, r2
 8004012:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800403a:	bf00      	nop
 800403c:	bf00      	nop
}
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800405a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800406c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f003 021c 	and.w	r2, r3, #28
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f202 	lsl.w	r2, r1, r2
 8004080:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b10      	cmp	r3, #16
 8004090:	d108      	bne.n	80040a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040a2:	e007      	b.n	80040b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d80a      	bhi.n	80040ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6493      	str	r3, [r2, #72]	; 0x48
 80040e8:	e007      	b.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	009a      	lsls	r2, r3, #2
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040f4:	4413      	add	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3b08      	subs	r3, #8
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40020407 	.word	0x40020407
 8004130:	4002081c 	.word	0x4002081c
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020880 	.word	0x40020880

0800413c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800415e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2201      	movs	r2, #1
 800416a:	409a      	lsls	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	1000823f 	.word	0x1000823f
 8004180:	40020940 	.word	0x40020940

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004192:	e166      	b.n	8004462 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8158 	beq.w	800445c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d005      	beq.n	80041c4 <HAL_GPIO_Init+0x40>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d130      	bne.n	8004226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041fa:	2201      	movs	r2, #1
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 0201 	and.w	r2, r3, #1
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b03      	cmp	r3, #3
 8004230:	d017      	beq.n	8004262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d123      	bne.n	80042b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	08da      	lsrs	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3208      	adds	r2, #8
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0203 	and.w	r2, r3, #3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80b2 	beq.w	800445c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_GPIO_Init+0x2fc>)
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	4a60      	ldr	r2, [pc, #384]	; (8004480 <HAL_GPIO_Init+0x2fc>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6613      	str	r3, [r2, #96]	; 0x60
 8004304:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <HAL_GPIO_Init+0x2fc>)
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004310:	4a5c      	ldr	r2, [pc, #368]	; (8004484 <HAL_GPIO_Init+0x300>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800433a:	d02b      	beq.n	8004394 <HAL_GPIO_Init+0x210>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_GPIO_Init+0x304>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d025      	beq.n	8004390 <HAL_GPIO_Init+0x20c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a51      	ldr	r2, [pc, #324]	; (800448c <HAL_GPIO_Init+0x308>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01f      	beq.n	800438c <HAL_GPIO_Init+0x208>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a50      	ldr	r2, [pc, #320]	; (8004490 <HAL_GPIO_Init+0x30c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d019      	beq.n	8004388 <HAL_GPIO_Init+0x204>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a4f      	ldr	r2, [pc, #316]	; (8004494 <HAL_GPIO_Init+0x310>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_GPIO_Init+0x200>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4e      	ldr	r2, [pc, #312]	; (8004498 <HAL_GPIO_Init+0x314>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00d      	beq.n	8004380 <HAL_GPIO_Init+0x1fc>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4d      	ldr	r2, [pc, #308]	; (800449c <HAL_GPIO_Init+0x318>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <HAL_GPIO_Init+0x1f8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4c      	ldr	r2, [pc, #304]	; (80044a0 <HAL_GPIO_Init+0x31c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_GPIO_Init+0x1f4>
 8004374:	2307      	movs	r3, #7
 8004376:	e00e      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004378:	2308      	movs	r3, #8
 800437a:	e00c      	b.n	8004396 <HAL_GPIO_Init+0x212>
 800437c:	2306      	movs	r3, #6
 800437e:	e00a      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004380:	2305      	movs	r3, #5
 8004382:	e008      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004384:	2304      	movs	r3, #4
 8004386:	e006      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004388:	2303      	movs	r3, #3
 800438a:	e004      	b.n	8004396 <HAL_GPIO_Init+0x212>
 800438c:	2302      	movs	r3, #2
 800438e:	e002      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_GPIO_Init+0x212>
 8004394:	2300      	movs	r3, #0
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	f002 0203 	and.w	r2, r2, #3
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	4093      	lsls	r3, r2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043a6:	4937      	ldr	r1, [pc, #220]	; (8004484 <HAL_GPIO_Init+0x300>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043b4:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_GPIO_Init+0x320>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	43db      	mvns	r3, r3
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043d8:	4a32      	ldr	r2, [pc, #200]	; (80044a4 <HAL_GPIO_Init+0x320>)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_GPIO_Init+0x320>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4013      	ands	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004402:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <HAL_GPIO_Init+0x320>)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004408:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <HAL_GPIO_Init+0x320>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <HAL_GPIO_Init+0x320>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <HAL_GPIO_Init+0x320>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <HAL_GPIO_Init+0x320>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f ae91 	bne.w	8004194 <HAL_GPIO_Init+0x10>
  }
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40021000 	.word	0x40021000
 8004484:	40010000 	.word	0x40010000
 8004488:	48000400 	.word	0x48000400
 800448c:	48000800 	.word	0x48000800
 8004490:	48000c00 	.word	0x48000c00
 8004494:	48001000 	.word	0x48001000
 8004498:	48001400 	.word	0x48001400
 800449c:	48001800 	.word	0x48001800
 80044a0:	48001c00 	.word	0x48001c00
 80044a4:	40010400 	.word	0x40010400

080044a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b8:	787b      	ldrb	r3, [r7, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044c4:	e002      	b.n	80044cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f806 	bl	8004508 <HAL_GPIO_EXTI_Callback>
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010400 	.word	0x40010400

08004508 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e08d      	b.n	800464c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd fc4d 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2224      	movs	r2, #36	; 0x24
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800456e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	e006      	b.n	80045a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d108      	bne.n	80045c0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	e007      	b.n	80045d0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69d9      	ldr	r1, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d138      	bne.n	80046dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004674:	2302      	movs	r3, #2
 8004676:	e032      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d139      	bne.n	8004774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800470a:	2302      	movs	r3, #2
 800470c:	e033      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800473c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e041      	b.n	8004818 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800479c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80047a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6852      	ldr	r2, [r2, #4]
 80047b0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6892      	ldr	r2, [r2, #8]
 80047ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80047bc:	f7fd ff54 	bl	8002668 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047c2:	e00f      	b.n	80047e4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80047c4:	f7fd ff50 	bl	8002668 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b31      	cmp	r3, #49	; 0x31
 80047d0:	d908      	bls.n	80047e4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e019      	b.n	8004818 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e8      	bne.n	80047c4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d005      	beq.n	800480c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68d2      	ldr	r2, [r2, #12]
 8004808:	611a      	str	r2, [r3, #16]
 800480a:	e004      	b.n	8004816 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800484c:	f7fd ff0c 	bl	8002668 <HAL_GetTick>
 8004850:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e092      	b.n	8004984 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 808b 	bne.w	8004984 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fb5a 	bl	8001f28 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004874:	f241 3188 	movw	r1, #5000	; 0x1388
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f88b 	bl	8004994 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	4b42      	ldr	r3, [pc, #264]	; (8004990 <HAL_OSPI_Init+0x150>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68d1      	ldr	r1, [r2, #12]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6912      	ldr	r2, [r2, #16]
 8004890:	3a01      	subs	r2, #1
 8004892:	0412      	lsls	r2, r2, #16
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6952      	ldr	r2, [r2, #20]
 800489a:	3a01      	subs	r2, #1
 800489c:	0212      	lsls	r2, r2, #8
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	69d2      	ldr	r2, [r2, #28]
 80048aa:	4311      	orrs	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0412      	lsls	r2, r2, #16
 80048be:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	021a      	lsls	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2120      	movs	r1, #32
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fb98 	bl	800501c <OSPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d146      	bne.n	8004984 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	1e5a      	subs	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800492c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d107      	bne.n	800496c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0202 	orr.w	r2, r2, #2
 800496a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004974:	d103      	bne.n	800497e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
 800497c:	e002      	b.n	8004984 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	f8e0f8f4 	.word	0xf8e0f8f4

08004994 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b092      	sub	sp, #72	; 0x48
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <HAL_OSPIM_Config+0x40>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d105      	bne.n	80049e2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80049e0:	e004      	b.n	80049ec <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80049e2:	2301      	movs	r3, #1
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049f2:	e01f      	b.n	8004a34 <HAL_OSPIM_Config+0x80>
 80049f4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80049f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049fc:	3301      	adds	r3, #1
 80049fe:	b2d8      	uxtb	r0, r3
 8004a00:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004a04:	f107 0114 	add.w	r1, r7, #20
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	4619      	mov	r1, r3
 8004a14:	f000 fb3a 	bl	800508c <OSPIM_GetConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2208      	movs	r2, #8
 8004a28:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d9dd      	bls.n	80049f8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 82de 	bne.w	8005002 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004a46:	4bc6      	ldr	r3, [pc, #792]	; (8004d60 <HAL_OSPIM_Config+0x3ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a52:	4bc3      	ldr	r3, [pc, #780]	; (8004d60 <HAL_OSPIM_Config+0x3ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4ac2      	ldr	r2, [pc, #776]	; (8004d60 <HAL_OSPIM_Config+0x3ac>)
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004a5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004a6a:	4bbe      	ldr	r3, [pc, #760]	; (8004d64 <HAL_OSPIM_Config+0x3b0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004a76:	4bbb      	ldr	r3, [pc, #748]	; (8004d64 <HAL_OSPIM_Config+0x3b0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4aba      	ldr	r2, [pc, #744]	; (8004d64 <HAL_OSPIM_Config+0x3b0>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004a82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a8e:	49b6      	ldr	r1, [pc, #728]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	3348      	adds	r3, #72	; 0x48
 8004a9c:	443b      	add	r3, r7
 8004a9e:	3b2c      	subs	r3, #44	; 0x2c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	48af      	ldr	r0, [pc, #700]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3348      	adds	r3, #72	; 0x48
 8004ab8:	443b      	add	r3, r7
 8004aba:	3b2c      	subs	r3, #44	; 0x2c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4403      	add	r3, r0
 8004ac8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3348      	adds	r3, #72	; 0x48
 8004ad6:	443b      	add	r3, r7
 8004ad8:	3b34      	subs	r3, #52	; 0x34
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a1 	beq.w	8004c24 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004ae2:	49a1      	ldr	r1, [pc, #644]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3348      	adds	r3, #72	; 0x48
 8004af0:	443b      	add	r3, r7
 8004af2:	3b34      	subs	r3, #52	; 0x34
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	489a      	ldr	r0, [pc, #616]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	3348      	adds	r3, #72	; 0x48
 8004b0c:	443b      	add	r3, r7
 8004b0e:	3b34      	subs	r3, #52	; 0x34
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f021 0201 	bic.w	r2, r1, #1
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4403      	add	r3, r0
 8004b1c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	3348      	adds	r3, #72	; 0x48
 8004b2a:	443b      	add	r3, r7
 8004b2c:	3b30      	subs	r3, #48	; 0x30
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01d      	beq.n	8004b70 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004b34:	498c      	ldr	r1, [pc, #560]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3348      	adds	r3, #72	; 0x48
 8004b42:	443b      	add	r3, r7
 8004b44:	3b30      	subs	r3, #48	; 0x30
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	4885      	ldr	r0, [pc, #532]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3348      	adds	r3, #72	; 0x48
 8004b5e:	443b      	add	r3, r7
 8004b60:	3b30      	subs	r3, #48	; 0x30
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f021 0210 	bic.w	r2, r1, #16
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4403      	add	r3, r0
 8004b6e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3348      	adds	r3, #72	; 0x48
 8004b7c:	443b      	add	r3, r7
 8004b7e:	3b28      	subs	r3, #40	; 0x28
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d021      	beq.n	8004bca <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004b86:	4978      	ldr	r1, [pc, #480]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	3348      	adds	r3, #72	; 0x48
 8004b94:	443b      	add	r3, r7
 8004b96:	3b28      	subs	r3, #40	; 0x28
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	4870      	ldr	r0, [pc, #448]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	3348      	adds	r3, #72	; 0x48
 8004bb4:	443b      	add	r3, r7
 8004bb6:	3b28      	subs	r3, #40	; 0x28
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4403      	add	r3, r0
 8004bc8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3348      	adds	r3, #72	; 0x48
 8004bd6:	443b      	add	r3, r7
 8004bd8:	3b24      	subs	r3, #36	; 0x24
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d021      	beq.n	8004c24 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004be0:	4961      	ldr	r1, [pc, #388]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	3348      	adds	r3, #72	; 0x48
 8004bee:	443b      	add	r3, r7
 8004bf0:	3b24      	subs	r3, #36	; 0x24
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	4859      	ldr	r0, [pc, #356]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3348      	adds	r3, #72	; 0x48
 8004c0e:	443b      	add	r3, r7
 8004c10:	3b24      	subs	r3, #36	; 0x24
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4403      	add	r3, r0
 8004c22:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	3348      	adds	r3, #72	; 0x48
 8004c36:	443b      	add	r3, r7
 8004c38:	3b34      	subs	r3, #52	; 0x34
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	d038      	beq.n	8004cb2 <HAL_OSPIM_Config+0x2fe>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3348      	adds	r3, #72	; 0x48
 8004c52:	443b      	add	r3, r7
 8004c54:	3b30      	subs	r3, #48	; 0x30
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	d02a      	beq.n	8004cb2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6899      	ldr	r1, [r3, #8]
 8004c60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3348      	adds	r3, #72	; 0x48
 8004c6e:	443b      	add	r3, r7
 8004c70:	3b2c      	subs	r3, #44	; 0x2c
 8004c72:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004c74:	4299      	cmp	r1, r3
 8004c76:	d01c      	beq.n	8004cb2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	68d9      	ldr	r1, [r3, #12]
 8004c7c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	3348      	adds	r3, #72	; 0x48
 8004c8a:	443b      	add	r3, r7
 8004c8c:	3b28      	subs	r3, #40	; 0x28
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4299      	cmp	r1, r3
 8004c92:	d00e      	beq.n	8004cb2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6919      	ldr	r1, [r3, #16]
 8004c98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	3348      	adds	r3, #72	; 0x48
 8004ca6:	443b      	add	r3, r7
 8004ca8:	3b24      	subs	r3, #36	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004cac:	4299      	cmp	r1, r3
 8004cae:	f040 80d3 	bne.w	8004e58 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004cb2:	492d      	ldr	r1, [pc, #180]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004cb4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	3348      	adds	r3, #72	; 0x48
 8004cc2:	443b      	add	r3, r7
 8004cc4:	3b34      	subs	r3, #52	; 0x34
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	4825      	ldr	r0, [pc, #148]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004cd2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	3348      	adds	r3, #72	; 0x48
 8004ce0:	443b      	add	r3, r7
 8004ce2:	3b34      	subs	r3, #52	; 0x34
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	f021 0201 	bic.w	r2, r1, #1
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4403      	add	r3, r0
 8004cf0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004cf2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	3348      	adds	r3, #72	; 0x48
 8004d00:	443b      	add	r3, r7
 8004d02:	3b30      	subs	r3, #48	; 0x30
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01f      	beq.n	8004d4a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004d0a:	4917      	ldr	r1, [pc, #92]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004d0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3348      	adds	r3, #72	; 0x48
 8004d1a:	443b      	add	r3, r7
 8004d1c:	3b30      	subs	r3, #48	; 0x30
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	480f      	ldr	r0, [pc, #60]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004d2a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3348      	adds	r3, #72	; 0x48
 8004d38:	443b      	add	r3, r7
 8004d3a:	3b30      	subs	r3, #48	; 0x30
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f021 0210 	bic.w	r2, r1, #16
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4403      	add	r3, r0
 8004d48:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004d4a:	4907      	ldr	r1, [pc, #28]	; (8004d68 <HAL_OSPIM_Config+0x3b4>)
 8004d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3348      	adds	r3, #72	; 0x48
 8004d5a:	443b      	add	r3, r7
 8004d5c:	3b2c      	subs	r3, #44	; 0x2c
 8004d5e:	e005      	b.n	8004d6c <HAL_OSPIM_Config+0x3b8>
 8004d60:	a0001000 	.word	0xa0001000
 8004d64:	a0001400 	.word	0xa0001400
 8004d68:	50061c00 	.word	0x50061c00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	48a6      	ldr	r0, [pc, #664]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004d78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	3348      	adds	r3, #72	; 0x48
 8004d86:	443b      	add	r3, r7
 8004d88:	3b2c      	subs	r3, #44	; 0x2c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4403      	add	r3, r0
 8004d96:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	3348      	adds	r3, #72	; 0x48
 8004da6:	443b      	add	r3, r7
 8004da8:	3b28      	subs	r3, #40	; 0x28
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d023      	beq.n	8004df8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004db0:	4997      	ldr	r1, [pc, #604]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004db2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3348      	adds	r3, #72	; 0x48
 8004dc0:	443b      	add	r3, r7
 8004dc2:	3b28      	subs	r3, #40	; 0x28
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	488f      	ldr	r0, [pc, #572]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004dd4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	3348      	adds	r3, #72	; 0x48
 8004de2:	443b      	add	r3, r7
 8004de4:	3b28      	subs	r3, #40	; 0x28
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4403      	add	r3, r0
 8004df6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004df8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	3348      	adds	r3, #72	; 0x48
 8004e06:	443b      	add	r3, r7
 8004e08:	3b24      	subs	r3, #36	; 0x24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d023      	beq.n	8004e58 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e10:	497f      	ldr	r1, [pc, #508]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3348      	adds	r3, #72	; 0x48
 8004e20:	443b      	add	r3, r7
 8004e22:	3b24      	subs	r3, #36	; 0x24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	4877      	ldr	r0, [pc, #476]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e34:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	3348      	adds	r3, #72	; 0x48
 8004e42:	443b      	add	r3, r7
 8004e44:	3b24      	subs	r3, #36	; 0x24
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4403      	add	r3, r0
 8004e56:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004e58:	4a6d      	ldr	r2, [pc, #436]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6c:	025b      	lsls	r3, r3, #9
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	4967      	ldr	r1, [pc, #412]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004e82:	4a63      	ldr	r2, [pc, #396]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 0203 	bic.w	r2, r3, #3
 8004e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	495d      	ldr	r1, [pc, #372]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d014      	beq.n	8004ede <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec8:	015b      	lsls	r3, r3, #5
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	4950      	ldr	r1, [pc, #320]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f042 0210 	orr.w	r2, r2, #16
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d019      	beq.n	8004f1e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004eea:	4a49      	ldr	r2, [pc, #292]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f02:	049b      	lsls	r3, r3, #18
 8004f04:	431a      	orrs	r2, r3
 8004f06:	4942      	ldr	r1, [pc, #264]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	e01c      	b.n	8004f58 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f26:	4a3a      	ldr	r2, [pc, #232]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	069b      	lsls	r3, r3, #26
 8004f40:	431a      	orrs	r2, r3
 8004f42:	4933      	ldr	r1, [pc, #204]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d019      	beq.n	8004f98 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f64:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7c:	049b      	lsls	r3, r3, #18
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	4923      	ldr	r1, [pc, #140]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e01c      	b.n	8004fd2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d018      	beq.n	8004fd2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fa0:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb8:	069b      	lsls	r3, r3, #26
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	4914      	ldr	r1, [pc, #80]	; (8005010 <HAL_OSPIM_Config+0x65c>)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004fd2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_OSPIM_Config+0x660>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <HAL_OSPIM_Config+0x660>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004fea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_OSPIM_Config+0x664>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_OSPIM_Config+0x664>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005002:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005006:	4618      	mov	r0, r3
 8005008:	3748      	adds	r7, #72	; 0x48
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	50061c00 	.word	0x50061c00
 8005014:	a0001000 	.word	0xa0001000
 8005018:	a0001400 	.word	0xa0001400

0800501c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800502c:	e01a      	b.n	8005064 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d016      	beq.n	8005064 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fd fb17 	bl	8002668 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	f043 0201 	orr.w	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e00e      	b.n	8005082 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d1d6      	bne.n	800502e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <OSPIM_GetConfig+0x26>
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d802      	bhi.n	80050b2 <OSPIM_GetConfig+0x26>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
 80050b6:	e08e      	b.n	80051d6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2200      	movs	r2, #0
 80050c2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d101      	bne.n	80050e0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80050dc:	4b41      	ldr	r3, [pc, #260]	; (80051e4 <OSPIM_GetConfig+0x158>)
 80050de:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e074      	b.n	80051d0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <OSPIM_GetConfig+0x15c>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4053      	eors	r3, r2
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4053      	eors	r3, r2
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4053      	eors	r3, r2
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4053      	eors	r3, r2
 8005162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d111      	bne.n	800518e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	e005      	b.n	800518e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3301      	adds	r3, #1
 8005186:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d018      	beq.n	80051ca <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4053      	eors	r3, r2
 800519e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d111      	bne.n	80051ca <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	611a      	str	r2, [r3, #16]
 80051bc:	e005      	b.n	80051ca <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d987      	bls.n	80050e6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	04040222 	.word	0x04040222
 80051e8:	50061c00 	.word	0x50061c00

080051ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a04      	ldr	r2, [pc, #16]	; (8005208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40007000 	.word	0x40007000

0800520c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d102      	bne.n	8005224 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800521e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005222:	e00b      	b.n	800523c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d102      	bne.n	800523a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005238:	e000      	b.n	800523c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800523a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40007000 	.word	0x40007000

0800524c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d141      	bne.n	80052de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005266:	d131      	bne.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526e:	4a46      	ldr	r2, [pc, #280]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005278:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005280:	4a41      	ldr	r2, [pc, #260]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2232      	movs	r2, #50	; 0x32
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	4a3f      	ldr	r2, [pc, #252]	; (8005390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	0c9b      	lsrs	r3, r3, #18
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800529e:	e002      	b.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052a6:	4b38      	ldr	r3, [pc, #224]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d102      	bne.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f2      	bne.n	80052a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ba:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c6:	d158      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e057      	b.n	800537c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052cc:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d2:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052dc:	e04d      	b.n	800537a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d141      	bne.n	800536a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d131      	bne.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fa:	4a23      	ldr	r2, [pc, #140]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005304:	4b20      	ldr	r3, [pc, #128]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800530c:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005314:	4b1d      	ldr	r3, [pc, #116]	; (800538c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2232      	movs	r2, #50	; 0x32
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0c9b      	lsrs	r3, r3, #18
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800532a:	e002      	b.n	8005332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3b01      	subs	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d102      	bne.n	8005346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f2      	bne.n	800532c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005352:	d112      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e011      	b.n	800537c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005368:	e007      	b.n	800537a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005378:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40007000 	.word	0x40007000
 800538c:	20000000 	.word	0x20000000
 8005390:	431bde83 	.word	0x431bde83

08005394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f000 bc08 	b.w	8005bb8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a8:	4b96      	ldr	r3, [pc, #600]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b2:	4b94      	ldr	r3, [pc, #592]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80e4 	beq.w	8005592 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4c>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	f040 808b 	bne.w	80054ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	f040 8087 	bne.w	80054ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053e0:	4b88      	ldr	r3, [pc, #544]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_OscConfig+0x64>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e3df      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	4b81      	ldr	r3, [pc, #516]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_RCC_OscConfig+0x7e>
 8005408:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005410:	e005      	b.n	800541e <HAL_RCC_OscConfig+0x8a>
 8005412:	4b7c      	ldr	r3, [pc, #496]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541e:	4293      	cmp	r3, r2
 8005420:	d223      	bcs.n	800546a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fdcc 	bl	8005fc4 <RCC_SetFlashLatencyFromMSIRange>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e3c0      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005436:	4b73      	ldr	r3, [pc, #460]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a72      	ldr	r2, [pc, #456]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b70      	ldr	r3, [pc, #448]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	496d      	ldr	r1, [pc, #436]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005454:	4b6b      	ldr	r3, [pc, #428]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	4968      	ldr	r1, [pc, #416]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	e025      	b.n	80054b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800546a:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a65      	ldr	r2, [pc, #404]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005470:	f043 0308 	orr.w	r3, r3, #8
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b63      	ldr	r3, [pc, #396]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	4960      	ldr	r1, [pc, #384]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005488:	4b5e      	ldr	r3, [pc, #376]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	495b      	ldr	r1, [pc, #364]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fd8c 	bl	8005fc4 <RCC_SetFlashLatencyFromMSIRange>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e380      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b6:	f000 fcc1 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b51      	ldr	r3, [pc, #324]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	4950      	ldr	r1, [pc, #320]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	4a4e      	ldr	r2, [pc, #312]	; (800560c <HAL_RCC_OscConfig+0x278>)
 80054d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054d6:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <HAL_RCC_OscConfig+0x27c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fd f874 	bl	80025c8 <HAL_InitTick>
 80054e0:	4603      	mov	r3, r0
 80054e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d052      	beq.n	8005590 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	e364      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d032      	beq.n	800555c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054f6:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a42      	ldr	r2, [pc, #264]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005502:	f7fd f8b1 	bl	8002668 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800550a:	f7fd f8ad 	bl	8002668 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e34d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800551c:	4b39      	ldr	r3, [pc, #228]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a35      	ldr	r2, [pc, #212]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800552e:	f043 0308 	orr.w	r3, r3, #8
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b33      	ldr	r3, [pc, #204]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4930      	ldr	r1, [pc, #192]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	492b      	ldr	r1, [pc, #172]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]
 800555a:	e01a      	b.n	8005592 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005568:	f7fd f87e 	bl	8002668 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005570:	f7fd f87a 	bl	8002668 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e31a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x1dc>
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d073      	beq.n	8005686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_OscConfig+0x21c>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d10e      	bne.n	80055c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b0:	4b14      	ldr	r3, [pc, #80]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d063      	beq.n	8005684 <HAL_RCC_OscConfig+0x2f0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d15f      	bne.n	8005684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e2f7      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x24c>
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a0b      	ldr	r2, [pc, #44]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e025      	b.n	800562c <HAL_RCC_OscConfig+0x298>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e8:	d114      	bne.n	8005614 <HAL_RCC_OscConfig+0x280>
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b03      	ldr	r3, [pc, #12]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a02      	ldr	r2, [pc, #8]	; (8005604 <HAL_RCC_OscConfig+0x270>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e013      	b.n	800562c <HAL_RCC_OscConfig+0x298>
 8005604:	40021000 	.word	0x40021000
 8005608:	0800987c 	.word	0x0800987c
 800560c:	20000000 	.word	0x20000000
 8005610:	20000004 	.word	0x20000004
 8005614:	4ba0      	ldr	r3, [pc, #640]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a9f      	ldr	r2, [pc, #636]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b9d      	ldr	r3, [pc, #628]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a9c      	ldr	r2, [pc, #624]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd f818 	bl	8002668 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd f814 	bl	8002668 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e2b4      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564e:	4b92      	ldr	r3, [pc, #584]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x2a8>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd f804 	bl	8002668 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005664:	f7fd f800 	bl	8002668 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e2a0      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005676:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x2d0>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d060      	beq.n	8005754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_OscConfig+0x310>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d119      	bne.n	80056d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d116      	bne.n	80056d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a4:	4b7c      	ldr	r3, [pc, #496]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_OscConfig+0x328>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e27d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056bc:	4b76      	ldr	r3, [pc, #472]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	4973      	ldr	r1, [pc, #460]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d0:	e040      	b.n	8005754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d023      	beq.n	8005722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056da:	4b6f      	ldr	r3, [pc, #444]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fc ffbf 	bl	8002668 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ee:	f7fc ffbb 	bl	8002668 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e25b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005700:	4b65      	ldr	r3, [pc, #404]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570c:	4b62      	ldr	r3, [pc, #392]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	495f      	ldr	r1, [pc, #380]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
 8005720:	e018      	b.n	8005754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005722:	4b5d      	ldr	r3, [pc, #372]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a5c      	ldr	r2, [pc, #368]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fc ff9b 	bl	8002668 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005736:	f7fc ff97 	bl	8002668 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e237      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d03c      	beq.n	80057da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800576a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576e:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fc ff76 	bl	8002668 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005780:	f7fc ff72 	bl	8002668 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e212      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005792:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ef      	beq.n	8005780 <HAL_RCC_OscConfig+0x3ec>
 80057a0:	e01b      	b.n	80057da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a2:	4b3d      	ldr	r3, [pc, #244]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a8:	4a3b      	ldr	r2, [pc, #236]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fc ff59 	bl	8002668 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fc ff55 	bl	8002668 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1f5      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ef      	bne.n	80057ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80a6 	beq.w	8005934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e8:	2300      	movs	r3, #0
 80057ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057ec:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10d      	bne.n	8005814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f8:	4b27      	ldr	r3, [pc, #156]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6593      	str	r3, [r2, #88]	; 0x58
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005814:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_RCC_OscConfig+0x508>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d118      	bne.n	8005852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_RCC_OscConfig+0x508>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_RCC_OscConfig+0x508>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800582c:	f7fc ff1c 	bl	8002668 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005834:	f7fc ff18 	bl	8002668 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1b8      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_RCC_OscConfig+0x508>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d108      	bne.n	800586c <HAL_RCC_OscConfig+0x4d8>
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800586a:	e029      	b.n	80058c0 <HAL_RCC_OscConfig+0x52c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b05      	cmp	r3, #5
 8005872:	d115      	bne.n	80058a0 <HAL_RCC_OscConfig+0x50c>
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800587c:	f043 0304 	orr.w	r3, r3, #4
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	4a03      	ldr	r2, [pc, #12]	; (8005898 <HAL_RCC_OscConfig+0x504>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005894:	e014      	b.n	80058c0 <HAL_RCC_OscConfig+0x52c>
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000
 800589c:	40007000 	.word	0x40007000
 80058a0:	4b9d      	ldr	r3, [pc, #628]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	4a9c      	ldr	r2, [pc, #624]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b0:	4b99      	ldr	r3, [pc, #612]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4a98      	ldr	r2, [pc, #608]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d016      	beq.n	80058f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fc fece 	bl	8002668 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fc feca 	bl	8002668 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e168      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e6:	4b8c      	ldr	r3, [pc, #560]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ed      	beq.n	80058d0 <HAL_RCC_OscConfig+0x53c>
 80058f4:	e015      	b.n	8005922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fc feb7 	bl	8002668 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fc feb3 	bl	8002668 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e151      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005914:	4b80      	ldr	r3, [pc, #512]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ed      	bne.n	80058fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005922:	7ffb      	ldrb	r3, [r7, #31]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005928:	4b7b      	ldr	r3, [pc, #492]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	4a7a      	ldr	r2, [pc, #488]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 800592e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005932:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d03c      	beq.n	80059ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01c      	beq.n	8005982 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005948:	4b73      	ldr	r3, [pc, #460]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 800594a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800594e:	4a72      	ldr	r2, [pc, #456]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fc fe86 	bl	8002668 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005960:	f7fc fe82 	bl	8002668 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e122      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005972:	4b69      	ldr	r3, [pc, #420]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ef      	beq.n	8005960 <HAL_RCC_OscConfig+0x5cc>
 8005980:	e01b      	b.n	80059ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005982:	4b65      	ldr	r3, [pc, #404]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fc fe69 	bl	8002668 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800599a:	f7fc fe65 	bl	8002668 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e105      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ac:	4b5a      	ldr	r3, [pc, #360]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80059ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1ef      	bne.n	800599a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80f9 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f040 80cf 	bne.w	8005b6c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059ce:	4b52      	ldr	r3, [pc, #328]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d12c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	3b01      	subs	r3, #1
 80059ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d123      	bne.n	8005a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d11b      	bne.n	8005a3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d113      	bne.n	8005a3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	3b01      	subs	r3, #1
 8005a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d109      	bne.n	8005a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	3b01      	subs	r3, #1
 8005a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d071      	beq.n	8005b20 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d068      	beq.n	8005b14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a42:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a4e:	4b32      	ldr	r3, [pc, #200]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0ac      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2d      	ldr	r2, [pc, #180]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a6a:	f7fc fdfd 	bl	8002668 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a72:	f7fc fdf9 	bl	8002668 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e099      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a84:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a90:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0112      	lsls	r2, r2, #4
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aaa:	0212      	lsls	r2, r2, #8
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ab2:	0852      	lsrs	r2, r2, #1
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	0552      	lsls	r2, r2, #21
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005abe:	0852      	lsrs	r2, r2, #1
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0652      	lsls	r2, r2, #25
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aca:	06d2      	lsls	r2, r2, #27
 8005acc:	430a      	orrs	r2, r1
 8005ace:	4912      	ldr	r1, [pc, #72]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ad4:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aec:	f7fc fdbc 	bl	8002668 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fc fdb8 	bl	8002668 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e058      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b06:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b12:	e050      	b.n	8005bb6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e04f      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d144      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b38:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b44:	f7fc fd90 	bl	8002668 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4c:	f7fc fd8c 	bl	8002668 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e02c      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5e:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x7b8>
 8005b6a:	e024      	b.n	8005bb6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d01f      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fd73 	bl	8002668 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fc fd6f 	bl	8002668 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e00f      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	4905      	ldr	r1, [pc, #20]	; (8005bc0 <HAL_RCC_OscConfig+0x82c>)
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCC_OscConfig+0x830>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
 8005bb0:	e001      	b.n	8005bb6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	feeefffc 	.word	0xfeeefffc

08005bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e11d      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be0:	4b90      	ldr	r3, [pc, #576]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d910      	bls.n	8005c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bee:	4b8d      	ldr	r3, [pc, #564]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 020f 	bic.w	r2, r3, #15
 8005bf6:	498b      	ldr	r1, [pc, #556]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfe:	4b89      	ldr	r3, [pc, #548]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e105      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d908      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4b7e      	ldr	r3, [pc, #504]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	497b      	ldr	r1, [pc, #492]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d079      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d11e      	bne.n	8005c90 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c52:	4b75      	ldr	r3, [pc, #468]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0dc      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c62:	f000 fa09 	bl	8006078 <RCC_GetSysClockFreqFromPLLSource>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4a70      	ldr	r2, [pc, #448]	; (8005e2c <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d946      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c6e:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d140      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c82:	4a69      	ldr	r2, [pc, #420]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e035      	b.n	8005cfc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c98:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d115      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0b9      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cb0:	4b5d      	ldr	r3, [pc, #372]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0ad      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cc0:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0a5      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005cd0:	f000 f8b4 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4a55      	ldr	r2, [pc, #340]	; (8005e2c <HAL_RCC_ClockConfig+0x264>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d90f      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cdc:	4b52      	ldr	r3, [pc, #328]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf0:	4a4d      	ldr	r2, [pc, #308]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cfc:	4b4a      	ldr	r3, [pc, #296]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f023 0203 	bic.w	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4947      	ldr	r1, [pc, #284]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0e:	f7fc fcab 	bl	8002668 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d16:	f7fc fca7 	bl	8002668 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e077      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2c:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 020c 	and.w	r2, r3, #12
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d1eb      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d105      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d44:	4b38      	ldr	r3, [pc, #224]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a37      	ldr	r2, [pc, #220]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d208      	bcs.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	492b      	ldr	r1, [pc, #172]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7e:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d210      	bcs.n	8005dae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 020f 	bic.w	r2, r3, #15
 8005d94:	4923      	ldr	r1, [pc, #140]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9c:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <HAL_RCC_ClockConfig+0x25c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d001      	beq.n	8005dae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e036      	b.n	8005e1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dba:	4b1b      	ldr	r3, [pc, #108]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4918      	ldr	r1, [pc, #96]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4910      	ldr	r1, [pc, #64]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dec:	f000 f826 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HAL_RCC_ClockConfig+0x260>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	490c      	ldr	r1, [pc, #48]	; (8005e30 <HAL_RCC_ClockConfig+0x268>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x26c>)
 8005e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x270>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fc fbd9 	bl	80025c8 <HAL_InitTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40022000 	.word	0x40022000
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	04c4b400 	.word	0x04c4b400
 8005e30:	0800987c 	.word	0x0800987c
 8005e34:	20000000 	.word	0x20000000
 8005e38:	20000004 	.word	0x20000004

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4a:	4b3e      	ldr	r3, [pc, #248]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e54:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x34>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d121      	bne.n	8005eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d11e      	bne.n	8005eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e70:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e7c:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e005      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e98:	4a2b      	ldr	r2, [pc, #172]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d102      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005eb4:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ec0:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	d134      	bne.n	8005f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eca:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d003      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ee0:	e005      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ee4:	617b      	str	r3, [r7, #20]
      break;
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eea:	617b      	str	r3, [r7, #20]
      break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	617b      	str	r3, [r7, #20]
      break;
 8005ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3301      	adds	r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	fb03 f202 	mul.w	r2, r3, r2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	0e5b      	lsrs	r3, r3, #25
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	3301      	adds	r3, #1
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f34:	69bb      	ldr	r3, [r7, #24]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3724      	adds	r7, #36	; 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	08009894 	.word	0x08009894
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000000 	.word	0x20000000

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f70:	f7ff fff0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4904      	ldr	r1, [pc, #16]	; (8005f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0800988c 	.word	0x0800988c

08005f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f9c:	f7ff ffda 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	0adb      	lsrs	r3, r3, #11
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4904      	ldr	r1, [pc, #16]	; (8005fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0800988c 	.word	0x0800988c

08005fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fd0:	4b27      	ldr	r3, [pc, #156]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fdc:	f7ff f916 	bl	800520c <HAL_PWREx_GetVoltageRange>
 8005fe0:	6178      	str	r0, [r7, #20]
 8005fe2:	e014      	b.n	800600e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fe4:	4b22      	ldr	r3, [pc, #136]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe8:	4a21      	ldr	r2, [pc, #132]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fee:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff0:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ffc:	f7ff f906 	bl	800520c <HAL_PWREx_GetVoltageRange>
 8006000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d10b      	bne.n	800602e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d913      	bls.n	8006044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2ba0      	cmp	r3, #160	; 0xa0
 8006020:	d902      	bls.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006022:	2302      	movs	r3, #2
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	e00d      	b.n	8006044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006028:	2301      	movs	r3, #1
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	e00a      	b.n	8006044 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d902      	bls.n	800603a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006034:	2302      	movs	r3, #2
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	e004      	b.n	8006044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d101      	bne.n	8006044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006040:	2301      	movs	r3, #1
 8006042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 020f 	bic.w	r2, r3, #15
 800604c:	4909      	ldr	r1, [pc, #36]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d001      	beq.n	8006066 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000
 8006074:	40022000 	.word	0x40022000

08006078 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800607e:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b03      	cmp	r3, #3
 800608c:	d00b      	beq.n	80060a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d825      	bhi.n	80060e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d008      	beq.n	80060ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d11f      	bne.n	80060e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80060a2:	613b      	str	r3, [r7, #16]
    break;
 80060a4:	e01f      	b.n	80060e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060a8:	613b      	str	r3, [r7, #16]
    break;
 80060aa:	e01c      	b.n	80060e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060ac:	4b21      	ldr	r3, [pc, #132]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060b8:	4b1e      	ldr	r3, [pc, #120]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e005      	b.n	80060d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060c8:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80060d4:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060dc:	613b      	str	r3, [r7, #16]
    break;
 80060de:	e002      	b.n	80060e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
    break;
 80060e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	3301      	adds	r3, #1
 80060f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	fb03 f202 	mul.w	r2, r3, r2
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	0e5b      	lsrs	r3, r3, #25
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006126:	683b      	ldr	r3, [r7, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40021000 	.word	0x40021000
 8006138:	00f42400 	.word	0x00f42400
 800613c:	007a1200 	.word	0x007a1200
 8006140:	08009894 	.word	0x08009894

08006144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800614c:	2300      	movs	r3, #0
 800614e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006150:	2300      	movs	r3, #0
 8006152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615c:	2b00      	cmp	r3, #0
 800615e:	d040      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d02a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	d825      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d026      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006170:	2b60      	cmp	r3, #96	; 0x60
 8006172:	d821      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d006      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d81d      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d010      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006184:	e018      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006186:	4b89      	ldr	r3, [pc, #548]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4a88      	ldr	r2, [pc, #544]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006190:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006192:	e015      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fb12 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a4:	e00c      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3320      	adds	r3, #32
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fbfd 	bl	80069ac <RCCEx_PLLSAI2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	74fb      	strb	r3, [r7, #19]
      break;
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80061be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061c6:	4b79      	ldr	r3, [pc, #484]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061cc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d4:	4975      	ldr	r1, [pc, #468]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061dc:	e001      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	7cfb      	ldrb	r3, [r7, #19]
 80061e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d047      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	d030      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d82a      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006202:	d02a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006208:	d824      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	d008      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006214:	d81e      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d010      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006220:	e018      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006222:	4b62      	ldr	r3, [pc, #392]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	4a61      	ldr	r2, [pc, #388]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800622e:	e015      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fac4 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006240:	e00c      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3320      	adds	r3, #32
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fbaf 	bl	80069ac <RCCEx_PLLSAI2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	74fb      	strb	r3, [r7, #19]
      break;
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800625a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006262:	4b52      	ldr	r3, [pc, #328]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	494e      	ldr	r1, [pc, #312]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006278:	e001      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	7cfb      	ldrb	r3, [r7, #19]
 800627c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 809f 	beq.w	80063ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800628c:	2300      	movs	r3, #0
 800628e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006290:	4b46      	ldr	r3, [pc, #280]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	4b41      	ldr	r3, [pc, #260]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	4a40      	ldr	r2, [pc, #256]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6593      	str	r3, [r2, #88]	; 0x58
 80062b2:	4b3e      	ldr	r3, [pc, #248]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062be:	2301      	movs	r3, #1
 80062c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062c2:	4b3b      	ldr	r3, [pc, #236]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a3a      	ldr	r2, [pc, #232]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ce:	f7fc f9cb 	bl	8002668 <HAL_GetTick>
 80062d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062d4:	e009      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fc f9c7 	bl	8002668 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d902      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	74fb      	strb	r3, [r7, #19]
        break;
 80062e8:	e005      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ea:	4b31      	ldr	r3, [pc, #196]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ef      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d15b      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062fc:	4b2b      	ldr	r3, [pc, #172]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01f      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	429a      	cmp	r2, r3
 8006318:	d019      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006324:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006326:	4b21      	ldr	r3, [pc, #132]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800632e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006346:	4a19      	ldr	r2, [pc, #100]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d016      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fc f986 	bl	8002668 <HAL_GetTick>
 800635c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635e:	e00b      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006360:	f7fc f982 	bl	8002668 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	4293      	cmp	r3, r2
 8006370:	d902      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	74fb      	strb	r3, [r7, #19]
            break;
 8006376:	e006      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0ec      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006386:	7cfb      	ldrb	r3, [r7, #19]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	4903      	ldr	r1, [pc, #12]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063a4:	e008      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a6:	7cfb      	ldrb	r3, [r7, #19]
 80063a8:	74bb      	strb	r3, [r7, #18]
 80063aa:	e005      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063ac:	40021000 	.word	0x40021000
 80063b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	7cfb      	ldrb	r3, [r7, #19]
 80063b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b8:	7c7b      	ldrb	r3, [r7, #17]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063be:	4ba0      	ldr	r3, [pc, #640]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	4a9f      	ldr	r2, [pc, #636]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d6:	4b9a      	ldr	r3, [pc, #616]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f023 0203 	bic.w	r2, r3, #3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	4996      	ldr	r1, [pc, #600]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f8:	4b91      	ldr	r3, [pc, #580]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f023 020c 	bic.w	r2, r3, #12
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	498e      	ldr	r1, [pc, #568]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800641a:	4b89      	ldr	r3, [pc, #548]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	4985      	ldr	r1, [pc, #532]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800643c:	4b80      	ldr	r3, [pc, #512]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	497d      	ldr	r1, [pc, #500]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800645e:	4b78      	ldr	r3, [pc, #480]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646c:	4974      	ldr	r1, [pc, #464]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006480:	4b6f      	ldr	r3, [pc, #444]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648e:	496c      	ldr	r1, [pc, #432]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a2:	4b67      	ldr	r3, [pc, #412]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	4963      	ldr	r1, [pc, #396]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c4:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d2:	495b      	ldr	r1, [pc, #364]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064e6:	4b56      	ldr	r3, [pc, #344]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f4:	4952      	ldr	r1, [pc, #328]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	494a      	ldr	r1, [pc, #296]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	4941      	ldr	r1, [pc, #260]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006552:	f023 0203 	bic.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655a:	4939      	ldr	r1, [pc, #228]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d028      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	4930      	ldr	r1, [pc, #192]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658c:	d106      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658e:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006598:	60d3      	str	r3, [r2, #12]
 800659a:	e011      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 f909 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80065bc:	7cfb      	ldrb	r3, [r7, #19]
 80065be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d04d      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065d4:	d108      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065dc:	4a18      	ldr	r2, [pc, #96]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065e6:	e012      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065e8:	4b15      	ldr	r3, [pc, #84]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ee:	4a14      	ldr	r2, [pc, #80]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006606:	490e      	ldr	r1, [pc, #56]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006616:	d106      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4a08      	ldr	r2, [pc, #32]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006622:	60d3      	str	r3, [r2, #12]
 8006624:	e020      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800662e:	d109      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4a02      	ldr	r2, [pc, #8]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663a:	60d3      	str	r3, [r2, #12]
 800663c:	e014      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3304      	adds	r3, #4
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f8b5 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d028      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006674:	4b4a      	ldr	r3, [pc, #296]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006682:	4947      	ldr	r1, [pc, #284]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006692:	d106      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	4b42      	ldr	r3, [pc, #264]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a41      	ldr	r2, [pc, #260]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669e:	60d3      	str	r3, [r2, #12]
 80066a0:	e011      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066aa:	d10c      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3304      	adds	r3, #4
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f886 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80066c2:	7cfb      	ldrb	r3, [r7, #19]
 80066c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01e      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d2:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e2:	492f      	ldr	r1, [pc, #188]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f4:	d10c      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	2102      	movs	r1, #2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f861 	bl	80067c4 <RCCEx_PLLSAI1_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800671c:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800671e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006722:	f023 0204 	bic.w	r2, r3, #4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672c:	491c      	ldr	r1, [pc, #112]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006746:	f023 0218 	bic.w	r2, r3, #24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	4913      	ldr	r1, [pc, #76]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800676a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006774:	490a      	ldr	r1, [pc, #40]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800678e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006794:	7cbb      	ldrb	r3, [r7, #18]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000

080067a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067ae:	f043 0304 	orr.w	r3, r3, #4
 80067b2:	6013      	str	r3, [r2, #0]
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40021000 	.word	0x40021000

080067c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067d2:	4b72      	ldr	r3, [pc, #456]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00e      	beq.n	80067fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067de:	4b6f      	ldr	r3, [pc, #444]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0203 	and.w	r2, r3, #3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d103      	bne.n	80067f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
       ||
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d142      	bne.n	800687c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e03f      	b.n	800687c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d018      	beq.n	8006836 <RCCEx_PLLSAI1_Config+0x72>
 8006804:	2b03      	cmp	r3, #3
 8006806:	d825      	bhi.n	8006854 <RCCEx_PLLSAI1_Config+0x90>
 8006808:	2b01      	cmp	r3, #1
 800680a:	d002      	beq.n	8006812 <RCCEx_PLLSAI1_Config+0x4e>
 800680c:	2b02      	cmp	r3, #2
 800680e:	d009      	beq.n	8006824 <RCCEx_PLLSAI1_Config+0x60>
 8006810:	e020      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006812:	4b62      	ldr	r3, [pc, #392]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11d      	bne.n	800685a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006822:	e01a      	b.n	800685a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006824:	4b5d      	ldr	r3, [pc, #372]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	2b00      	cmp	r3, #0
 800682e:	d116      	bne.n	800685e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006834:	e013      	b.n	800685e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006842:	4b56      	ldr	r3, [pc, #344]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006852:	e006      	b.n	8006862 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e004      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006862:	bf00      	nop
    }

    if(status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d108      	bne.n	800687c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800686a:	4b4c      	ldr	r3, [pc, #304]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f023 0203 	bic.w	r2, r3, #3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4949      	ldr	r1, [pc, #292]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006878:	4313      	orrs	r3, r2
 800687a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 8086 	bne.w	8006990 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006884:	4b45      	ldr	r3, [pc, #276]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a44      	ldr	r2, [pc, #272]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 800688a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800688e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006890:	f7fb feea 	bl	8002668 <HAL_GetTick>
 8006894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006896:	e009      	b.n	80068ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006898:	f7fb fee6 	bl	8002668 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d902      	bls.n	80068ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	73fb      	strb	r3, [r7, #15]
        break;
 80068aa:	e005      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1ef      	bne.n	8006898 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d168      	bne.n	8006990 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d113      	bne.n	80068ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c4:	4b35      	ldr	r3, [pc, #212]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6892      	ldr	r2, [r2, #8]
 80068d0:	0211      	lsls	r1, r2, #8
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68d2      	ldr	r2, [r2, #12]
 80068d6:	06d2      	lsls	r2, r2, #27
 80068d8:	4311      	orrs	r1, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6852      	ldr	r2, [r2, #4]
 80068de:	3a01      	subs	r2, #1
 80068e0:	0112      	lsls	r2, r2, #4
 80068e2:	430a      	orrs	r2, r1
 80068e4:	492d      	ldr	r1, [pc, #180]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	610b      	str	r3, [r1, #16]
 80068ea:	e02d      	b.n	8006948 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d115      	bne.n	800691e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6892      	ldr	r2, [r2, #8]
 80068fe:	0211      	lsls	r1, r2, #8
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6912      	ldr	r2, [r2, #16]
 8006904:	0852      	lsrs	r2, r2, #1
 8006906:	3a01      	subs	r2, #1
 8006908:	0552      	lsls	r2, r2, #21
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6852      	ldr	r2, [r2, #4]
 8006910:	3a01      	subs	r2, #1
 8006912:	0112      	lsls	r2, r2, #4
 8006914:	430a      	orrs	r2, r1
 8006916:	4921      	ldr	r1, [pc, #132]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006918:	4313      	orrs	r3, r2
 800691a:	610b      	str	r3, [r1, #16]
 800691c:	e014      	b.n	8006948 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006924:	4013      	ands	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6892      	ldr	r2, [r2, #8]
 800692a:	0211      	lsls	r1, r2, #8
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6952      	ldr	r2, [r2, #20]
 8006930:	0852      	lsrs	r2, r2, #1
 8006932:	3a01      	subs	r2, #1
 8006934:	0652      	lsls	r2, r2, #25
 8006936:	4311      	orrs	r1, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6852      	ldr	r2, [r2, #4]
 800693c:	3a01      	subs	r2, #1
 800693e:	0112      	lsls	r2, r2, #4
 8006940:	430a      	orrs	r2, r1
 8006942:	4916      	ldr	r1, [pc, #88]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a13      	ldr	r2, [pc, #76]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 800694e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fb fe88 	bl	8002668 <HAL_GetTick>
 8006958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800695a:	e009      	b.n	8006970 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800695c:	f7fb fe84 	bl	8002668 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d902      	bls.n	8006970 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	73fb      	strb	r3, [r7, #15]
          break;
 800696e:	e005      	b.n	800697c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ef      	beq.n	800695c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	4904      	ldr	r1, [pc, #16]	; (800699c <RCCEx_PLLSAI1_Config+0x1d8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	07ff800f 	.word	0x07ff800f
 80069a4:	ff9f800f 	.word	0xff9f800f
 80069a8:	f9ff800f 	.word	0xf9ff800f

080069ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ba:	4b72      	ldr	r3, [pc, #456]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00e      	beq.n	80069e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069c6:	4b6f      	ldr	r3, [pc, #444]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0203 	and.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d103      	bne.n	80069de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
       ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d142      	bne.n	8006a64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
 80069e2:	e03f      	b.n	8006a64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d018      	beq.n	8006a1e <RCCEx_PLLSAI2_Config+0x72>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d825      	bhi.n	8006a3c <RCCEx_PLLSAI2_Config+0x90>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d002      	beq.n	80069fa <RCCEx_PLLSAI2_Config+0x4e>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d009      	beq.n	8006a0c <RCCEx_PLLSAI2_Config+0x60>
 80069f8:	e020      	b.n	8006a3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069fa:	4b62      	ldr	r3, [pc, #392]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11d      	bne.n	8006a42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a0a:	e01a      	b.n	8006a42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a0c:	4b5d      	ldr	r3, [pc, #372]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d116      	bne.n	8006a46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1c:	e013      	b.n	8006a46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a1e:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10f      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a2a:	4b56      	ldr	r3, [pc, #344]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a3a:	e006      	b.n	8006a4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	e004      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a52:	4b4c      	ldr	r3, [pc, #304]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 0203 	bic.w	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4949      	ldr	r1, [pc, #292]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8086 	bne.w	8006b78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a6c:	4b45      	ldr	r3, [pc, #276]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a44      	ldr	r2, [pc, #272]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a78:	f7fb fdf6 	bl	8002668 <HAL_GetTick>
 8006a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a7e:	e009      	b.n	8006a94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a80:	f7fb fdf2 	bl	8002668 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d902      	bls.n	8006a94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	73fb      	strb	r3, [r7, #15]
        break;
 8006a92:	e005      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a94:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1ef      	bne.n	8006a80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d168      	bne.n	8006b78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	4b35      	ldr	r3, [pc, #212]	; (8006b88 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	0211      	lsls	r1, r2, #8
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68d2      	ldr	r2, [r2, #12]
 8006abe:	06d2      	lsls	r2, r2, #27
 8006ac0:	4311      	orrs	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6852      	ldr	r2, [r2, #4]
 8006ac6:	3a01      	subs	r2, #1
 8006ac8:	0112      	lsls	r2, r2, #4
 8006aca:	430a      	orrs	r2, r1
 8006acc:	492d      	ldr	r1, [pc, #180]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	614b      	str	r3, [r1, #20]
 8006ad2:	e02d      	b.n	8006b30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d115      	bne.n	8006b06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ada:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006adc:	695a      	ldr	r2, [r3, #20]
 8006ade:	4b2b      	ldr	r3, [pc, #172]	; (8006b8c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6892      	ldr	r2, [r2, #8]
 8006ae6:	0211      	lsls	r1, r2, #8
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6912      	ldr	r2, [r2, #16]
 8006aec:	0852      	lsrs	r2, r2, #1
 8006aee:	3a01      	subs	r2, #1
 8006af0:	0552      	lsls	r2, r2, #21
 8006af2:	4311      	orrs	r1, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6852      	ldr	r2, [r2, #4]
 8006af8:	3a01      	subs	r2, #1
 8006afa:	0112      	lsls	r2, r2, #4
 8006afc:	430a      	orrs	r2, r1
 8006afe:	4921      	ldr	r1, [pc, #132]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	614b      	str	r3, [r1, #20]
 8006b04:	e014      	b.n	8006b30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b08:	695a      	ldr	r2, [r3, #20]
 8006b0a:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6892      	ldr	r2, [r2, #8]
 8006b12:	0211      	lsls	r1, r2, #8
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6952      	ldr	r2, [r2, #20]
 8006b18:	0852      	lsrs	r2, r2, #1
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0652      	lsls	r2, r2, #25
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6852      	ldr	r2, [r2, #4]
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0112      	lsls	r2, r2, #4
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	4916      	ldr	r1, [pc, #88]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b30:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fb fd94 	bl	8002668 <HAL_GetTick>
 8006b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b42:	e009      	b.n	8006b58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b44:	f7fb fd90 	bl	8002668 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d902      	bls.n	8006b58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	73fb      	strb	r3, [r7, #15]
          break;
 8006b56:	e005      	b.n	8006b64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ef      	beq.n	8006b44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	4904      	ldr	r1, [pc, #16]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40021000 	.word	0x40021000
 8006b88:	07ff800f 	.word	0x07ff800f
 8006b8c:	ff9f800f 	.word	0xff9f800f
 8006b90:	f9ff800f 	.word	0xf9ff800f

08006b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e095      	b.n	8006cd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d108      	bne.n	8006bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb6:	d009      	beq.n	8006bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	61da      	str	r2, [r3, #28]
 8006bbe:	e005      	b.n	8006bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb fa0a 	bl	8002000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c0c:	d902      	bls.n	8006c14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e002      	b.n	8006c1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c22:	d007      	beq.n	8006c34 <HAL_SPI_Init+0xa0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c2c:	d002      	beq.n	8006c34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	ea42 0103 	orr.w	r1, r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	f003 0204 	and.w	r2, r3, #4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cb0:	ea42 0103 	orr.w	r1, r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e049      	b.n	8006d80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fb f9f3 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f000 fb7b 	bl	8007414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e049      	b.n	8006e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f841 	bl	8006e36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f000 fb24 	bl	8007414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <HAL_TIM_PWM_Start+0x24>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e03c      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d109      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x3e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e02f      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d109      	bne.n	8006ea4 <HAL_TIM_PWM_Start+0x58>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e022      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d109      	bne.n	8006ebe <HAL_TIM_PWM_Start+0x72>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	bf14      	ite	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	2300      	moveq	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	e015      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d109      	bne.n	8006ed8 <HAL_TIM_PWM_Start+0x8c>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf14      	ite	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	2300      	moveq	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e008      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e09c      	b.n	800702c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_PWM_Start+0xb6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f00:	e023      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_PWM_Start+0xc6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f10:	e01b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0xd6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xe6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xf6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fe68 	bl	8007c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a35      	ldr	r2, [pc, #212]	; (8007034 <HAL_TIM_PWM_Start+0x1e8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x13e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a34      	ldr	r2, [pc, #208]	; (8007038 <HAL_TIM_PWM_Start+0x1ec>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x13e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a32      	ldr	r2, [pc, #200]	; (800703c <HAL_TIM_PWM_Start+0x1f0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x13e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a31      	ldr	r2, [pc, #196]	; (8007040 <HAL_TIM_PWM_Start+0x1f4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x13e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2f      	ldr	r2, [pc, #188]	; (8007044 <HAL_TIM_PWM_Start+0x1f8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d101      	bne.n	8006f8e <HAL_TIM_PWM_Start+0x142>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_TIM_PWM_Start+0x144>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_TIM_PWM_Start+0x1e8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01d      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d018      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_TIM_PWM_Start+0x1fc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_TIM_PWM_Start+0x200>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <HAL_TIM_PWM_Start+0x204>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_TIM_PWM_Start+0x1ec>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIM_PWM_Start+0x19e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <HAL_TIM_PWM_Start+0x1f0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d115      	bne.n	8007016 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	4b18      	ldr	r3, [pc, #96]	; (8007054 <HAL_TIM_PWM_Start+0x208>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d015      	beq.n	8007028 <HAL_TIM_PWM_Start+0x1dc>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007002:	d011      	beq.n	8007028 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007014:	e008      	b.n	8007028 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e000      	b.n	800702a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007028:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	00010007 	.word	0x00010007

08007058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007072:	2302      	movs	r3, #2
 8007074:	e0ff      	b.n	8007276 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b14      	cmp	r3, #20
 8007082:	f200 80f0 	bhi.w	8007266 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007086:	a201      	add	r2, pc, #4	; (adr r2, 800708c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	080070e1 	.word	0x080070e1
 8007090:	08007267 	.word	0x08007267
 8007094:	08007267 	.word	0x08007267
 8007098:	08007267 	.word	0x08007267
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007267 	.word	0x08007267
 80070a4:	08007267 	.word	0x08007267
 80070a8:	08007267 	.word	0x08007267
 80070ac:	08007163 	.word	0x08007163
 80070b0:	08007267 	.word	0x08007267
 80070b4:	08007267 	.word	0x08007267
 80070b8:	08007267 	.word	0x08007267
 80070bc:	080071a3 	.word	0x080071a3
 80070c0:	08007267 	.word	0x08007267
 80070c4:	08007267 	.word	0x08007267
 80070c8:	08007267 	.word	0x08007267
 80070cc:	080071e5 	.word	0x080071e5
 80070d0:	08007267 	.word	0x08007267
 80070d4:	08007267 	.word	0x08007267
 80070d8:	08007267 	.word	0x08007267
 80070dc:	08007225 	.word	0x08007225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fa2e 	bl	8007548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0208 	orr.w	r2, r2, #8
 80070fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0204 	bic.w	r2, r2, #4
 800710a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6999      	ldr	r1, [r3, #24]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	619a      	str	r2, [r3, #24]
      break;
 800711e:	e0a5      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fa9e 	bl	8007668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800713a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800714a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6999      	ldr	r1, [r3, #24]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	021a      	lsls	r2, r3, #8
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	619a      	str	r2, [r3, #24]
      break;
 8007160:	e084      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fb07 	bl	800777c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0208 	orr.w	r2, r2, #8
 800717c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0204 	bic.w	r2, r2, #4
 800718c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69d9      	ldr	r1, [r3, #28]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	61da      	str	r2, [r3, #28]
      break;
 80071a0:	e064      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fb6f 	bl	800788c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69d9      	ldr	r1, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	021a      	lsls	r2, r3, #8
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	61da      	str	r2, [r3, #28]
      break;
 80071e2:	e043      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fbb8 	bl	8007960 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0208 	orr.w	r2, r2, #8
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0204 	bic.w	r2, r2, #4
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007222:	e023      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fbfc 	bl	8007a28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800723e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	021a      	lsls	r2, r3, #8
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007264:	e002      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
      break;
 800726a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_TIM_ConfigClockSource+0x1c>
 8007298:	2302      	movs	r3, #2
 800729a:	e0b6      	b.n	800740a <HAL_TIM_ConfigClockSource+0x18a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d8:	d03e      	beq.n	8007358 <HAL_TIM_ConfigClockSource+0xd8>
 80072da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072de:	f200 8087 	bhi.w	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 80072e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e6:	f000 8086 	beq.w	80073f6 <HAL_TIM_ConfigClockSource+0x176>
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ee:	d87f      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 80072f0:	2b70      	cmp	r3, #112	; 0x70
 80072f2:	d01a      	beq.n	800732a <HAL_TIM_ConfigClockSource+0xaa>
 80072f4:	2b70      	cmp	r3, #112	; 0x70
 80072f6:	d87b      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d050      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x11e>
 80072fc:	2b60      	cmp	r3, #96	; 0x60
 80072fe:	d877      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d03c      	beq.n	800737e <HAL_TIM_ConfigClockSource+0xfe>
 8007304:	2b50      	cmp	r3, #80	; 0x50
 8007306:	d873      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d058      	beq.n	80073be <HAL_TIM_ConfigClockSource+0x13e>
 800730c:	2b40      	cmp	r3, #64	; 0x40
 800730e:	d86f      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 8007310:	2b30      	cmp	r3, #48	; 0x30
 8007312:	d064      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x15e>
 8007314:	2b30      	cmp	r3, #48	; 0x30
 8007316:	d86b      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d060      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x15e>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d867      	bhi.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d05c      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x15e>
 8007324:	2b10      	cmp	r3, #16
 8007326:	d05a      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x15e>
 8007328:	e062      	b.n	80073f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	f000 fc55 	bl	8007be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800734c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	609a      	str	r2, [r3, #8]
      break;
 8007356:	e04f      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007368:	f000 fc3e 	bl	8007be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800737a:	609a      	str	r2, [r3, #8]
      break;
 800737c:	e03c      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800738a:	461a      	mov	r2, r3
 800738c:	f000 fbb2 	bl	8007af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2150      	movs	r1, #80	; 0x50
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fc0b 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 800739c:	e02c      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073aa:	461a      	mov	r2, r3
 80073ac:	f000 fbd1 	bl	8007b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2160      	movs	r1, #96	; 0x60
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fbfb 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80073bc:	e01c      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fb92 	bl	8007af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2140      	movs	r1, #64	; 0x40
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fbeb 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80073dc:	e00c      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f000 fbe2 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80073ee:	e003      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
      break;
 80073f4:	e000      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a40      	ldr	r2, [pc, #256]	; (8007528 <TIM_Base_SetConfig+0x114>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d013      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d00f      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a3d      	ldr	r2, [pc, #244]	; (800752c <TIM_Base_SetConfig+0x118>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00b      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a3c      	ldr	r2, [pc, #240]	; (8007530 <TIM_Base_SetConfig+0x11c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a3b      	ldr	r2, [pc, #236]	; (8007534 <TIM_Base_SetConfig+0x120>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a3a      	ldr	r2, [pc, #232]	; (8007538 <TIM_Base_SetConfig+0x124>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d108      	bne.n	8007466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2f      	ldr	r2, [pc, #188]	; (8007528 <TIM_Base_SetConfig+0x114>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01f      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007474:	d01b      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <TIM_Base_SetConfig+0x118>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d017      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2b      	ldr	r2, [pc, #172]	; (8007530 <TIM_Base_SetConfig+0x11c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <TIM_Base_SetConfig+0x120>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00f      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a29      	ldr	r2, [pc, #164]	; (8007538 <TIM_Base_SetConfig+0x124>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00b      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a28      	ldr	r2, [pc, #160]	; (800753c <TIM_Base_SetConfig+0x128>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d007      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a27      	ldr	r2, [pc, #156]	; (8007540 <TIM_Base_SetConfig+0x12c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_Base_SetConfig+0x9a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a26      	ldr	r2, [pc, #152]	; (8007544 <TIM_Base_SetConfig+0x130>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d108      	bne.n	80074c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <TIM_Base_SetConfig+0x114>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00f      	beq.n	800750c <TIM_Base_SetConfig+0xf8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a12      	ldr	r2, [pc, #72]	; (8007538 <TIM_Base_SetConfig+0x124>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00b      	beq.n	800750c <TIM_Base_SetConfig+0xf8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a11      	ldr	r2, [pc, #68]	; (800753c <TIM_Base_SetConfig+0x128>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d007      	beq.n	800750c <TIM_Base_SetConfig+0xf8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a10      	ldr	r2, [pc, #64]	; (8007540 <TIM_Base_SetConfig+0x12c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_Base_SetConfig+0xf8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a0f      	ldr	r2, [pc, #60]	; (8007544 <TIM_Base_SetConfig+0x130>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d103      	bne.n	8007514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	615a      	str	r2, [r3, #20]
}
 800751a:	bf00      	nop
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40000400 	.word	0x40000400
 8007530:	40000800 	.word	0x40000800
 8007534:	40000c00 	.word	0x40000c00
 8007538:	40013400 	.word	0x40013400
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800

08007548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f023 0201 	bic.w	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 0302 	bic.w	r3, r3, #2
 8007594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a2c      	ldr	r2, [pc, #176]	; (8007654 <TIM_OC1_SetConfig+0x10c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_OC1_SetConfig+0x80>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <TIM_OC1_SetConfig+0x110>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_OC1_SetConfig+0x80>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2a      	ldr	r2, [pc, #168]	; (800765c <TIM_OC1_SetConfig+0x114>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_OC1_SetConfig+0x80>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a29      	ldr	r2, [pc, #164]	; (8007660 <TIM_OC1_SetConfig+0x118>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_OC1_SetConfig+0x80>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a28      	ldr	r2, [pc, #160]	; (8007664 <TIM_OC1_SetConfig+0x11c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d10c      	bne.n	80075e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f023 0308 	bic.w	r3, r3, #8
 80075ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 0304 	bic.w	r3, r3, #4
 80075e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <TIM_OC1_SetConfig+0x10c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00f      	beq.n	800760a <TIM_OC1_SetConfig+0xc2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <TIM_OC1_SetConfig+0x110>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00b      	beq.n	800760a <TIM_OC1_SetConfig+0xc2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <TIM_OC1_SetConfig+0x114>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_OC1_SetConfig+0xc2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <TIM_OC1_SetConfig+0x118>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC1_SetConfig+0xc2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <TIM_OC1_SetConfig+0x11c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d111      	bne.n	800762e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	621a      	str	r2, [r3, #32]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800

08007668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f023 0210 	bic.w	r2, r3, #16
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0320 	bic.w	r3, r3, #32
 80076b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a28      	ldr	r2, [pc, #160]	; (8007768 <TIM_OC2_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC2_SetConfig+0x6c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a27      	ldr	r2, [pc, #156]	; (800776c <TIM_OC2_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d10d      	bne.n	80076f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1d      	ldr	r2, [pc, #116]	; (8007768 <TIM_OC2_SetConfig+0x100>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_OC2_SetConfig+0xb0>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	; (800776c <TIM_OC2_SetConfig+0x104>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_OC2_SetConfig+0xb0>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <TIM_OC2_SetConfig+0x108>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_OC2_SetConfig+0xb0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <TIM_OC2_SetConfig+0x10c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC2_SetConfig+0xb0>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a19      	ldr	r2, [pc, #100]	; (8007778 <TIM_OC2_SetConfig+0x110>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d113      	bne.n	8007740 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800771e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40013400 	.word	0x40013400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <TIM_OC3_SetConfig+0xfc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_OC3_SetConfig+0x6a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a26      	ldr	r2, [pc, #152]	; (800787c <TIM_OC3_SetConfig+0x100>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10d      	bne.n	8007802 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1c      	ldr	r2, [pc, #112]	; (8007878 <TIM_OC3_SetConfig+0xfc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xae>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1b      	ldr	r2, [pc, #108]	; (800787c <TIM_OC3_SetConfig+0x100>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xae>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1a      	ldr	r2, [pc, #104]	; (8007880 <TIM_OC3_SetConfig+0x104>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xae>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a19      	ldr	r2, [pc, #100]	; (8007884 <TIM_OC3_SetConfig+0x108>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xae>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <TIM_OC3_SetConfig+0x10c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800

0800788c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a18      	ldr	r2, [pc, #96]	; (800794c <TIM_OC4_SetConfig+0xc0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00f      	beq.n	8007910 <TIM_OC4_SetConfig+0x84>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a17      	ldr	r2, [pc, #92]	; (8007950 <TIM_OC4_SetConfig+0xc4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_OC4_SetConfig+0x84>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a16      	ldr	r2, [pc, #88]	; (8007954 <TIM_OC4_SetConfig+0xc8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_OC4_SetConfig+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a15      	ldr	r2, [pc, #84]	; (8007958 <TIM_OC4_SetConfig+0xcc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC4_SetConfig+0x84>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a14      	ldr	r2, [pc, #80]	; (800795c <TIM_OC4_SetConfig+0xd0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d109      	bne.n	8007924 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	019b      	lsls	r3, r3, #6
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800

08007960 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a17      	ldr	r2, [pc, #92]	; (8007a14 <TIM_OC5_SetConfig+0xb4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_OC5_SetConfig+0x7a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <TIM_OC5_SetConfig+0xb8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_OC5_SetConfig+0x7a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <TIM_OC5_SetConfig+0xbc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_OC5_SetConfig+0x7a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a14      	ldr	r2, [pc, #80]	; (8007a20 <TIM_OC5_SetConfig+0xc0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_OC5_SetConfig+0x7a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <TIM_OC5_SetConfig+0xc4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d109      	bne.n	80079ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40013400 	.word	0x40013400
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	051b      	lsls	r3, r3, #20
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <TIM_OC6_SetConfig+0xb8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00f      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x7c>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <TIM_OC6_SetConfig+0xbc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00b      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x7c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <TIM_OC6_SetConfig+0xc0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d007      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <TIM_OC6_SetConfig+0xc4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d003      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x7c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <TIM_OC6_SetConfig+0xc8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d109      	bne.n	8007ab8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40013400 	.word	0x40013400
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40014400 	.word	0x40014400
 8007af0:	40014800 	.word	0x40014800

08007af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f023 0201 	bic.w	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f023 030a 	bic.w	r3, r3, #10
 8007b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	f023 0210 	bic.w	r2, r3, #16
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f043 0307 	orr.w	r3, r3, #7
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	021a      	lsls	r2, r3, #8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1a      	ldr	r2, [r3, #32]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a1a      	ldr	r2, [r3, #32]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c60:	431a      	orrs	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_TIMEx_PWMN_Start+0x24>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	e022      	b.n	8007cde <HAL_TIMEx_PWMN_Start+0x6a>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d109      	bne.n	8007cb2 <HAL_TIMEx_PWMN_Start+0x3e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	e015      	b.n	8007cde <HAL_TIMEx_PWMN_Start+0x6a>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d109      	bne.n	8007ccc <HAL_TIMEx_PWMN_Start+0x58>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e008      	b.n	8007cde <HAL_TIMEx_PWMN_Start+0x6a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e06e      	b.n	8007dc4 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIMEx_PWMN_Start+0x82>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf4:	e013      	b.n	8007d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIMEx_PWMN_Start+0x92>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d04:	e00b      	b.n	8007d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIMEx_PWMN_Start+0xa2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d14:	e003      	b.n	8007d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2204      	movs	r2, #4
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f964 	bl	8007ff4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a22      	ldr	r2, [pc, #136]	; (8007dcc <HAL_TIMEx_PWMN_Start+0x158>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01d      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4e:	d018      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	; (8007dd4 <HAL_TIMEx_PWMN_Start+0x160>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a1b      	ldr	r2, [pc, #108]	; (8007dd8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1a      	ldr	r2, [pc, #104]	; (8007ddc <HAL_TIMEx_PWMN_Start+0x168>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIMEx_PWMN_Start+0x10e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d115      	bne.n	8007dae <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <HAL_TIMEx_PWMN_Start+0x170>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d015      	beq.n	8007dc0 <HAL_TIMEx_PWMN_Start+0x14c>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9a:	d011      	beq.n	8007dc0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dac:	e008      	b.n	8007dc0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e000      	b.n	8007dc2 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40000c00 	.word	0x40000c00
 8007ddc:	40013400 	.word	0x40013400
 8007de0:	40014000 	.word	0x40014000
 8007de4:	00010007 	.word	0x00010007

08007de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e068      	b.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2e      	ldr	r2, [pc, #184]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2d      	ldr	r2, [pc, #180]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d108      	bne.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e72:	d018      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a14      	ldr	r2, [pc, #80]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d10c      	bne.n	8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40013400 	.word	0x40013400
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40014000 	.word	0x40014000

08007ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e065      	b.n	8007fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a16      	ldr	r2, [pc, #88]	; (8007fec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a14      	ldr	r2, [pc, #80]	; (8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d115      	bne.n	8007fce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	051b      	lsls	r3, r3, #20
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40013400 	.word	0x40013400

08007ff4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	2204      	movs	r2, #4
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a1a      	ldr	r2, [r3, #32]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	43db      	mvns	r3, r3
 8008016:	401a      	ands	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1a      	ldr	r2, [r3, #32]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	fa01 f303 	lsl.w	r3, r1, r3
 800802c:	431a      	orrs	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	621a      	str	r2, [r3, #32]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e042      	b.n	80080d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fa f89a 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	; 0x24
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0201 	bic.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fbb3 	bl	80087f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8b4 	bl	80081fc <UART_SetConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e01b      	b.n	80080d6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fc32 	bl	8008938 <UART_CheckIdleState>
 80080d4:	4603      	mov	r3, r0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b08a      	sub	sp, #40	; 0x28
 80080e2:	af02      	add	r7, sp, #8
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d17c      	bne.n	80081f2 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_UART_Transmit+0x26>
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e075      	b.n	80081f4 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2221      	movs	r2, #33	; 0x21
 8008114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008118:	f7fa faa6 	bl	8002668 <HAL_GetTick>
 800811c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008136:	d108      	bne.n	800814a <HAL_UART_Transmit+0x6c>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	e003      	b.n	8008152 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008152:	e031      	b.n	80081b8 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fc94 	bl	8008a8c <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e03e      	b.n	80081f4 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	881a      	ldrh	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008188:	b292      	uxth	r2, r2
 800818a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	3302      	adds	r3, #2
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	e008      	b.n	80081a6 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	b292      	uxth	r2, r2
 800819e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1c7      	bne.n	8008154 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fc5c 	bl	8008a8c <UART_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e006      	b.n	80081f4 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
  }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008200:	b08c      	sub	sp, #48	; 0x30
 8008202:	af00      	add	r7, sp, #0
 8008204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	431a      	orrs	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	431a      	orrs	r2, r3
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	4313      	orrs	r3, r2
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4baa      	ldr	r3, [pc, #680]	; (80084d4 <UART_SetConfig+0x2d8>)
 800822c:	4013      	ands	r3, r2
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008234:	430b      	orrs	r3, r1
 8008236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a9f      	ldr	r2, [pc, #636]	; (80084d8 <UART_SetConfig+0x2dc>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008264:	4313      	orrs	r3, r2
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008272:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800827c:	430b      	orrs	r3, r1
 800827e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	f023 010f 	bic.w	r1, r3, #15
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a90      	ldr	r2, [pc, #576]	; (80084dc <UART_SetConfig+0x2e0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d125      	bne.n	80082ec <UART_SetConfig+0xf0>
 80082a0:	4b8f      	ldr	r3, [pc, #572]	; (80084e0 <UART_SetConfig+0x2e4>)
 80082a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d81a      	bhi.n	80082e4 <UART_SetConfig+0xe8>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0xb8>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e116      	b.n	80084fa <UART_SetConfig+0x2fe>
 80082cc:	2302      	movs	r3, #2
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d2:	e112      	b.n	80084fa <UART_SetConfig+0x2fe>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082da:	e10e      	b.n	80084fa <UART_SetConfig+0x2fe>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e10a      	b.n	80084fa <UART_SetConfig+0x2fe>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e106      	b.n	80084fa <UART_SetConfig+0x2fe>
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a7c      	ldr	r2, [pc, #496]	; (80084e4 <UART_SetConfig+0x2e8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d138      	bne.n	8008368 <UART_SetConfig+0x16c>
 80082f6:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <UART_SetConfig+0x2e4>)
 80082f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fc:	f003 030c 	and.w	r3, r3, #12
 8008300:	2b0c      	cmp	r3, #12
 8008302:	d82d      	bhi.n	8008360 <UART_SetConfig+0x164>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <UART_SetConfig+0x110>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	08008341 	.word	0x08008341
 8008310:	08008361 	.word	0x08008361
 8008314:	08008361 	.word	0x08008361
 8008318:	08008361 	.word	0x08008361
 800831c:	08008351 	.word	0x08008351
 8008320:	08008361 	.word	0x08008361
 8008324:	08008361 	.word	0x08008361
 8008328:	08008361 	.word	0x08008361
 800832c:	08008349 	.word	0x08008349
 8008330:	08008361 	.word	0x08008361
 8008334:	08008361 	.word	0x08008361
 8008338:	08008361 	.word	0x08008361
 800833c:	08008359 	.word	0x08008359
 8008340:	2300      	movs	r3, #0
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e0d8      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008348:	2302      	movs	r3, #2
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e0d4      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008350:	2304      	movs	r3, #4
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e0d0      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008358:	2308      	movs	r3, #8
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e0cc      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008360:	2310      	movs	r3, #16
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e0c8      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a5e      	ldr	r2, [pc, #376]	; (80084e8 <UART_SetConfig+0x2ec>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d125      	bne.n	80083be <UART_SetConfig+0x1c2>
 8008372:	4b5b      	ldr	r3, [pc, #364]	; (80084e0 <UART_SetConfig+0x2e4>)
 8008374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d016      	beq.n	80083ae <UART_SetConfig+0x1b2>
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d818      	bhi.n	80083b6 <UART_SetConfig+0x1ba>
 8008384:	2b20      	cmp	r3, #32
 8008386:	d00a      	beq.n	800839e <UART_SetConfig+0x1a2>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d814      	bhi.n	80083b6 <UART_SetConfig+0x1ba>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <UART_SetConfig+0x19a>
 8008390:	2b10      	cmp	r3, #16
 8008392:	d008      	beq.n	80083a6 <UART_SetConfig+0x1aa>
 8008394:	e00f      	b.n	80083b6 <UART_SetConfig+0x1ba>
 8008396:	2300      	movs	r3, #0
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839c:	e0ad      	b.n	80084fa <UART_SetConfig+0x2fe>
 800839e:	2302      	movs	r3, #2
 80083a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a4:	e0a9      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083a6:	2304      	movs	r3, #4
 80083a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ac:	e0a5      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083ae:	2308      	movs	r3, #8
 80083b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b4:	e0a1      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083b6:	2310      	movs	r3, #16
 80083b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083bc:	e09d      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a4a      	ldr	r2, [pc, #296]	; (80084ec <UART_SetConfig+0x2f0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d125      	bne.n	8008414 <UART_SetConfig+0x218>
 80083c8:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <UART_SetConfig+0x2e4>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083d2:	2bc0      	cmp	r3, #192	; 0xc0
 80083d4:	d016      	beq.n	8008404 <UART_SetConfig+0x208>
 80083d6:	2bc0      	cmp	r3, #192	; 0xc0
 80083d8:	d818      	bhi.n	800840c <UART_SetConfig+0x210>
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d00a      	beq.n	80083f4 <UART_SetConfig+0x1f8>
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d814      	bhi.n	800840c <UART_SetConfig+0x210>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <UART_SetConfig+0x1f0>
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d008      	beq.n	80083fc <UART_SetConfig+0x200>
 80083ea:	e00f      	b.n	800840c <UART_SetConfig+0x210>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e082      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e07e      	b.n	80084fa <UART_SetConfig+0x2fe>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e07a      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e076      	b.n	80084fa <UART_SetConfig+0x2fe>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008412:	e072      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a35      	ldr	r2, [pc, #212]	; (80084f0 <UART_SetConfig+0x2f4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d12a      	bne.n	8008474 <UART_SetConfig+0x278>
 800841e:	4b30      	ldr	r3, [pc, #192]	; (80084e0 <UART_SetConfig+0x2e4>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800842c:	d01a      	beq.n	8008464 <UART_SetConfig+0x268>
 800842e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008432:	d81b      	bhi.n	800846c <UART_SetConfig+0x270>
 8008434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008438:	d00c      	beq.n	8008454 <UART_SetConfig+0x258>
 800843a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843e:	d815      	bhi.n	800846c <UART_SetConfig+0x270>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <UART_SetConfig+0x250>
 8008444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008448:	d008      	beq.n	800845c <UART_SetConfig+0x260>
 800844a:	e00f      	b.n	800846c <UART_SetConfig+0x270>
 800844c:	2300      	movs	r3, #0
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e052      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008454:	2302      	movs	r3, #2
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845a:	e04e      	b.n	80084fa <UART_SetConfig+0x2fe>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e04a      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e046      	b.n	80084fa <UART_SetConfig+0x2fe>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e042      	b.n	80084fa <UART_SetConfig+0x2fe>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <UART_SetConfig+0x2dc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d13a      	bne.n	80084f4 <UART_SetConfig+0x2f8>
 800847e:	4b18      	ldr	r3, [pc, #96]	; (80084e0 <UART_SetConfig+0x2e4>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848c:	d01a      	beq.n	80084c4 <UART_SetConfig+0x2c8>
 800848e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008492:	d81b      	bhi.n	80084cc <UART_SetConfig+0x2d0>
 8008494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008498:	d00c      	beq.n	80084b4 <UART_SetConfig+0x2b8>
 800849a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849e:	d815      	bhi.n	80084cc <UART_SetConfig+0x2d0>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <UART_SetConfig+0x2b0>
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d008      	beq.n	80084bc <UART_SetConfig+0x2c0>
 80084aa:	e00f      	b.n	80084cc <UART_SetConfig+0x2d0>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e022      	b.n	80084fa <UART_SetConfig+0x2fe>
 80084b4:	2302      	movs	r3, #2
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e01e      	b.n	80084fa <UART_SetConfig+0x2fe>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e01a      	b.n	80084fa <UART_SetConfig+0x2fe>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e016      	b.n	80084fa <UART_SetConfig+0x2fe>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e012      	b.n	80084fa <UART_SetConfig+0x2fe>
 80084d4:	cfff69f3 	.word	0xcfff69f3
 80084d8:	40008000 	.word	0x40008000
 80084dc:	40013800 	.word	0x40013800
 80084e0:	40021000 	.word	0x40021000
 80084e4:	40004400 	.word	0x40004400
 80084e8:	40004800 	.word	0x40004800
 80084ec:	40004c00 	.word	0x40004c00
 80084f0:	40005000 	.word	0x40005000
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4aae      	ldr	r2, [pc, #696]	; (80087b8 <UART_SetConfig+0x5bc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	f040 8097 	bne.w	8008634 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800850a:	2b08      	cmp	r3, #8
 800850c:	d823      	bhi.n	8008556 <UART_SetConfig+0x35a>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x318>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008539 	.word	0x08008539
 8008518:	08008557 	.word	0x08008557
 800851c:	08008541 	.word	0x08008541
 8008520:	08008557 	.word	0x08008557
 8008524:	08008547 	.word	0x08008547
 8008528:	08008557 	.word	0x08008557
 800852c:	08008557 	.word	0x08008557
 8008530:	08008557 	.word	0x08008557
 8008534:	0800854f 	.word	0x0800854f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008538:	f7fd fd18 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 800853c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800853e:	e010      	b.n	8008562 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008540:	4b9e      	ldr	r3, [pc, #632]	; (80087bc <UART_SetConfig+0x5c0>)
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008544:	e00d      	b.n	8008562 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008546:	f7fd fc79 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800854a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800854c:	e009      	b.n	8008562 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008554:	e005      	b.n	8008562 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8130 	beq.w	80087ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	4a94      	ldr	r2, [pc, #592]	; (80087c0 <UART_SetConfig+0x5c4>)
 8008570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008574:	461a      	mov	r2, r3
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	fbb3 f3f2 	udiv	r3, r3, r2
 800857c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	4413      	add	r3, r2
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	429a      	cmp	r2, r3
 800858c:	d305      	bcc.n	800859a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	429a      	cmp	r2, r3
 8008598:	d903      	bls.n	80085a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085a0:	e113      	b.n	80087ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	2200      	movs	r2, #0
 80085a6:	60bb      	str	r3, [r7, #8]
 80085a8:	60fa      	str	r2, [r7, #12]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	4a84      	ldr	r2, [pc, #528]	; (80087c0 <UART_SetConfig+0x5c4>)
 80085b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2200      	movs	r2, #0
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085c4:	f7f8 faba 	bl	8000b3c <__aeabi_uldivmod>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	020b      	lsls	r3, r1, #8
 80085da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085de:	0202      	lsls	r2, r0, #8
 80085e0:	6979      	ldr	r1, [r7, #20]
 80085e2:	6849      	ldr	r1, [r1, #4]
 80085e4:	0849      	lsrs	r1, r1, #1
 80085e6:	2000      	movs	r0, #0
 80085e8:	460c      	mov	r4, r1
 80085ea:	4605      	mov	r5, r0
 80085ec:	eb12 0804 	adds.w	r8, r2, r4
 80085f0:	eb43 0905 	adc.w	r9, r3, r5
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	469a      	mov	sl, r3
 80085fc:	4693      	mov	fp, r2
 80085fe:	4652      	mov	r2, sl
 8008600:	465b      	mov	r3, fp
 8008602:	4640      	mov	r0, r8
 8008604:	4649      	mov	r1, r9
 8008606:	f7f8 fa99 	bl	8000b3c <__aeabi_uldivmod>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4613      	mov	r3, r2
 8008610:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008618:	d308      	bcc.n	800862c <UART_SetConfig+0x430>
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008620:	d204      	bcs.n	800862c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a3a      	ldr	r2, [r7, #32]
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	e0ce      	b.n	80087ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008632:	e0ca      	b.n	80087ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863c:	d166      	bne.n	800870c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800863e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008642:	2b08      	cmp	r3, #8
 8008644:	d827      	bhi.n	8008696 <UART_SetConfig+0x49a>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <UART_SetConfig+0x450>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008671 	.word	0x08008671
 8008650:	08008679 	.word	0x08008679
 8008654:	08008681 	.word	0x08008681
 8008658:	08008697 	.word	0x08008697
 800865c:	08008687 	.word	0x08008687
 8008660:	08008697 	.word	0x08008697
 8008664:	08008697 	.word	0x08008697
 8008668:	08008697 	.word	0x08008697
 800866c:	0800868f 	.word	0x0800868f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008670:	f7fd fc7c 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8008674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008676:	e014      	b.n	80086a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008678:	f7fd fc8e 	bl	8005f98 <HAL_RCC_GetPCLK2Freq>
 800867c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800867e:	e010      	b.n	80086a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008680:	4b4e      	ldr	r3, [pc, #312]	; (80087bc <UART_SetConfig+0x5c0>)
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008684:	e00d      	b.n	80086a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008686:	f7fd fbd9 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800868a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800868c:	e009      	b.n	80086a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008694:	e005      	b.n	80086a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8090 	beq.w	80087ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	4a44      	ldr	r2, [pc, #272]	; (80087c0 <UART_SetConfig+0x5c4>)
 80086b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086bc:	005a      	lsls	r2, r3, #1
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d916      	bls.n	8008704 <UART_SetConfig+0x508>
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d212      	bcs.n	8008704 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f023 030f 	bic.w	r3, r3, #15
 80086e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	8bfb      	ldrh	r3, [r7, #30]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	8bfa      	ldrh	r2, [r7, #30]
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e062      	b.n	80087ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800870a:	e05e      	b.n	80087ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800870c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008710:	2b08      	cmp	r3, #8
 8008712:	d828      	bhi.n	8008766 <UART_SetConfig+0x56a>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <UART_SetConfig+0x520>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	08008741 	.word	0x08008741
 8008720:	08008749 	.word	0x08008749
 8008724:	08008751 	.word	0x08008751
 8008728:	08008767 	.word	0x08008767
 800872c:	08008757 	.word	0x08008757
 8008730:	08008767 	.word	0x08008767
 8008734:	08008767 	.word	0x08008767
 8008738:	08008767 	.word	0x08008767
 800873c:	0800875f 	.word	0x0800875f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008740:	f7fd fc14 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008746:	e014      	b.n	8008772 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008748:	f7fd fc26 	bl	8005f98 <HAL_RCC_GetPCLK2Freq>
 800874c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800874e:	e010      	b.n	8008772 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008750:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <UART_SetConfig+0x5c0>)
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008754:	e00d      	b.n	8008772 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008756:	f7fd fb71 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800875a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800875c:	e009      	b.n	8008772 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008764:	e005      	b.n	8008772 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008770:	bf00      	nop
    }

    if (pclk != 0U)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d028      	beq.n	80087ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	4a10      	ldr	r2, [pc, #64]	; (80087c0 <UART_SetConfig+0x5c4>)
 800877e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008782:	461a      	mov	r2, r3
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	fbb3 f2f2 	udiv	r2, r3, r2
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	441a      	add	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d910      	bls.n	80087c4 <UART_SetConfig+0x5c8>
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d20c      	bcs.n	80087c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	60da      	str	r2, [r3, #12]
 80087b4:	e009      	b.n	80087ca <UART_SetConfig+0x5ce>
 80087b6:	bf00      	nop
 80087b8:	40008000 	.word	0x40008000
 80087bc:	00f42400 	.word	0x00f42400
 80087c0:	080098c4 	.word	0x080098c4
      }
      else
      {
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2200      	movs	r2, #0
 80087de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80087e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3730      	adds	r7, #48	; 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00a      	beq.n	800881e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01a      	beq.n	800890a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f2:	d10a      	bne.n	800890a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b098      	sub	sp, #96	; 0x60
 800893c:	af02      	add	r7, sp, #8
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008948:	f7f9 fe8e 	bl	8002668 <HAL_GetTick>
 800894c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b08      	cmp	r3, #8
 800895a:	d12f      	bne.n	80089bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800895c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008964:	2200      	movs	r2, #0
 8008966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f88e 	bl	8008a8c <UART_WaitOnFlagUntilTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d022      	beq.n	80089bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800898a:	653b      	str	r3, [r7, #80]	; 0x50
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008994:	647b      	str	r3, [r7, #68]	; 0x44
 8008996:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800899a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e6      	bne.n	8008976 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e063      	b.n	8008a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d149      	bne.n	8008a5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d2:	2200      	movs	r2, #0
 80089d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f857 	bl	8008a8c <UART_WaitOnFlagUntilTimeout>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d03c      	beq.n	8008a5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	623b      	str	r3, [r7, #32]
   return(result);
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a02:	633b      	str	r3, [r7, #48]	; 0x30
 8008a04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e6      	bne.n	80089e4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a36:	61fa      	str	r2, [r7, #28]
 8008a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	617b      	str	r3, [r7, #20]
   return(result);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e5      	bne.n	8008a16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e012      	b.n	8008a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3758      	adds	r7, #88	; 0x58
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9c:	e049      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa4:	d045      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa6:	f7f9 fddf 	bl	8002668 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d302      	bcc.n	8008abc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e048      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d031      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d110      	bne.n	8008afe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f838 	bl	8008b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2208      	movs	r2, #8
 8008aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e029      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0c:	d111      	bne.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f81e 	bl	8008b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e00f      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69da      	ldr	r2, [r3, #28]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	bf0c      	ite	eq
 8008b42:	2301      	moveq	r3, #1
 8008b44:	2300      	movne	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d0a6      	beq.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b095      	sub	sp, #84	; 0x54
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b80:	643b      	str	r3, [r7, #64]	; 0x40
 8008b82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e6      	bne.n	8008b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008baa:	f023 0301 	bic.w	r3, r3, #1
 8008bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e3      	bne.n	8008b94 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d118      	bne.n	8008c06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f023 0310 	bic.w	r3, r3, #16
 8008be8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6979      	ldr	r1, [r7, #20]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e6      	bne.n	8008bd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c1a:	bf00      	nop
 8008c1c:	3754      	adds	r7, #84	; 0x54
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e027      	b.n	8008c8c <HAL_UARTEx_DisableFifoMode+0x66>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2224      	movs	r2, #36	; 0x24
 8008c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e02d      	b.n	8008d0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2224      	movs	r2, #36	; 0x24
 8008cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f84f 	bl	8008d90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e02d      	b.n	8008d88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2224      	movs	r2, #36	; 0x24
 8008d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f811 	bl	8008d90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d108      	bne.n	8008db2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008db0:	e031      	b.n	8008e16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008db2:	2308      	movs	r3, #8
 8008db4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008db6:	2308      	movs	r3, #8
 8008db8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	0e5b      	lsrs	r3, r3, #25
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	0f5b      	lsrs	r3, r3, #29
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	7b3a      	ldrb	r2, [r7, #12]
 8008dde:	4911      	ldr	r1, [pc, #68]	; (8008e24 <UARTEx_SetNbDataToProcess+0x94>)
 8008de0:	5c8a      	ldrb	r2, [r1, r2]
 8008de2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008de6:	7b3a      	ldrb	r2, [r7, #12]
 8008de8:	490f      	ldr	r1, [pc, #60]	; (8008e28 <UARTEx_SetNbDataToProcess+0x98>)
 8008dea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dec:	fb93 f3f2 	sdiv	r3, r3, r2
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	7b7a      	ldrb	r2, [r7, #13]
 8008dfc:	4909      	ldr	r1, [pc, #36]	; (8008e24 <UARTEx_SetNbDataToProcess+0x94>)
 8008dfe:	5c8a      	ldrb	r2, [r1, r2]
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e04:	7b7a      	ldrb	r2, [r7, #13]
 8008e06:	4908      	ldr	r1, [pc, #32]	; (8008e28 <UARTEx_SetNbDataToProcess+0x98>)
 8008e08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	080098dc 	.word	0x080098dc
 8008e28:	080098e4 	.word	0x080098e4

08008e2c <sniprintf>:
 8008e2c:	b40c      	push	{r2, r3}
 8008e2e:	b530      	push	{r4, r5, lr}
 8008e30:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <sniprintf+0x64>)
 8008e32:	1e0c      	subs	r4, r1, #0
 8008e34:	681d      	ldr	r5, [r3, #0]
 8008e36:	b09d      	sub	sp, #116	; 0x74
 8008e38:	da08      	bge.n	8008e4c <sniprintf+0x20>
 8008e3a:	238b      	movs	r3, #139	; 0x8b
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b01d      	add	sp, #116	; 0x74
 8008e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e48:	b002      	add	sp, #8
 8008e4a:	4770      	bx	lr
 8008e4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e54:	bf14      	ite	ne
 8008e56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e5a:	4623      	moveq	r3, r4
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	9307      	str	r3, [sp, #28]
 8008e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e64:	9002      	str	r0, [sp, #8]
 8008e66:	9006      	str	r0, [sp, #24]
 8008e68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e6e:	ab21      	add	r3, sp, #132	; 0x84
 8008e70:	a902      	add	r1, sp, #8
 8008e72:	4628      	mov	r0, r5
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	f000 f993 	bl	80091a0 <_svfiprintf_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	bfbc      	itt	lt
 8008e7e:	238b      	movlt	r3, #139	; 0x8b
 8008e80:	602b      	strlt	r3, [r5, #0]
 8008e82:	2c00      	cmp	r4, #0
 8008e84:	d0dd      	beq.n	8008e42 <sniprintf+0x16>
 8008e86:	9b02      	ldr	r3, [sp, #8]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e7d9      	b.n	8008e42 <sniprintf+0x16>
 8008e8e:	bf00      	nop
 8008e90:	20000058 	.word	0x20000058

08008e94 <memset>:
 8008e94:	4402      	add	r2, r0
 8008e96:	4603      	mov	r3, r0
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d100      	bne.n	8008e9e <memset+0xa>
 8008e9c:	4770      	bx	lr
 8008e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea2:	e7f9      	b.n	8008e98 <memset+0x4>

08008ea4 <__errno>:
 8008ea4:	4b01      	ldr	r3, [pc, #4]	; (8008eac <__errno+0x8>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000058 	.word	0x20000058

08008eb0 <__libc_init_array>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ee8 <__libc_init_array+0x38>)
 8008eb4:	4c0d      	ldr	r4, [pc, #52]	; (8008eec <__libc_init_array+0x3c>)
 8008eb6:	1b64      	subs	r4, r4, r5
 8008eb8:	10a4      	asrs	r4, r4, #2
 8008eba:	2600      	movs	r6, #0
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	d109      	bne.n	8008ed4 <__libc_init_array+0x24>
 8008ec0:	4d0b      	ldr	r5, [pc, #44]	; (8008ef0 <__libc_init_array+0x40>)
 8008ec2:	4c0c      	ldr	r4, [pc, #48]	; (8008ef4 <__libc_init_array+0x44>)
 8008ec4:	f000 fca4 	bl	8009810 <_init>
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	2600      	movs	r6, #0
 8008ece:	42a6      	cmp	r6, r4
 8008ed0:	d105      	bne.n	8008ede <__libc_init_array+0x2e>
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed8:	4798      	blx	r3
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7ee      	b.n	8008ebc <__libc_init_array+0xc>
 8008ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee2:	4798      	blx	r3
 8008ee4:	3601      	adds	r6, #1
 8008ee6:	e7f2      	b.n	8008ece <__libc_init_array+0x1e>
 8008ee8:	08009928 	.word	0x08009928
 8008eec:	08009928 	.word	0x08009928
 8008ef0:	08009928 	.word	0x08009928
 8008ef4:	0800992c 	.word	0x0800992c

08008ef8 <__retarget_lock_acquire_recursive>:
 8008ef8:	4770      	bx	lr

08008efa <__retarget_lock_release_recursive>:
 8008efa:	4770      	bx	lr

08008efc <_free_r>:
 8008efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d044      	beq.n	8008f8c <_free_r+0x90>
 8008f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f06:	9001      	str	r0, [sp, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f0e:	bfb8      	it	lt
 8008f10:	18e4      	addlt	r4, r4, r3
 8008f12:	f000 f8df 	bl	80090d4 <__malloc_lock>
 8008f16:	4a1e      	ldr	r2, [pc, #120]	; (8008f90 <_free_r+0x94>)
 8008f18:	9801      	ldr	r0, [sp, #4]
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	b933      	cbnz	r3, 8008f2c <_free_r+0x30>
 8008f1e:	6063      	str	r3, [r4, #4]
 8008f20:	6014      	str	r4, [r2, #0]
 8008f22:	b003      	add	sp, #12
 8008f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f28:	f000 b8da 	b.w	80090e0 <__malloc_unlock>
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d908      	bls.n	8008f42 <_free_r+0x46>
 8008f30:	6825      	ldr	r5, [r4, #0]
 8008f32:	1961      	adds	r1, r4, r5
 8008f34:	428b      	cmp	r3, r1
 8008f36:	bf01      	itttt	eq
 8008f38:	6819      	ldreq	r1, [r3, #0]
 8008f3a:	685b      	ldreq	r3, [r3, #4]
 8008f3c:	1949      	addeq	r1, r1, r5
 8008f3e:	6021      	streq	r1, [r4, #0]
 8008f40:	e7ed      	b.n	8008f1e <_free_r+0x22>
 8008f42:	461a      	mov	r2, r3
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	b10b      	cbz	r3, 8008f4c <_free_r+0x50>
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	d9fa      	bls.n	8008f42 <_free_r+0x46>
 8008f4c:	6811      	ldr	r1, [r2, #0]
 8008f4e:	1855      	adds	r5, r2, r1
 8008f50:	42a5      	cmp	r5, r4
 8008f52:	d10b      	bne.n	8008f6c <_free_r+0x70>
 8008f54:	6824      	ldr	r4, [r4, #0]
 8008f56:	4421      	add	r1, r4
 8008f58:	1854      	adds	r4, r2, r1
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	d1e0      	bne.n	8008f22 <_free_r+0x26>
 8008f60:	681c      	ldr	r4, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	6053      	str	r3, [r2, #4]
 8008f66:	440c      	add	r4, r1
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	e7da      	b.n	8008f22 <_free_r+0x26>
 8008f6c:	d902      	bls.n	8008f74 <_free_r+0x78>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	e7d6      	b.n	8008f22 <_free_r+0x26>
 8008f74:	6825      	ldr	r5, [r4, #0]
 8008f76:	1961      	adds	r1, r4, r5
 8008f78:	428b      	cmp	r3, r1
 8008f7a:	bf04      	itt	eq
 8008f7c:	6819      	ldreq	r1, [r3, #0]
 8008f7e:	685b      	ldreq	r3, [r3, #4]
 8008f80:	6063      	str	r3, [r4, #4]
 8008f82:	bf04      	itt	eq
 8008f84:	1949      	addeq	r1, r1, r5
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	6054      	str	r4, [r2, #4]
 8008f8a:	e7ca      	b.n	8008f22 <_free_r+0x26>
 8008f8c:	b003      	add	sp, #12
 8008f8e:	bd30      	pop	{r4, r5, pc}
 8008f90:	2000075c 	.word	0x2000075c

08008f94 <sbrk_aligned>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4e0e      	ldr	r6, [pc, #56]	; (8008fd0 <sbrk_aligned+0x3c>)
 8008f98:	460c      	mov	r4, r1
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	b911      	cbnz	r1, 8008fa6 <sbrk_aligned+0x12>
 8008fa0:	f000 fba6 	bl	80096f0 <_sbrk_r>
 8008fa4:	6030      	str	r0, [r6, #0]
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 fba1 	bl	80096f0 <_sbrk_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d00a      	beq.n	8008fc8 <sbrk_aligned+0x34>
 8008fb2:	1cc4      	adds	r4, r0, #3
 8008fb4:	f024 0403 	bic.w	r4, r4, #3
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d007      	beq.n	8008fcc <sbrk_aligned+0x38>
 8008fbc:	1a21      	subs	r1, r4, r0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fb96 	bl	80096f0 <_sbrk_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d101      	bne.n	8008fcc <sbrk_aligned+0x38>
 8008fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fcc:	4620      	mov	r0, r4
 8008fce:	bd70      	pop	{r4, r5, r6, pc}
 8008fd0:	20000760 	.word	0x20000760

08008fd4 <_malloc_r>:
 8008fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd8:	1ccd      	adds	r5, r1, #3
 8008fda:	f025 0503 	bic.w	r5, r5, #3
 8008fde:	3508      	adds	r5, #8
 8008fe0:	2d0c      	cmp	r5, #12
 8008fe2:	bf38      	it	cc
 8008fe4:	250c      	movcc	r5, #12
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	4607      	mov	r7, r0
 8008fea:	db01      	blt.n	8008ff0 <_malloc_r+0x1c>
 8008fec:	42a9      	cmp	r1, r5
 8008fee:	d905      	bls.n	8008ffc <_malloc_r+0x28>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090d0 <_malloc_r+0xfc>
 8009000:	f000 f868 	bl	80090d4 <__malloc_lock>
 8009004:	f8d8 3000 	ldr.w	r3, [r8]
 8009008:	461c      	mov	r4, r3
 800900a:	bb5c      	cbnz	r4, 8009064 <_malloc_r+0x90>
 800900c:	4629      	mov	r1, r5
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff ffc0 	bl	8008f94 <sbrk_aligned>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	4604      	mov	r4, r0
 8009018:	d155      	bne.n	80090c6 <_malloc_r+0xf2>
 800901a:	f8d8 4000 	ldr.w	r4, [r8]
 800901e:	4626      	mov	r6, r4
 8009020:	2e00      	cmp	r6, #0
 8009022:	d145      	bne.n	80090b0 <_malloc_r+0xdc>
 8009024:	2c00      	cmp	r4, #0
 8009026:	d048      	beq.n	80090ba <_malloc_r+0xe6>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	4631      	mov	r1, r6
 800902c:	4638      	mov	r0, r7
 800902e:	eb04 0903 	add.w	r9, r4, r3
 8009032:	f000 fb5d 	bl	80096f0 <_sbrk_r>
 8009036:	4581      	cmp	r9, r0
 8009038:	d13f      	bne.n	80090ba <_malloc_r+0xe6>
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	1a6d      	subs	r5, r5, r1
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa7 	bl	8008f94 <sbrk_aligned>
 8009046:	3001      	adds	r0, #1
 8009048:	d037      	beq.n	80090ba <_malloc_r+0xe6>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	442b      	add	r3, r5
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	f8d8 3000 	ldr.w	r3, [r8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d038      	beq.n	80090ca <_malloc_r+0xf6>
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	42a2      	cmp	r2, r4
 800905c:	d12b      	bne.n	80090b6 <_malloc_r+0xe2>
 800905e:	2200      	movs	r2, #0
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e00f      	b.n	8009084 <_malloc_r+0xb0>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	1b52      	subs	r2, r2, r5
 8009068:	d41f      	bmi.n	80090aa <_malloc_r+0xd6>
 800906a:	2a0b      	cmp	r2, #11
 800906c:	d917      	bls.n	800909e <_malloc_r+0xca>
 800906e:	1961      	adds	r1, r4, r5
 8009070:	42a3      	cmp	r3, r4
 8009072:	6025      	str	r5, [r4, #0]
 8009074:	bf18      	it	ne
 8009076:	6059      	strne	r1, [r3, #4]
 8009078:	6863      	ldr	r3, [r4, #4]
 800907a:	bf08      	it	eq
 800907c:	f8c8 1000 	streq.w	r1, [r8]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f000 f829 	bl	80090e0 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0ae      	beq.n	8008ff6 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7ab      	b.n	8008ff6 <_malloc_r+0x22>
 800909e:	42a3      	cmp	r3, r4
 80090a0:	6862      	ldr	r2, [r4, #4]
 80090a2:	d1dd      	bne.n	8009060 <_malloc_r+0x8c>
 80090a4:	f8c8 2000 	str.w	r2, [r8]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xb0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7ac      	b.n	800900a <_malloc_r+0x36>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b4      	b.n	8009020 <_malloc_r+0x4c>
 80090b6:	4613      	mov	r3, r2
 80090b8:	e7cc      	b.n	8009054 <_malloc_r+0x80>
 80090ba:	230c      	movs	r3, #12
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4638      	mov	r0, r7
 80090c0:	f000 f80e 	bl	80090e0 <__malloc_unlock>
 80090c4:	e797      	b.n	8008ff6 <_malloc_r+0x22>
 80090c6:	6025      	str	r5, [r4, #0]
 80090c8:	e7dc      	b.n	8009084 <_malloc_r+0xb0>
 80090ca:	605b      	str	r3, [r3, #4]
 80090cc:	deff      	udf	#255	; 0xff
 80090ce:	bf00      	nop
 80090d0:	2000075c 	.word	0x2000075c

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__malloc_lock+0x8>)
 80090d6:	f7ff bf0f 	b.w	8008ef8 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	20000758 	.word	0x20000758

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f7ff bf0a 	b.w	8008efa <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	20000758 	.word	0x20000758

080090ec <__ssputs_r>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	688e      	ldr	r6, [r1, #8]
 80090f2:	461f      	mov	r7, r3
 80090f4:	42be      	cmp	r6, r7
 80090f6:	680b      	ldr	r3, [r1, #0]
 80090f8:	4682      	mov	sl, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4690      	mov	r8, r2
 80090fe:	d82c      	bhi.n	800915a <__ssputs_r+0x6e>
 8009100:	898a      	ldrh	r2, [r1, #12]
 8009102:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009106:	d026      	beq.n	8009156 <__ssputs_r+0x6a>
 8009108:	6965      	ldr	r5, [r4, #20]
 800910a:	6909      	ldr	r1, [r1, #16]
 800910c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009110:	eba3 0901 	sub.w	r9, r3, r1
 8009114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009118:	1c7b      	adds	r3, r7, #1
 800911a:	444b      	add	r3, r9
 800911c:	106d      	asrs	r5, r5, #1
 800911e:	429d      	cmp	r5, r3
 8009120:	bf38      	it	cc
 8009122:	461d      	movcc	r5, r3
 8009124:	0553      	lsls	r3, r2, #21
 8009126:	d527      	bpl.n	8009178 <__ssputs_r+0x8c>
 8009128:	4629      	mov	r1, r5
 800912a:	f7ff ff53 	bl	8008fd4 <_malloc_r>
 800912e:	4606      	mov	r6, r0
 8009130:	b360      	cbz	r0, 800918c <__ssputs_r+0xa0>
 8009132:	6921      	ldr	r1, [r4, #16]
 8009134:	464a      	mov	r2, r9
 8009136:	f000 faeb 	bl	8009710 <memcpy>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	6126      	str	r6, [r4, #16]
 8009148:	6165      	str	r5, [r4, #20]
 800914a:	444e      	add	r6, r9
 800914c:	eba5 0509 	sub.w	r5, r5, r9
 8009150:	6026      	str	r6, [r4, #0]
 8009152:	60a5      	str	r5, [r4, #8]
 8009154:	463e      	mov	r6, r7
 8009156:	42be      	cmp	r6, r7
 8009158:	d900      	bls.n	800915c <__ssputs_r+0x70>
 800915a:	463e      	mov	r6, r7
 800915c:	6820      	ldr	r0, [r4, #0]
 800915e:	4632      	mov	r2, r6
 8009160:	4641      	mov	r1, r8
 8009162:	f000 faab 	bl	80096bc <memmove>
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	1b9b      	subs	r3, r3, r6
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	4433      	add	r3, r6
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	2000      	movs	r0, #0
 8009174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009178:	462a      	mov	r2, r5
 800917a:	f000 fad7 	bl	800972c <_realloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	d1e0      	bne.n	8009146 <__ssputs_r+0x5a>
 8009184:	6921      	ldr	r1, [r4, #16]
 8009186:	4650      	mov	r0, sl
 8009188:	f7ff feb8 	bl	8008efc <_free_r>
 800918c:	230c      	movs	r3, #12
 800918e:	f8ca 3000 	str.w	r3, [sl]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	e7e9      	b.n	8009174 <__ssputs_r+0x88>

080091a0 <_svfiprintf_r>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4698      	mov	r8, r3
 80091a6:	898b      	ldrh	r3, [r1, #12]
 80091a8:	061b      	lsls	r3, r3, #24
 80091aa:	b09d      	sub	sp, #116	; 0x74
 80091ac:	4607      	mov	r7, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	d50e      	bpl.n	80091d2 <_svfiprintf_r+0x32>
 80091b4:	690b      	ldr	r3, [r1, #16]
 80091b6:	b963      	cbnz	r3, 80091d2 <_svfiprintf_r+0x32>
 80091b8:	2140      	movs	r1, #64	; 0x40
 80091ba:	f7ff ff0b 	bl	8008fd4 <_malloc_r>
 80091be:	6028      	str	r0, [r5, #0]
 80091c0:	6128      	str	r0, [r5, #16]
 80091c2:	b920      	cbnz	r0, 80091ce <_svfiprintf_r+0x2e>
 80091c4:	230c      	movs	r3, #12
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	e0d0      	b.n	8009370 <_svfiprintf_r+0x1d0>
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	616b      	str	r3, [r5, #20]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	2320      	movs	r3, #32
 80091d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e0:	2330      	movs	r3, #48	; 0x30
 80091e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009388 <_svfiprintf_r+0x1e8>
 80091e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ea:	f04f 0901 	mov.w	r9, #1
 80091ee:	4623      	mov	r3, r4
 80091f0:	469a      	mov	sl, r3
 80091f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091f6:	b10a      	cbz	r2, 80091fc <_svfiprintf_r+0x5c>
 80091f8:	2a25      	cmp	r2, #37	; 0x25
 80091fa:	d1f9      	bne.n	80091f0 <_svfiprintf_r+0x50>
 80091fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009200:	d00b      	beq.n	800921a <_svfiprintf_r+0x7a>
 8009202:	465b      	mov	r3, fp
 8009204:	4622      	mov	r2, r4
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ff6f 	bl	80090ec <__ssputs_r>
 800920e:	3001      	adds	r0, #1
 8009210:	f000 80a9 	beq.w	8009366 <_svfiprintf_r+0x1c6>
 8009214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009216:	445a      	add	r2, fp
 8009218:	9209      	str	r2, [sp, #36]	; 0x24
 800921a:	f89a 3000 	ldrb.w	r3, [sl]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80a1 	beq.w	8009366 <_svfiprintf_r+0x1c6>
 8009224:	2300      	movs	r3, #0
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800922e:	f10a 0a01 	add.w	sl, sl, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	9307      	str	r3, [sp, #28]
 8009236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800923a:	931a      	str	r3, [sp, #104]	; 0x68
 800923c:	4654      	mov	r4, sl
 800923e:	2205      	movs	r2, #5
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	4850      	ldr	r0, [pc, #320]	; (8009388 <_svfiprintf_r+0x1e8>)
 8009246:	f7f6 ffe3 	bl	8000210 <memchr>
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	b9d8      	cbnz	r0, 8009286 <_svfiprintf_r+0xe6>
 800924e:	06d0      	lsls	r0, r2, #27
 8009250:	bf44      	itt	mi
 8009252:	2320      	movmi	r3, #32
 8009254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009258:	0711      	lsls	r1, r2, #28
 800925a:	bf44      	itt	mi
 800925c:	232b      	movmi	r3, #43	; 0x2b
 800925e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009262:	f89a 3000 	ldrb.w	r3, [sl]
 8009266:	2b2a      	cmp	r3, #42	; 0x2a
 8009268:	d015      	beq.n	8009296 <_svfiprintf_r+0xf6>
 800926a:	9a07      	ldr	r2, [sp, #28]
 800926c:	4654      	mov	r4, sl
 800926e:	2000      	movs	r0, #0
 8009270:	f04f 0c0a 	mov.w	ip, #10
 8009274:	4621      	mov	r1, r4
 8009276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	2b09      	cmp	r3, #9
 800927e:	d94d      	bls.n	800931c <_svfiprintf_r+0x17c>
 8009280:	b1b0      	cbz	r0, 80092b0 <_svfiprintf_r+0x110>
 8009282:	9207      	str	r2, [sp, #28]
 8009284:	e014      	b.n	80092b0 <_svfiprintf_r+0x110>
 8009286:	eba0 0308 	sub.w	r3, r0, r8
 800928a:	fa09 f303 	lsl.w	r3, r9, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	46a2      	mov	sl, r4
 8009294:	e7d2      	b.n	800923c <_svfiprintf_r+0x9c>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	1d19      	adds	r1, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9103      	str	r1, [sp, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfbb      	ittet	lt
 80092a2:	425b      	neglt	r3, r3
 80092a4:	f042 0202 	orrlt.w	r2, r2, #2
 80092a8:	9307      	strge	r3, [sp, #28]
 80092aa:	9307      	strlt	r3, [sp, #28]
 80092ac:	bfb8      	it	lt
 80092ae:	9204      	strlt	r2, [sp, #16]
 80092b0:	7823      	ldrb	r3, [r4, #0]
 80092b2:	2b2e      	cmp	r3, #46	; 0x2e
 80092b4:	d10c      	bne.n	80092d0 <_svfiprintf_r+0x130>
 80092b6:	7863      	ldrb	r3, [r4, #1]
 80092b8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ba:	d134      	bne.n	8009326 <_svfiprintf_r+0x186>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	1d1a      	adds	r2, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	9203      	str	r2, [sp, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	bfb8      	it	lt
 80092c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092cc:	3402      	adds	r4, #2
 80092ce:	9305      	str	r3, [sp, #20]
 80092d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009398 <_svfiprintf_r+0x1f8>
 80092d4:	7821      	ldrb	r1, [r4, #0]
 80092d6:	2203      	movs	r2, #3
 80092d8:	4650      	mov	r0, sl
 80092da:	f7f6 ff99 	bl	8000210 <memchr>
 80092de:	b138      	cbz	r0, 80092f0 <_svfiprintf_r+0x150>
 80092e0:	9b04      	ldr	r3, [sp, #16]
 80092e2:	eba0 000a 	sub.w	r0, r0, sl
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	4082      	lsls	r2, r0
 80092ea:	4313      	orrs	r3, r2
 80092ec:	3401      	adds	r4, #1
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f4:	4825      	ldr	r0, [pc, #148]	; (800938c <_svfiprintf_r+0x1ec>)
 80092f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092fa:	2206      	movs	r2, #6
 80092fc:	f7f6 ff88 	bl	8000210 <memchr>
 8009300:	2800      	cmp	r0, #0
 8009302:	d038      	beq.n	8009376 <_svfiprintf_r+0x1d6>
 8009304:	4b22      	ldr	r3, [pc, #136]	; (8009390 <_svfiprintf_r+0x1f0>)
 8009306:	bb1b      	cbnz	r3, 8009350 <_svfiprintf_r+0x1b0>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	3307      	adds	r3, #7
 800930c:	f023 0307 	bic.w	r3, r3, #7
 8009310:	3308      	adds	r3, #8
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009316:	4433      	add	r3, r6
 8009318:	9309      	str	r3, [sp, #36]	; 0x24
 800931a:	e768      	b.n	80091ee <_svfiprintf_r+0x4e>
 800931c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009320:	460c      	mov	r4, r1
 8009322:	2001      	movs	r0, #1
 8009324:	e7a6      	b.n	8009274 <_svfiprintf_r+0xd4>
 8009326:	2300      	movs	r3, #0
 8009328:	3401      	adds	r4, #1
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	4619      	mov	r1, r3
 800932e:	f04f 0c0a 	mov.w	ip, #10
 8009332:	4620      	mov	r0, r4
 8009334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009338:	3a30      	subs	r2, #48	; 0x30
 800933a:	2a09      	cmp	r2, #9
 800933c:	d903      	bls.n	8009346 <_svfiprintf_r+0x1a6>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0c6      	beq.n	80092d0 <_svfiprintf_r+0x130>
 8009342:	9105      	str	r1, [sp, #20]
 8009344:	e7c4      	b.n	80092d0 <_svfiprintf_r+0x130>
 8009346:	fb0c 2101 	mla	r1, ip, r1, r2
 800934a:	4604      	mov	r4, r0
 800934c:	2301      	movs	r3, #1
 800934e:	e7f0      	b.n	8009332 <_svfiprintf_r+0x192>
 8009350:	ab03      	add	r3, sp, #12
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	462a      	mov	r2, r5
 8009356:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <_svfiprintf_r+0x1f4>)
 8009358:	a904      	add	r1, sp, #16
 800935a:	4638      	mov	r0, r7
 800935c:	f3af 8000 	nop.w
 8009360:	1c42      	adds	r2, r0, #1
 8009362:	4606      	mov	r6, r0
 8009364:	d1d6      	bne.n	8009314 <_svfiprintf_r+0x174>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	065b      	lsls	r3, r3, #25
 800936a:	f53f af2d 	bmi.w	80091c8 <_svfiprintf_r+0x28>
 800936e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009370:	b01d      	add	sp, #116	; 0x74
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	ab03      	add	r3, sp, #12
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	462a      	mov	r2, r5
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <_svfiprintf_r+0x1f4>)
 800937e:	a904      	add	r1, sp, #16
 8009380:	4638      	mov	r0, r7
 8009382:	f000 f879 	bl	8009478 <_printf_i>
 8009386:	e7eb      	b.n	8009360 <_svfiprintf_r+0x1c0>
 8009388:	080098ec 	.word	0x080098ec
 800938c:	080098f6 	.word	0x080098f6
 8009390:	00000000 	.word	0x00000000
 8009394:	080090ed 	.word	0x080090ed
 8009398:	080098f2 	.word	0x080098f2

0800939c <_printf_common>:
 800939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	4616      	mov	r6, r2
 80093a2:	4699      	mov	r9, r3
 80093a4:	688a      	ldr	r2, [r1, #8]
 80093a6:	690b      	ldr	r3, [r1, #16]
 80093a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bfb8      	it	lt
 80093b0:	4613      	movlt	r3, r2
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b8:	4607      	mov	r7, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	b10a      	cbz	r2, 80093c2 <_printf_common+0x26>
 80093be:	3301      	adds	r3, #1
 80093c0:	6033      	str	r3, [r6, #0]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	0699      	lsls	r1, r3, #26
 80093c6:	bf42      	ittt	mi
 80093c8:	6833      	ldrmi	r3, [r6, #0]
 80093ca:	3302      	addmi	r3, #2
 80093cc:	6033      	strmi	r3, [r6, #0]
 80093ce:	6825      	ldr	r5, [r4, #0]
 80093d0:	f015 0506 	ands.w	r5, r5, #6
 80093d4:	d106      	bne.n	80093e4 <_printf_common+0x48>
 80093d6:	f104 0a19 	add.w	sl, r4, #25
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	6832      	ldr	r2, [r6, #0]
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	42ab      	cmp	r3, r5
 80093e2:	dc26      	bgt.n	8009432 <_printf_common+0x96>
 80093e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e8:	1e13      	subs	r3, r2, #0
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	bf18      	it	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	0692      	lsls	r2, r2, #26
 80093f2:	d42b      	bmi.n	800944c <_printf_common+0xb0>
 80093f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f8:	4649      	mov	r1, r9
 80093fa:	4638      	mov	r0, r7
 80093fc:	47c0      	blx	r8
 80093fe:	3001      	adds	r0, #1
 8009400:	d01e      	beq.n	8009440 <_printf_common+0xa4>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	f003 0306 	and.w	r3, r3, #6
 800940a:	2b04      	cmp	r3, #4
 800940c:	bf02      	ittt	eq
 800940e:	68e5      	ldreq	r5, [r4, #12]
 8009410:	6833      	ldreq	r3, [r6, #0]
 8009412:	1aed      	subeq	r5, r5, r3
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	bf0c      	ite	eq
 8009418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800941c:	2500      	movne	r5, #0
 800941e:	4293      	cmp	r3, r2
 8009420:	bfc4      	itt	gt
 8009422:	1a9b      	subgt	r3, r3, r2
 8009424:	18ed      	addgt	r5, r5, r3
 8009426:	2600      	movs	r6, #0
 8009428:	341a      	adds	r4, #26
 800942a:	42b5      	cmp	r5, r6
 800942c:	d11a      	bne.n	8009464 <_printf_common+0xc8>
 800942e:	2000      	movs	r0, #0
 8009430:	e008      	b.n	8009444 <_printf_common+0xa8>
 8009432:	2301      	movs	r3, #1
 8009434:	4652      	mov	r2, sl
 8009436:	4649      	mov	r1, r9
 8009438:	4638      	mov	r0, r7
 800943a:	47c0      	blx	r8
 800943c:	3001      	adds	r0, #1
 800943e:	d103      	bne.n	8009448 <_printf_common+0xac>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009448:	3501      	adds	r5, #1
 800944a:	e7c6      	b.n	80093da <_printf_common+0x3e>
 800944c:	18e1      	adds	r1, r4, r3
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	2030      	movs	r0, #48	; 0x30
 8009452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009456:	4422      	add	r2, r4
 8009458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800945c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009460:	3302      	adds	r3, #2
 8009462:	e7c7      	b.n	80093f4 <_printf_common+0x58>
 8009464:	2301      	movs	r3, #1
 8009466:	4622      	mov	r2, r4
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d0e6      	beq.n	8009440 <_printf_common+0xa4>
 8009472:	3601      	adds	r6, #1
 8009474:	e7d9      	b.n	800942a <_printf_common+0x8e>
	...

08009478 <_printf_i>:
 8009478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	7e0f      	ldrb	r7, [r1, #24]
 800947e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009480:	2f78      	cmp	r7, #120	; 0x78
 8009482:	4691      	mov	r9, r2
 8009484:	4680      	mov	r8, r0
 8009486:	460c      	mov	r4, r1
 8009488:	469a      	mov	sl, r3
 800948a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800948e:	d807      	bhi.n	80094a0 <_printf_i+0x28>
 8009490:	2f62      	cmp	r7, #98	; 0x62
 8009492:	d80a      	bhi.n	80094aa <_printf_i+0x32>
 8009494:	2f00      	cmp	r7, #0
 8009496:	f000 80d4 	beq.w	8009642 <_printf_i+0x1ca>
 800949a:	2f58      	cmp	r7, #88	; 0x58
 800949c:	f000 80c0 	beq.w	8009620 <_printf_i+0x1a8>
 80094a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a8:	e03a      	b.n	8009520 <_printf_i+0xa8>
 80094aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ae:	2b15      	cmp	r3, #21
 80094b0:	d8f6      	bhi.n	80094a0 <_printf_i+0x28>
 80094b2:	a101      	add	r1, pc, #4	; (adr r1, 80094b8 <_printf_i+0x40>)
 80094b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b8:	08009511 	.word	0x08009511
 80094bc:	08009525 	.word	0x08009525
 80094c0:	080094a1 	.word	0x080094a1
 80094c4:	080094a1 	.word	0x080094a1
 80094c8:	080094a1 	.word	0x080094a1
 80094cc:	080094a1 	.word	0x080094a1
 80094d0:	08009525 	.word	0x08009525
 80094d4:	080094a1 	.word	0x080094a1
 80094d8:	080094a1 	.word	0x080094a1
 80094dc:	080094a1 	.word	0x080094a1
 80094e0:	080094a1 	.word	0x080094a1
 80094e4:	08009629 	.word	0x08009629
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080095e3 	.word	0x080095e3
 80094f0:	080094a1 	.word	0x080094a1
 80094f4:	080094a1 	.word	0x080094a1
 80094f8:	0800964b 	.word	0x0800964b
 80094fc:	080094a1 	.word	0x080094a1
 8009500:	08009551 	.word	0x08009551
 8009504:	080094a1 	.word	0x080094a1
 8009508:	080094a1 	.word	0x080094a1
 800950c:	080095eb 	.word	0x080095eb
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	1d1a      	adds	r2, r3, #4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	602a      	str	r2, [r5, #0]
 8009518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800951c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009520:	2301      	movs	r3, #1
 8009522:	e09f      	b.n	8009664 <_printf_i+0x1ec>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	0607      	lsls	r7, r0, #24
 800952a:	f103 0104 	add.w	r1, r3, #4
 800952e:	6029      	str	r1, [r5, #0]
 8009530:	d501      	bpl.n	8009536 <_printf_i+0xbe>
 8009532:	681e      	ldr	r6, [r3, #0]
 8009534:	e003      	b.n	800953e <_printf_i+0xc6>
 8009536:	0646      	lsls	r6, r0, #25
 8009538:	d5fb      	bpl.n	8009532 <_printf_i+0xba>
 800953a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800953e:	2e00      	cmp	r6, #0
 8009540:	da03      	bge.n	800954a <_printf_i+0xd2>
 8009542:	232d      	movs	r3, #45	; 0x2d
 8009544:	4276      	negs	r6, r6
 8009546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800954a:	485a      	ldr	r0, [pc, #360]	; (80096b4 <_printf_i+0x23c>)
 800954c:	230a      	movs	r3, #10
 800954e:	e012      	b.n	8009576 <_printf_i+0xfe>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	1d19      	adds	r1, r3, #4
 8009556:	6029      	str	r1, [r5, #0]
 8009558:	0605      	lsls	r5, r0, #24
 800955a:	d501      	bpl.n	8009560 <_printf_i+0xe8>
 800955c:	681e      	ldr	r6, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0xee>
 8009560:	0641      	lsls	r1, r0, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0xe4>
 8009564:	881e      	ldrh	r6, [r3, #0]
 8009566:	4853      	ldr	r0, [pc, #332]	; (80096b4 <_printf_i+0x23c>)
 8009568:	2f6f      	cmp	r7, #111	; 0x6f
 800956a:	bf0c      	ite	eq
 800956c:	2308      	moveq	r3, #8
 800956e:	230a      	movne	r3, #10
 8009570:	2100      	movs	r1, #0
 8009572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009576:	6865      	ldr	r5, [r4, #4]
 8009578:	60a5      	str	r5, [r4, #8]
 800957a:	2d00      	cmp	r5, #0
 800957c:	bfa2      	ittt	ge
 800957e:	6821      	ldrge	r1, [r4, #0]
 8009580:	f021 0104 	bicge.w	r1, r1, #4
 8009584:	6021      	strge	r1, [r4, #0]
 8009586:	b90e      	cbnz	r6, 800958c <_printf_i+0x114>
 8009588:	2d00      	cmp	r5, #0
 800958a:	d04b      	beq.n	8009624 <_printf_i+0x1ac>
 800958c:	4615      	mov	r5, r2
 800958e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009592:	fb03 6711 	mls	r7, r3, r1, r6
 8009596:	5dc7      	ldrb	r7, [r0, r7]
 8009598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800959c:	4637      	mov	r7, r6
 800959e:	42bb      	cmp	r3, r7
 80095a0:	460e      	mov	r6, r1
 80095a2:	d9f4      	bls.n	800958e <_printf_i+0x116>
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d10b      	bne.n	80095c0 <_printf_i+0x148>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	07de      	lsls	r6, r3, #31
 80095ac:	d508      	bpl.n	80095c0 <_printf_i+0x148>
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6861      	ldr	r1, [r4, #4]
 80095b2:	4299      	cmp	r1, r3
 80095b4:	bfde      	ittt	le
 80095b6:	2330      	movle	r3, #48	; 0x30
 80095b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095c0:	1b52      	subs	r2, r2, r5
 80095c2:	6122      	str	r2, [r4, #16]
 80095c4:	f8cd a000 	str.w	sl, [sp]
 80095c8:	464b      	mov	r3, r9
 80095ca:	aa03      	add	r2, sp, #12
 80095cc:	4621      	mov	r1, r4
 80095ce:	4640      	mov	r0, r8
 80095d0:	f7ff fee4 	bl	800939c <_printf_common>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d14a      	bne.n	800966e <_printf_i+0x1f6>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	b004      	add	sp, #16
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f043 0320 	orr.w	r3, r3, #32
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	4833      	ldr	r0, [pc, #204]	; (80096b8 <_printf_i+0x240>)
 80095ec:	2778      	movs	r7, #120	; 0x78
 80095ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	061f      	lsls	r7, r3, #24
 80095f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095fc:	d402      	bmi.n	8009604 <_printf_i+0x18c>
 80095fe:	065f      	lsls	r7, r3, #25
 8009600:	bf48      	it	mi
 8009602:	b2b6      	uxthmi	r6, r6
 8009604:	07df      	lsls	r7, r3, #31
 8009606:	bf48      	it	mi
 8009608:	f043 0320 	orrmi.w	r3, r3, #32
 800960c:	6029      	str	r1, [r5, #0]
 800960e:	bf48      	it	mi
 8009610:	6023      	strmi	r3, [r4, #0]
 8009612:	b91e      	cbnz	r6, 800961c <_printf_i+0x1a4>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	2310      	movs	r3, #16
 800961e:	e7a7      	b.n	8009570 <_printf_i+0xf8>
 8009620:	4824      	ldr	r0, [pc, #144]	; (80096b4 <_printf_i+0x23c>)
 8009622:	e7e4      	b.n	80095ee <_printf_i+0x176>
 8009624:	4615      	mov	r5, r2
 8009626:	e7bd      	b.n	80095a4 <_printf_i+0x12c>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	6826      	ldr	r6, [r4, #0]
 800962c:	6961      	ldr	r1, [r4, #20]
 800962e:	1d18      	adds	r0, r3, #4
 8009630:	6028      	str	r0, [r5, #0]
 8009632:	0635      	lsls	r5, r6, #24
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	d501      	bpl.n	800963c <_printf_i+0x1c4>
 8009638:	6019      	str	r1, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0x1ca>
 800963c:	0670      	lsls	r0, r6, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0x1c0>
 8009640:	8019      	strh	r1, [r3, #0]
 8009642:	2300      	movs	r3, #0
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	4615      	mov	r5, r2
 8009648:	e7bc      	b.n	80095c4 <_printf_i+0x14c>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	1d1a      	adds	r2, r3, #4
 800964e:	602a      	str	r2, [r5, #0]
 8009650:	681d      	ldr	r5, [r3, #0]
 8009652:	6862      	ldr	r2, [r4, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	4628      	mov	r0, r5
 8009658:	f7f6 fdda 	bl	8000210 <memchr>
 800965c:	b108      	cbz	r0, 8009662 <_printf_i+0x1ea>
 800965e:	1b40      	subs	r0, r0, r5
 8009660:	6060      	str	r0, [r4, #4]
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	2300      	movs	r3, #0
 8009668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800966c:	e7aa      	b.n	80095c4 <_printf_i+0x14c>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	462a      	mov	r2, r5
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d0ad      	beq.n	80095d8 <_printf_i+0x160>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	079b      	lsls	r3, r3, #30
 8009680:	d413      	bmi.n	80096aa <_printf_i+0x232>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	4298      	cmp	r0, r3
 8009688:	bfb8      	it	lt
 800968a:	4618      	movlt	r0, r3
 800968c:	e7a6      	b.n	80095dc <_printf_i+0x164>
 800968e:	2301      	movs	r3, #1
 8009690:	4632      	mov	r2, r6
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d09d      	beq.n	80095d8 <_printf_i+0x160>
 800969c:	3501      	adds	r5, #1
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	9903      	ldr	r1, [sp, #12]
 80096a2:	1a5b      	subs	r3, r3, r1
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	dcf2      	bgt.n	800968e <_printf_i+0x216>
 80096a8:	e7eb      	b.n	8009682 <_printf_i+0x20a>
 80096aa:	2500      	movs	r5, #0
 80096ac:	f104 0619 	add.w	r6, r4, #25
 80096b0:	e7f5      	b.n	800969e <_printf_i+0x226>
 80096b2:	bf00      	nop
 80096b4:	080098fd 	.word	0x080098fd
 80096b8:	0800990e 	.word	0x0800990e

080096bc <memmove>:
 80096bc:	4288      	cmp	r0, r1
 80096be:	b510      	push	{r4, lr}
 80096c0:	eb01 0402 	add.w	r4, r1, r2
 80096c4:	d902      	bls.n	80096cc <memmove+0x10>
 80096c6:	4284      	cmp	r4, r0
 80096c8:	4623      	mov	r3, r4
 80096ca:	d807      	bhi.n	80096dc <memmove+0x20>
 80096cc:	1e43      	subs	r3, r0, #1
 80096ce:	42a1      	cmp	r1, r4
 80096d0:	d008      	beq.n	80096e4 <memmove+0x28>
 80096d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096da:	e7f8      	b.n	80096ce <memmove+0x12>
 80096dc:	4402      	add	r2, r0
 80096de:	4601      	mov	r1, r0
 80096e0:	428a      	cmp	r2, r1
 80096e2:	d100      	bne.n	80096e6 <memmove+0x2a>
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ee:	e7f7      	b.n	80096e0 <memmove+0x24>

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 feda 	bl	80024b4 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20000754 	.word	0x20000754

08009710 <memcpy>:
 8009710:	440a      	add	r2, r1
 8009712:	4291      	cmp	r1, r2
 8009714:	f100 33ff 	add.w	r3, r0, #4294967295
 8009718:	d100      	bne.n	800971c <memcpy+0xc>
 800971a:	4770      	bx	lr
 800971c:	b510      	push	{r4, lr}
 800971e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009726:	4291      	cmp	r1, r2
 8009728:	d1f9      	bne.n	800971e <memcpy+0xe>
 800972a:	bd10      	pop	{r4, pc}

0800972c <_realloc_r>:
 800972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009730:	4680      	mov	r8, r0
 8009732:	4614      	mov	r4, r2
 8009734:	460e      	mov	r6, r1
 8009736:	b921      	cbnz	r1, 8009742 <_realloc_r+0x16>
 8009738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4611      	mov	r1, r2
 800973e:	f7ff bc49 	b.w	8008fd4 <_malloc_r>
 8009742:	b92a      	cbnz	r2, 8009750 <_realloc_r+0x24>
 8009744:	f7ff fbda 	bl	8008efc <_free_r>
 8009748:	4625      	mov	r5, r4
 800974a:	4628      	mov	r0, r5
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	f000 f81b 	bl	800978a <_malloc_usable_size_r>
 8009754:	4284      	cmp	r4, r0
 8009756:	4607      	mov	r7, r0
 8009758:	d802      	bhi.n	8009760 <_realloc_r+0x34>
 800975a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800975e:	d812      	bhi.n	8009786 <_realloc_r+0x5a>
 8009760:	4621      	mov	r1, r4
 8009762:	4640      	mov	r0, r8
 8009764:	f7ff fc36 	bl	8008fd4 <_malloc_r>
 8009768:	4605      	mov	r5, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	d0ed      	beq.n	800974a <_realloc_r+0x1e>
 800976e:	42bc      	cmp	r4, r7
 8009770:	4622      	mov	r2, r4
 8009772:	4631      	mov	r1, r6
 8009774:	bf28      	it	cs
 8009776:	463a      	movcs	r2, r7
 8009778:	f7ff ffca 	bl	8009710 <memcpy>
 800977c:	4631      	mov	r1, r6
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fbbc 	bl	8008efc <_free_r>
 8009784:	e7e1      	b.n	800974a <_realloc_r+0x1e>
 8009786:	4635      	mov	r5, r6
 8009788:	e7df      	b.n	800974a <_realloc_r+0x1e>

0800978a <_malloc_usable_size_r>:
 800978a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800978e:	1f18      	subs	r0, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	bfbc      	itt	lt
 8009794:	580b      	ldrlt	r3, [r1, r0]
 8009796:	18c0      	addlt	r0, r0, r3
 8009798:	4770      	bx	lr
	...

0800979c <trunc>:
 800979c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80097a0:	ec5c bb10 	vmov	fp, ip, d0
 80097a4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80097a8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80097ac:	2913      	cmp	r1, #19
 80097ae:	4664      	mov	r4, ip
 80097b0:	dc11      	bgt.n	80097d6 <trunc+0x3a>
 80097b2:	2900      	cmp	r1, #0
 80097b4:	bfa7      	ittee	ge
 80097b6:	4b15      	ldrge	r3, [pc, #84]	; (800980c <trunc+0x70>)
 80097b8:	fa43 f101 	asrge.w	r1, r3, r1
 80097bc:	2200      	movlt	r2, #0
 80097be:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80097c2:	bfa4      	itt	ge
 80097c4:	2200      	movge	r2, #0
 80097c6:	ea01 030c 	andge.w	r3, r1, ip
 80097ca:	4693      	mov	fp, r2
 80097cc:	469c      	mov	ip, r3
 80097ce:	ec4c bb10 	vmov	d0, fp, ip
 80097d2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80097d6:	2933      	cmp	r1, #51	; 0x33
 80097d8:	dd0d      	ble.n	80097f6 <trunc+0x5a>
 80097da:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097de:	d1f6      	bne.n	80097ce <trunc+0x32>
 80097e0:	4663      	mov	r3, ip
 80097e2:	ee10 2a10 	vmov	r2, s0
 80097e6:	ee10 0a10 	vmov	r0, s0
 80097ea:	4621      	mov	r1, r4
 80097ec:	f7f6 fd66 	bl	80002bc <__adddf3>
 80097f0:	4683      	mov	fp, r0
 80097f2:	468c      	mov	ip, r1
 80097f4:	e7eb      	b.n	80097ce <trunc+0x32>
 80097f6:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295
 80097fe:	40c3      	lsrs	r3, r0
 8009800:	ea2b 0603 	bic.w	r6, fp, r3
 8009804:	46b3      	mov	fp, r6
 8009806:	46a4      	mov	ip, r4
 8009808:	e7e1      	b.n	80097ce <trunc+0x32>
 800980a:	bf00      	nop
 800980c:	fff00000 	.word	0xfff00000

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
